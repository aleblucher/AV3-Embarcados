
AV-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000736c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040736c  0040736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00407374  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bc90  204009d0  00407d44  000209d0  2**2
                  ALLOC
  4 .stack        00002000  2040c660  004139d4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040e660  004159d4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026925  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005497  00000000  00000000  0004737c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b859  00000000  00000000  0004c813  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010b8  00000000  00000000  0005806c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001218  00000000  00000000  00059124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027f4c  00000000  00000000  0005a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000187e7  00000000  00000000  00082288  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a0d82  00000000  00000000  0009aa6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000034f8  00000000  00000000  0013b7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 e6 40 20 cd 2a 40 00 cb 2a 40 00 cb 2a 40 00     `.@ .*@..*@..*@.
  400010:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 00 00 00 00     .*@..*@..*@.....
	...
  40002c:	45 08 40 00 cb 2a 40 00 00 00 00 00 a1 08 40 00     E.@..*@.......@.
  40003c:	09 09 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     ..@..*@..*@..*@.
  40004c:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  40005c:	cb 2a 40 00 cb 2a 40 00 00 00 00 00 69 26 40 00     .*@..*@.....i&@.
  40006c:	7d 26 40 00 91 26 40 00 cb 2a 40 00 e9 2f 40 00     }&@..&@..*@../@.
  40007c:	cb 2a 40 00 a5 26 40 00 b9 26 40 00 cb 2a 40 00     .*@..&@..&@..*@.
  40008c:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  40009c:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  4000ac:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  4000bc:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  4000cc:	cb 2a 40 00 00 00 00 00 cb 2a 40 00 00 00 00 00     .*@......*@.....
  4000dc:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  4000ec:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  4000fc:	cb 2a 40 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .*@..*@..*@..*@.
  40010c:	cb 2a 40 00 cb 2a 40 00 00 00 00 00 00 00 00 00     .*@..*@.........
  40011c:	00 00 00 00 cb 2a 40 00 cb 2a 40 00 cb 2a 40 00     .....*@..*@..*@.
  40012c:	cb 2a 40 00 cb 2a 40 00 00 00 00 00 cb 2a 40 00     .*@..*@......*@.
  40013c:	cb 2a 40 00                                         .*@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00407374 	.word	0x00407374

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407374 	.word	0x00407374
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00407374 	.word	0x00407374
  4001a8:	00000000 	.word	0x00000000

004001ac <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4001ac:	4b01      	ldr	r3, [pc, #4]	; (4001b4 <gfx_mono_set_framebuffer+0x8>)
  4001ae:	6018      	str	r0, [r3, #0]
  4001b0:	4770      	bx	lr
  4001b2:	bf00      	nop
  4001b4:	204009ec 	.word	0x204009ec

004001b8 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4001b8:	4b02      	ldr	r3, [pc, #8]	; (4001c4 <gfx_mono_framebuffer_put_byte+0xc>)
  4001ba:	681b      	ldr	r3, [r3, #0]
  4001bc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4001c0:	5442      	strb	r2, [r0, r1]
  4001c2:	4770      	bx	lr
  4001c4:	204009ec 	.word	0x204009ec

004001c8 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4001c8:	4b02      	ldr	r3, [pc, #8]	; (4001d4 <gfx_mono_framebuffer_get_byte+0xc>)
  4001ca:	681b      	ldr	r3, [r3, #0]
  4001cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4001d0:	5c40      	ldrb	r0, [r0, r1]
  4001d2:	4770      	bx	lr
  4001d4:	204009ec 	.word	0x204009ec

004001d8 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4001d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4001dc:	1884      	adds	r4, r0, r2
  4001de:	2c80      	cmp	r4, #128	; 0x80
  4001e0:	dd02      	ble.n	4001e8 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4001e2:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4001e6:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4001e8:	b322      	cbz	r2, 400234 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4001ea:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4001ec:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4001f0:	2601      	movs	r6, #1
  4001f2:	fa06 f101 	lsl.w	r1, r6, r1
  4001f6:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4001f8:	2b01      	cmp	r3, #1
  4001fa:	d01d      	beq.n	400238 <gfx_mono_generic_draw_horizontal_line+0x60>
  4001fc:	2b00      	cmp	r3, #0
  4001fe:	d035      	beq.n	40026c <gfx_mono_generic_draw_horizontal_line+0x94>
  400200:	2b02      	cmp	r3, #2
  400202:	d117      	bne.n	400234 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400204:	3801      	subs	r0, #1
  400206:	b2c7      	uxtb	r7, r0
  400208:	19d4      	adds	r4, r2, r7
  40020a:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  40020c:	f8df a090 	ldr.w	sl, [pc, #144]	; 4002a0 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400210:	f04f 0900 	mov.w	r9, #0
  400214:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4002a4 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400218:	4621      	mov	r1, r4
  40021a:	4628      	mov	r0, r5
  40021c:	47d0      	blx	sl
			temp ^= pixelmask;
  40021e:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400222:	464b      	mov	r3, r9
  400224:	b2d2      	uxtb	r2, r2
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	47c0      	blx	r8
  40022c:	3c01      	subs	r4, #1
  40022e:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400230:	42bc      	cmp	r4, r7
  400232:	d1f1      	bne.n	400218 <gfx_mono_generic_draw_horizontal_line+0x40>
  400234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400238:	3801      	subs	r0, #1
  40023a:	b2c7      	uxtb	r7, r0
  40023c:	19d4      	adds	r4, r2, r7
  40023e:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400240:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4002a0 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400244:	f04f 0900 	mov.w	r9, #0
  400248:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4002a4 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40024c:	4621      	mov	r1, r4
  40024e:	4628      	mov	r0, r5
  400250:	47d0      	blx	sl
			temp |= pixelmask;
  400252:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400256:	464b      	mov	r3, r9
  400258:	b2d2      	uxtb	r2, r2
  40025a:	4621      	mov	r1, r4
  40025c:	4628      	mov	r0, r5
  40025e:	47c0      	blx	r8
  400260:	3c01      	subs	r4, #1
  400262:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400264:	42bc      	cmp	r4, r7
  400266:	d1f1      	bne.n	40024c <gfx_mono_generic_draw_horizontal_line+0x74>
  400268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40026c:	3801      	subs	r0, #1
  40026e:	b2c7      	uxtb	r7, r0
  400270:	19d4      	adds	r4, r2, r7
  400272:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400274:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4002a0 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400278:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40027a:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4002a4 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40027e:	4621      	mov	r1, r4
  400280:	4628      	mov	r0, r5
  400282:	47c0      	blx	r8
			temp &= ~pixelmask;
  400284:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400288:	2300      	movs	r3, #0
  40028a:	b2d2      	uxtb	r2, r2
  40028c:	4621      	mov	r1, r4
  40028e:	4628      	mov	r0, r5
  400290:	47c8      	blx	r9
  400292:	3c01      	subs	r4, #1
  400294:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400296:	42bc      	cmp	r4, r7
  400298:	d1f1      	bne.n	40027e <gfx_mono_generic_draw_horizontal_line+0xa6>
  40029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40029e:	bf00      	nop
  4002a0:	004004d9 	.word	0x004004d9
  4002a4:	004003d5 	.word	0x004003d5

004002a8 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4002a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4002ac:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4002b0:	b18b      	cbz	r3, 4002d6 <gfx_mono_generic_draw_filled_rect+0x2e>
  4002b2:	461c      	mov	r4, r3
  4002b4:	4690      	mov	r8, r2
  4002b6:	4606      	mov	r6, r0
  4002b8:	1e4d      	subs	r5, r1, #1
  4002ba:	b2ed      	uxtb	r5, r5
  4002bc:	442c      	add	r4, r5
  4002be:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4002c0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4002dc <gfx_mono_generic_draw_filled_rect+0x34>
  4002c4:	463b      	mov	r3, r7
  4002c6:	4642      	mov	r2, r8
  4002c8:	4621      	mov	r1, r4
  4002ca:	4630      	mov	r0, r6
  4002cc:	47c8      	blx	r9
  4002ce:	3c01      	subs	r4, #1
  4002d0:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4002d2:	42ac      	cmp	r4, r5
  4002d4:	d1f6      	bne.n	4002c4 <gfx_mono_generic_draw_filled_rect+0x1c>
  4002d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4002da:	bf00      	nop
  4002dc:	004001d9 	.word	0x004001d9

004002e0 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002e4:	b083      	sub	sp, #12
  4002e6:	4604      	mov	r4, r0
  4002e8:	4688      	mov	r8, r1
  4002ea:	4691      	mov	r9, r2
  4002ec:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4002ee:	7a5b      	ldrb	r3, [r3, #9]
  4002f0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4002f4:	2100      	movs	r1, #0
  4002f6:	9100      	str	r1, [sp, #0]
  4002f8:	4649      	mov	r1, r9
  4002fa:	4640      	mov	r0, r8
  4002fc:	4d21      	ldr	r5, [pc, #132]	; (400384 <gfx_mono_draw_char+0xa4>)
  4002fe:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400300:	f89b 3000 	ldrb.w	r3, [fp]
  400304:	b113      	cbz	r3, 40030c <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400306:	b003      	add	sp, #12
  400308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  40030c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400310:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400312:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400316:	bf18      	it	ne
  400318:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40031a:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40031e:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400322:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400324:	fb17 f70a 	smulbb	r7, r7, sl
  400328:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  40032c:	f8db 3004 	ldr.w	r3, [fp, #4]
  400330:	fa13 f787 	uxtah	r7, r3, r7
  400334:	e01f      	b.n	400376 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400336:	0064      	lsls	r4, r4, #1
  400338:	b2e4      	uxtb	r4, r4
  40033a:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  40033c:	b2eb      	uxtb	r3, r5
  40033e:	429e      	cmp	r6, r3
  400340:	d910      	bls.n	400364 <gfx_mono_draw_char+0x84>
  400342:	b2eb      	uxtb	r3, r5
  400344:	eb08 0003 	add.w	r0, r8, r3
  400348:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40034a:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40034e:	bf08      	it	eq
  400350:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400354:	f014 0f80 	tst.w	r4, #128	; 0x80
  400358:	d0ed      	beq.n	400336 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40035a:	2201      	movs	r2, #1
  40035c:	4649      	mov	r1, r9
  40035e:	4b0a      	ldr	r3, [pc, #40]	; (400388 <gfx_mono_draw_char+0xa8>)
  400360:	4798      	blx	r3
  400362:	e7e8      	b.n	400336 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400364:	f109 0901 	add.w	r9, r9, #1
  400368:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  40036c:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400370:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400374:	d0c7      	beq.n	400306 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400376:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40037a:	2e00      	cmp	r6, #0
  40037c:	d0f2      	beq.n	400364 <gfx_mono_draw_char+0x84>
  40037e:	2500      	movs	r5, #0
  400380:	462c      	mov	r4, r5
  400382:	e7de      	b.n	400342 <gfx_mono_draw_char+0x62>
  400384:	004002a9 	.word	0x004002a9
  400388:	00400475 	.word	0x00400475

0040038c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  40038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400390:	4604      	mov	r4, r0
  400392:	4690      	mov	r8, r2
  400394:	461d      	mov	r5, r3
  400396:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400398:	4f0d      	ldr	r7, [pc, #52]	; (4003d0 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40039a:	460e      	mov	r6, r1
  40039c:	e008      	b.n	4003b0 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40039e:	7a6a      	ldrb	r2, [r5, #9]
  4003a0:	3201      	adds	r2, #1
  4003a2:	4442      	add	r2, r8
  4003a4:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4003a8:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4003aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4003ae:	b16b      	cbz	r3, 4003cc <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4003b0:	7820      	ldrb	r0, [r4, #0]
  4003b2:	280a      	cmp	r0, #10
  4003b4:	d0f3      	beq.n	40039e <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4003b6:	280d      	cmp	r0, #13
  4003b8:	d0f7      	beq.n	4003aa <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4003ba:	462b      	mov	r3, r5
  4003bc:	4642      	mov	r2, r8
  4003be:	4649      	mov	r1, r9
  4003c0:	47b8      	blx	r7
			x += font->width;
  4003c2:	7a2b      	ldrb	r3, [r5, #8]
  4003c4:	4499      	add	r9, r3
  4003c6:	fa5f f989 	uxtb.w	r9, r9
  4003ca:	e7ee      	b.n	4003aa <gfx_mono_draw_string+0x1e>
}
  4003cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003d0:	004002e1 	.word	0x004002e1

004003d4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4003d4:	b570      	push	{r4, r5, r6, lr}
  4003d6:	4604      	mov	r4, r0
  4003d8:	460d      	mov	r5, r1
  4003da:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4003dc:	b91b      	cbnz	r3, 4003e6 <gfx_mono_ssd1306_put_byte+0x12>
  4003de:	4b0d      	ldr	r3, [pc, #52]	; (400414 <gfx_mono_ssd1306_put_byte+0x40>)
  4003e0:	4798      	blx	r3
  4003e2:	42b0      	cmp	r0, r6
  4003e4:	d015      	beq.n	400412 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4003e6:	4632      	mov	r2, r6
  4003e8:	4629      	mov	r1, r5
  4003ea:	4620      	mov	r0, r4
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <gfx_mono_ssd1306_put_byte+0x44>)
  4003ee:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4003f0:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4003f4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4003f8:	4c08      	ldr	r4, [pc, #32]	; (40041c <gfx_mono_ssd1306_put_byte+0x48>)
  4003fa:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4003fc:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400400:	f040 0010 	orr.w	r0, r0, #16
  400404:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400406:	f005 000f 	and.w	r0, r5, #15
  40040a:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  40040c:	4630      	mov	r0, r6
  40040e:	4b04      	ldr	r3, [pc, #16]	; (400420 <gfx_mono_ssd1306_put_byte+0x4c>)
  400410:	4798      	blx	r3
  400412:	bd70      	pop	{r4, r5, r6, pc}
  400414:	004001c9 	.word	0x004001c9
  400418:	004001b9 	.word	0x004001b9
  40041c:	004004e5 	.word	0x004004e5
  400420:	00400705 	.word	0x00400705

00400424 <gfx_mono_ssd1306_init>:
{
  400424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400428:	480d      	ldr	r0, [pc, #52]	; (400460 <gfx_mono_ssd1306_init+0x3c>)
  40042a:	4b0e      	ldr	r3, [pc, #56]	; (400464 <gfx_mono_ssd1306_init+0x40>)
  40042c:	4798      	blx	r3
	ssd1306_init();
  40042e:	4b0e      	ldr	r3, [pc, #56]	; (400468 <gfx_mono_ssd1306_init+0x44>)
  400430:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400432:	2040      	movs	r0, #64	; 0x40
  400434:	4b0d      	ldr	r3, [pc, #52]	; (40046c <gfx_mono_ssd1306_init+0x48>)
  400436:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400438:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40043a:	f04f 0801 	mov.w	r8, #1
  40043e:	462f      	mov	r7, r5
  400440:	4e0b      	ldr	r6, [pc, #44]	; (400470 <gfx_mono_ssd1306_init+0x4c>)
{
  400442:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400444:	4643      	mov	r3, r8
  400446:	463a      	mov	r2, r7
  400448:	b2e1      	uxtb	r1, r4
  40044a:	4628      	mov	r0, r5
  40044c:	47b0      	blx	r6
  40044e:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400450:	2c80      	cmp	r4, #128	; 0x80
  400452:	d1f7      	bne.n	400444 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400454:	3501      	adds	r5, #1
  400456:	b2ed      	uxtb	r5, r5
  400458:	2d04      	cmp	r5, #4
  40045a:	d1f2      	bne.n	400442 <gfx_mono_ssd1306_init+0x1e>
  40045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400460:	204009f0 	.word	0x204009f0
  400464:	004001ad 	.word	0x004001ad
  400468:	00400525 	.word	0x00400525
  40046c:	004004e5 	.word	0x004004e5
  400470:	004003d5 	.word	0x004003d5

00400474 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400474:	09c3      	lsrs	r3, r0, #7
  400476:	d12a      	bne.n	4004ce <gfx_mono_ssd1306_draw_pixel+0x5a>
  400478:	291f      	cmp	r1, #31
  40047a:	d828      	bhi.n	4004ce <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  40047c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400480:	4614      	mov	r4, r2
  400482:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400484:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400486:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  40048a:	2201      	movs	r2, #1
  40048c:	fa02 f701 	lsl.w	r7, r2, r1
  400490:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400494:	4601      	mov	r1, r0
  400496:	4630      	mov	r0, r6
  400498:	4b0d      	ldr	r3, [pc, #52]	; (4004d0 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40049a:	4798      	blx	r3
  40049c:	4602      	mov	r2, r0
	switch (color) {
  40049e:	2c01      	cmp	r4, #1
  4004a0:	d009      	beq.n	4004b6 <gfx_mono_ssd1306_draw_pixel+0x42>
  4004a2:	b164      	cbz	r4, 4004be <gfx_mono_ssd1306_draw_pixel+0x4a>
  4004a4:	2c02      	cmp	r4, #2
  4004a6:	d00e      	beq.n	4004c6 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4004a8:	2300      	movs	r3, #0
  4004aa:	4629      	mov	r1, r5
  4004ac:	4630      	mov	r0, r6
  4004ae:	4c09      	ldr	r4, [pc, #36]	; (4004d4 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4004b0:	47a0      	blx	r4
  4004b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4004b6:	ea48 0200 	orr.w	r2, r8, r0
  4004ba:	b2d2      	uxtb	r2, r2
		break;
  4004bc:	e7f4      	b.n	4004a8 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4004be:	ea20 0207 	bic.w	r2, r0, r7
  4004c2:	b2d2      	uxtb	r2, r2
		break;
  4004c4:	e7f0      	b.n	4004a8 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4004c6:	ea88 0200 	eor.w	r2, r8, r0
  4004ca:	b2d2      	uxtb	r2, r2
		break;
  4004cc:	e7ec      	b.n	4004a8 <gfx_mono_ssd1306_draw_pixel+0x34>
  4004ce:	4770      	bx	lr
  4004d0:	004001c9 	.word	0x004001c9
  4004d4:	004003d5 	.word	0x004003d5

004004d8 <gfx_mono_ssd1306_get_byte>:
{
  4004d8:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4004da:	4b01      	ldr	r3, [pc, #4]	; (4004e0 <gfx_mono_ssd1306_get_byte+0x8>)
  4004dc:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4004de:	bd08      	pop	{r3, pc}
  4004e0:	004001c9 	.word	0x004001c9

004004e4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4004e4:	b538      	push	{r3, r4, r5, lr}
  4004e6:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004e8:	2208      	movs	r2, #8
  4004ea:	4b09      	ldr	r3, [pc, #36]	; (400510 <ssd1306_write_command+0x2c>)
  4004ec:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4004ee:	4c09      	ldr	r4, [pc, #36]	; (400514 <ssd1306_write_command+0x30>)
  4004f0:	2101      	movs	r1, #1
  4004f2:	4620      	mov	r0, r4
  4004f4:	4b08      	ldr	r3, [pc, #32]	; (400518 <ssd1306_write_command+0x34>)
  4004f6:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4004f8:	2301      	movs	r3, #1
  4004fa:	461a      	mov	r2, r3
  4004fc:	4629      	mov	r1, r5
  4004fe:	4620      	mov	r0, r4
  400500:	4c06      	ldr	r4, [pc, #24]	; (40051c <ssd1306_write_command+0x38>)
  400502:	47a0      	blx	r4
	delay_us(10);
  400504:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400508:	4b05      	ldr	r3, [pc, #20]	; (400520 <ssd1306_write_command+0x3c>)
  40050a:	4798      	blx	r3
  40050c:	bd38      	pop	{r3, r4, r5, pc}
  40050e:	bf00      	nop
  400510:	400e1000 	.word	0x400e1000
  400514:	40008000 	.word	0x40008000
  400518:	0040286d 	.word	0x0040286d
  40051c:	00402883 	.word	0x00402883
  400520:	20400001 	.word	0x20400001

00400524 <ssd1306_init>:
{
  400524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400528:	4d66      	ldr	r5, [pc, #408]	; (4006c4 <ssd1306_init+0x1a0>)
  40052a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40052e:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400530:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400534:	4b64      	ldr	r3, [pc, #400]	; (4006c8 <ssd1306_init+0x1a4>)
  400536:	2708      	movs	r7, #8
  400538:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053a:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40053e:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400540:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400544:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400546:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400548:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40054c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40054e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400552:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400554:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400556:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40055a:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40055c:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40055e:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400562:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400564:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400566:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40056a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40056c:	f022 0208 	bic.w	r2, r2, #8
  400570:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400572:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400574:	f022 0208 	bic.w	r2, r2, #8
  400578:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40057a:	601f      	str	r7, [r3, #0]
  40057c:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40057e:	631f      	str	r7, [r3, #48]	; 0x30
  400580:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400582:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400700 <ssd1306_init+0x1dc>
  400586:	2300      	movs	r3, #0
  400588:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40058c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400590:	4640      	mov	r0, r8
  400592:	4c4e      	ldr	r4, [pc, #312]	; (4006cc <ssd1306_init+0x1a8>)
  400594:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400596:	2300      	movs	r3, #0
  400598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40059c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005a0:	4640      	mov	r0, r8
  4005a2:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4005a4:	2300      	movs	r3, #0
  4005a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4005aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005ae:	4640      	mov	r0, r8
  4005b0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4005b2:	2300      	movs	r3, #0
  4005b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4005b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005bc:	4640      	mov	r0, r8
  4005be:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4005c0:	2300      	movs	r3, #0
  4005c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4005c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005ca:	4640      	mov	r0, r8
  4005cc:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4005ce:	2300      	movs	r3, #0
  4005d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4005d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005d8:	4640      	mov	r0, r8
  4005da:	47a0      	blx	r4
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4005dc:	4c3c      	ldr	r4, [pc, #240]	; (4006d0 <ssd1306_init+0x1ac>)
  4005de:	f04f 0902 	mov.w	r9, #2
  4005e2:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4005e6:	f04f 0880 	mov.w	r8, #128	; 0x80
  4005ea:	f8c4 8000 	str.w	r8, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4005ee:	6863      	ldr	r3, [r4, #4]
  4005f0:	f043 0301 	orr.w	r3, r3, #1
  4005f4:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4005f6:	463a      	mov	r2, r7
  4005f8:	2101      	movs	r1, #1
  4005fa:	4620      	mov	r0, r4
  4005fc:	4b35      	ldr	r3, [pc, #212]	; (4006d4 <ssd1306_init+0x1b0>)
  4005fe:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400600:	2200      	movs	r2, #0
  400602:	2101      	movs	r1, #1
  400604:	4620      	mov	r0, r4
  400606:	4b34      	ldr	r3, [pc, #208]	; (4006d8 <ssd1306_init+0x1b4>)
  400608:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40060a:	2200      	movs	r2, #0
  40060c:	2101      	movs	r1, #1
  40060e:	4620      	mov	r0, r4
  400610:	4b32      	ldr	r3, [pc, #200]	; (4006dc <ssd1306_init+0x1b8>)
  400612:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400614:	6863      	ldr	r3, [r4, #4]
  400616:	f023 0302 	bic.w	r3, r3, #2
  40061a:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  40061c:	2200      	movs	r2, #0
  40061e:	2101      	movs	r1, #1
  400620:	4620      	mov	r0, r4
  400622:	4b2f      	ldr	r3, [pc, #188]	; (4006e0 <ssd1306_init+0x1bc>)
  400624:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400626:	6863      	ldr	r3, [r4, #4]
  400628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40062c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40062e:	6863      	ldr	r3, [r4, #4]
  400630:	f043 0310 	orr.w	r3, r3, #16
  400634:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400636:	492b      	ldr	r1, [pc, #172]	; (4006e4 <ssd1306_init+0x1c0>)
  400638:	482b      	ldr	r0, [pc, #172]	; (4006e8 <ssd1306_init+0x1c4>)
  40063a:	4b2c      	ldr	r3, [pc, #176]	; (4006ec <ssd1306_init+0x1c8>)
  40063c:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40063e:	b2c2      	uxtb	r2, r0
  400640:	2101      	movs	r1, #1
  400642:	4620      	mov	r0, r4
  400644:	4b2a      	ldr	r3, [pc, #168]	; (4006f0 <ssd1306_init+0x1cc>)
  400646:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400648:	4620      	mov	r0, r4
  40064a:	4b2a      	ldr	r3, [pc, #168]	; (4006f4 <ssd1306_init+0x1d0>)
  40064c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40064e:	2301      	movs	r3, #1
  400650:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400652:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400654:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400658:	4c27      	ldr	r4, [pc, #156]	; (4006f8 <ssd1306_init+0x1d4>)
  40065a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40065c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40065e:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400662:	47a0      	blx	r4
  400664:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400666:	20a8      	movs	r0, #168	; 0xa8
  400668:	4c24      	ldr	r4, [pc, #144]	; (4006fc <ssd1306_init+0x1d8>)
  40066a:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  40066c:	201f      	movs	r0, #31
  40066e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400670:	20d3      	movs	r0, #211	; 0xd3
  400672:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400674:	2000      	movs	r0, #0
  400676:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400678:	2040      	movs	r0, #64	; 0x40
  40067a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40067c:	20a1      	movs	r0, #161	; 0xa1
  40067e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400680:	20c8      	movs	r0, #200	; 0xc8
  400682:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400684:	20da      	movs	r0, #218	; 0xda
  400686:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400688:	4648      	mov	r0, r9
  40068a:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40068c:	2081      	movs	r0, #129	; 0x81
  40068e:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400690:	208f      	movs	r0, #143	; 0x8f
  400692:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400694:	20a4      	movs	r0, #164	; 0xa4
  400696:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400698:	20a6      	movs	r0, #166	; 0xa6
  40069a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40069c:	20d5      	movs	r0, #213	; 0xd5
  40069e:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4006a0:	4640      	mov	r0, r8
  4006a2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4006a4:	208d      	movs	r0, #141	; 0x8d
  4006a6:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4006a8:	2014      	movs	r0, #20
  4006aa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4006ac:	20db      	movs	r0, #219	; 0xdb
  4006ae:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4006b0:	2040      	movs	r0, #64	; 0x40
  4006b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4006b4:	20d9      	movs	r0, #217	; 0xd9
  4006b6:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4006b8:	20f1      	movs	r0, #241	; 0xf1
  4006ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4006bc:	20af      	movs	r0, #175	; 0xaf
  4006be:	47a0      	blx	r4
  4006c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006c4:	400e1200 	.word	0x400e1200
  4006c8:	400e1000 	.word	0x400e1000
  4006cc:	004024d9 	.word	0x004024d9
  4006d0:	40008000 	.word	0x40008000
  4006d4:	004028f3 	.word	0x004028f3
  4006d8:	004028b7 	.word	0x004028b7
  4006dc:	004028d5 	.word	0x004028d5
  4006e0:	00402939 	.word	0x00402939
  4006e4:	08f0d180 	.word	0x08f0d180
  4006e8:	000f4240 	.word	0x000f4240
  4006ec:	0040294d 	.word	0x0040294d
  4006f0:	00402963 	.word	0x00402963
  4006f4:	00402841 	.word	0x00402841
  4006f8:	20400001 	.word	0x20400001
  4006fc:	004004e5 	.word	0x004004e5
  400700:	400e1400 	.word	0x400e1400

00400704 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400704:	b538      	push	{r3, r4, r5, lr}
  400706:	4605      	mov	r5, r0
  400708:	2208      	movs	r2, #8
  40070a:	4b09      	ldr	r3, [pc, #36]	; (400730 <ssd1306_write_data+0x2c>)
  40070c:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40070e:	4c09      	ldr	r4, [pc, #36]	; (400734 <ssd1306_write_data+0x30>)
  400710:	2101      	movs	r1, #1
  400712:	4620      	mov	r0, r4
  400714:	4b08      	ldr	r3, [pc, #32]	; (400738 <ssd1306_write_data+0x34>)
  400716:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400718:	2301      	movs	r3, #1
  40071a:	461a      	mov	r2, r3
  40071c:	4629      	mov	r1, r5
  40071e:	4620      	mov	r0, r4
  400720:	4c06      	ldr	r4, [pc, #24]	; (40073c <ssd1306_write_data+0x38>)
  400722:	47a0      	blx	r4
	delay_us(10);
  400724:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400728:	4b05      	ldr	r3, [pc, #20]	; (400740 <ssd1306_write_data+0x3c>)
  40072a:	4798      	blx	r3
  40072c:	bd38      	pop	{r3, r4, r5, pc}
  40072e:	bf00      	nop
  400730:	400e1000 	.word	0x400e1000
  400734:	40008000 	.word	0x40008000
  400738:	0040286d 	.word	0x0040286d
  40073c:	00402883 	.word	0x00402883
  400740:	20400001 	.word	0x20400001

00400744 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400744:	f100 0308 	add.w	r3, r0, #8
  400748:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40074a:	f04f 32ff 	mov.w	r2, #4294967295
  40074e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400750:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400752:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400754:	2300      	movs	r3, #0
  400756:	6003      	str	r3, [r0, #0]
  400758:	4770      	bx	lr

0040075a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40075a:	2300      	movs	r3, #0
  40075c:	6103      	str	r3, [r0, #16]
  40075e:	4770      	bx	lr

00400760 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400760:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400762:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400764:	689a      	ldr	r2, [r3, #8]
  400766:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400768:	689a      	ldr	r2, [r3, #8]
  40076a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40076c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40076e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400770:	6803      	ldr	r3, [r0, #0]
  400772:	3301      	adds	r3, #1
  400774:	6003      	str	r3, [r0, #0]
  400776:	4770      	bx	lr

00400778 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400778:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40077a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40077c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400780:	d002      	beq.n	400788 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400782:	f100 0208 	add.w	r2, r0, #8
  400786:	e002      	b.n	40078e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400788:	6902      	ldr	r2, [r0, #16]
  40078a:	e004      	b.n	400796 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40078c:	461a      	mov	r2, r3
  40078e:	6853      	ldr	r3, [r2, #4]
  400790:	681c      	ldr	r4, [r3, #0]
  400792:	42a5      	cmp	r5, r4
  400794:	d2fa      	bcs.n	40078c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400796:	6853      	ldr	r3, [r2, #4]
  400798:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40079a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40079c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40079e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4007a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4007a2:	6803      	ldr	r3, [r0, #0]
  4007a4:	3301      	adds	r3, #1
  4007a6:	6003      	str	r3, [r0, #0]
}
  4007a8:	bc30      	pop	{r4, r5}
  4007aa:	4770      	bx	lr

004007ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4007ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4007ae:	6842      	ldr	r2, [r0, #4]
  4007b0:	6881      	ldr	r1, [r0, #8]
  4007b2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4007b4:	6882      	ldr	r2, [r0, #8]
  4007b6:	6841      	ldr	r1, [r0, #4]
  4007b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4007ba:	685a      	ldr	r2, [r3, #4]
  4007bc:	4290      	cmp	r0, r2
  4007be:	d005      	beq.n	4007cc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4007c0:	2200      	movs	r2, #0
  4007c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4007c4:	6818      	ldr	r0, [r3, #0]
  4007c6:	3801      	subs	r0, #1
  4007c8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4007ca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4007cc:	6882      	ldr	r2, [r0, #8]
  4007ce:	605a      	str	r2, [r3, #4]
  4007d0:	e7f6      	b.n	4007c0 <uxListRemove+0x14>

004007d2 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4007d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007d6:	b672      	cpsid	i
  4007d8:	f383 8811 	msr	BASEPRI, r3
  4007dc:	f3bf 8f6f 	isb	sy
  4007e0:	f3bf 8f4f 	dsb	sy
  4007e4:	b662      	cpsie	i
  4007e6:	e7fe      	b.n	4007e6 <prvTaskExitError+0x14>

004007e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4007e8:	4806      	ldr	r0, [pc, #24]	; (400804 <prvPortStartFirstTask+0x1c>)
  4007ea:	6800      	ldr	r0, [r0, #0]
  4007ec:	6800      	ldr	r0, [r0, #0]
  4007ee:	f380 8808 	msr	MSP, r0
  4007f2:	b662      	cpsie	i
  4007f4:	b661      	cpsie	f
  4007f6:	f3bf 8f4f 	dsb	sy
  4007fa:	f3bf 8f6f 	isb	sy
  4007fe:	df00      	svc	0
  400800:	bf00      	nop
  400802:	0000      	.short	0x0000
  400804:	e000ed08 	.word	0xe000ed08

00400808 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400808:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400818 <vPortEnableVFP+0x10>
  40080c:	6801      	ldr	r1, [r0, #0]
  40080e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400812:	6001      	str	r1, [r0, #0]
  400814:	4770      	bx	lr
  400816:	0000      	.short	0x0000
  400818:	e000ed88 	.word	0xe000ed88

0040081c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40081c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400820:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400824:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400828:	4b05      	ldr	r3, [pc, #20]	; (400840 <pxPortInitialiseStack+0x24>)
  40082a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40082e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400832:	f06f 0302 	mvn.w	r3, #2
  400836:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40083a:	3844      	subs	r0, #68	; 0x44
  40083c:	4770      	bx	lr
  40083e:	bf00      	nop
  400840:	004007d3 	.word	0x004007d3

00400844 <SVC_Handler>:
	__asm volatile (
  400844:	4b06      	ldr	r3, [pc, #24]	; (400860 <pxCurrentTCBConst2>)
  400846:	6819      	ldr	r1, [r3, #0]
  400848:	6808      	ldr	r0, [r1, #0]
  40084a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40084e:	f380 8809 	msr	PSP, r0
  400852:	f3bf 8f6f 	isb	sy
  400856:	f04f 0000 	mov.w	r0, #0
  40085a:	f380 8811 	msr	BASEPRI, r0
  40085e:	4770      	bx	lr

00400860 <pxCurrentTCBConst2>:
  400860:	2040c3f8 	.word	0x2040c3f8
  400864:	4770      	bx	lr
  400866:	bf00      	nop

00400868 <vPortEnterCritical>:
  400868:	f04f 0380 	mov.w	r3, #128	; 0x80
  40086c:	b672      	cpsid	i
  40086e:	f383 8811 	msr	BASEPRI, r3
  400872:	f3bf 8f6f 	isb	sy
  400876:	f3bf 8f4f 	dsb	sy
  40087a:	b662      	cpsie	i
	uxCriticalNesting++;
  40087c:	4a02      	ldr	r2, [pc, #8]	; (400888 <vPortEnterCritical+0x20>)
  40087e:	6813      	ldr	r3, [r2, #0]
  400880:	3301      	adds	r3, #1
  400882:	6013      	str	r3, [r2, #0]
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	20400018 	.word	0x20400018

0040088c <vPortExitCritical>:
	uxCriticalNesting--;
  40088c:	4a03      	ldr	r2, [pc, #12]	; (40089c <vPortExitCritical+0x10>)
  40088e:	6813      	ldr	r3, [r2, #0]
  400890:	3b01      	subs	r3, #1
  400892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400894:	b90b      	cbnz	r3, 40089a <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400896:	f383 8811 	msr	BASEPRI, r3
  40089a:	4770      	bx	lr
  40089c:	20400018 	.word	0x20400018

004008a0 <PendSV_Handler>:
	__asm volatile
  4008a0:	f3ef 8009 	mrs	r0, PSP
  4008a4:	f3bf 8f6f 	isb	sy
  4008a8:	4b15      	ldr	r3, [pc, #84]	; (400900 <pxCurrentTCBConst>)
  4008aa:	681a      	ldr	r2, [r3, #0]
  4008ac:	f01e 0f10 	tst.w	lr, #16
  4008b0:	bf08      	it	eq
  4008b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4008b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008ba:	6010      	str	r0, [r2, #0]
  4008bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4008c0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4008c4:	b672      	cpsid	i
  4008c6:	f380 8811 	msr	BASEPRI, r0
  4008ca:	f3bf 8f4f 	dsb	sy
  4008ce:	f3bf 8f6f 	isb	sy
  4008d2:	b662      	cpsie	i
  4008d4:	f000 ff46 	bl	401764 <vTaskSwitchContext>
  4008d8:	f04f 0000 	mov.w	r0, #0
  4008dc:	f380 8811 	msr	BASEPRI, r0
  4008e0:	bc08      	pop	{r3}
  4008e2:	6819      	ldr	r1, [r3, #0]
  4008e4:	6808      	ldr	r0, [r1, #0]
  4008e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008ea:	f01e 0f10 	tst.w	lr, #16
  4008ee:	bf08      	it	eq
  4008f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4008f4:	f380 8809 	msr	PSP, r0
  4008f8:	f3bf 8f6f 	isb	sy
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop

00400900 <pxCurrentTCBConst>:
  400900:	2040c3f8 	.word	0x2040c3f8
  400904:	4770      	bx	lr
  400906:	bf00      	nop

00400908 <SysTick_Handler>:
{
  400908:	b508      	push	{r3, lr}
	__asm volatile
  40090a:	f3ef 8311 	mrs	r3, BASEPRI
  40090e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400912:	b672      	cpsid	i
  400914:	f382 8811 	msr	BASEPRI, r2
  400918:	f3bf 8f6f 	isb	sy
  40091c:	f3bf 8f4f 	dsb	sy
  400920:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400922:	4b05      	ldr	r3, [pc, #20]	; (400938 <SysTick_Handler+0x30>)
  400924:	4798      	blx	r3
  400926:	b118      	cbz	r0, 400930 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <SysTick_Handler+0x34>)
  40092e:	601a      	str	r2, [r3, #0]
	__asm volatile
  400930:	2300      	movs	r3, #0
  400932:	f383 8811 	msr	BASEPRI, r3
  400936:	bd08      	pop	{r3, pc}
  400938:	00401425 	.word	0x00401425
  40093c:	e000ed04 	.word	0xe000ed04

00400940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400940:	4a03      	ldr	r2, [pc, #12]	; (400950 <vPortSetupTimerInterrupt+0x10>)
  400942:	4b04      	ldr	r3, [pc, #16]	; (400954 <vPortSetupTimerInterrupt+0x14>)
  400944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400946:	2207      	movs	r2, #7
  400948:	3b04      	subs	r3, #4
  40094a:	601a      	str	r2, [r3, #0]
  40094c:	4770      	bx	lr
  40094e:	bf00      	nop
  400950:	000927bf 	.word	0x000927bf
  400954:	e000e014 	.word	0xe000e014

00400958 <xPortStartScheduler>:
{
  400958:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40095a:	4b0c      	ldr	r3, [pc, #48]	; (40098c <xPortStartScheduler+0x34>)
  40095c:	681a      	ldr	r2, [r3, #0]
  40095e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400962:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400964:	681a      	ldr	r2, [r3, #0]
  400966:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40096a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40096c:	4b08      	ldr	r3, [pc, #32]	; (400990 <xPortStartScheduler+0x38>)
  40096e:	4798      	blx	r3
	uxCriticalNesting = 0;
  400970:	2200      	movs	r2, #0
  400972:	4b08      	ldr	r3, [pc, #32]	; (400994 <xPortStartScheduler+0x3c>)
  400974:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400976:	4b08      	ldr	r3, [pc, #32]	; (400998 <xPortStartScheduler+0x40>)
  400978:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40097a:	4a08      	ldr	r2, [pc, #32]	; (40099c <xPortStartScheduler+0x44>)
  40097c:	6813      	ldr	r3, [r2, #0]
  40097e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400982:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400984:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <xPortStartScheduler+0x48>)
  400986:	4798      	blx	r3
	prvTaskExitError();
  400988:	4b06      	ldr	r3, [pc, #24]	; (4009a4 <xPortStartScheduler+0x4c>)
  40098a:	4798      	blx	r3
  40098c:	e000ed20 	.word	0xe000ed20
  400990:	00400941 	.word	0x00400941
  400994:	20400018 	.word	0x20400018
  400998:	00400809 	.word	0x00400809
  40099c:	e000ef34 	.word	0xe000ef34
  4009a0:	004007e9 	.word	0x004007e9
  4009a4:	004007d3 	.word	0x004007d3

004009a8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4009a8:	b538      	push	{r3, r4, r5, lr}
  4009aa:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4009ac:	f010 0f07 	tst.w	r0, #7
  4009b0:	d002      	beq.n	4009b8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4009b2:	f020 0407 	bic.w	r4, r0, #7
  4009b6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4009b8:	4b11      	ldr	r3, [pc, #68]	; (400a00 <pvPortMalloc+0x58>)
  4009ba:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4009bc:	4b11      	ldr	r3, [pc, #68]	; (400a04 <pvPortMalloc+0x5c>)
  4009be:	681b      	ldr	r3, [r3, #0]
  4009c0:	b193      	cbz	r3, 4009e8 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4009c2:	4b11      	ldr	r3, [pc, #68]	; (400a08 <pvPortMalloc+0x60>)
  4009c4:	681b      	ldr	r3, [r3, #0]
  4009c6:	441c      	add	r4, r3
  4009c8:	42a3      	cmp	r3, r4
  4009ca:	d213      	bcs.n	4009f4 <pvPortMalloc+0x4c>
  4009cc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4009d0:	4294      	cmp	r4, r2
  4009d2:	d80f      	bhi.n	4009f4 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4009d4:	4a0b      	ldr	r2, [pc, #44]	; (400a04 <pvPortMalloc+0x5c>)
  4009d6:	6815      	ldr	r5, [r2, #0]
  4009d8:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4009da:	4b0b      	ldr	r3, [pc, #44]	; (400a08 <pvPortMalloc+0x60>)
  4009dc:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4009de:	4b0b      	ldr	r3, [pc, #44]	; (400a0c <pvPortMalloc+0x64>)
  4009e0:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4009e2:	b14d      	cbz	r5, 4009f8 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4009e4:	4628      	mov	r0, r5
  4009e6:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4009e8:	4b09      	ldr	r3, [pc, #36]	; (400a10 <pvPortMalloc+0x68>)
  4009ea:	f023 0307 	bic.w	r3, r3, #7
  4009ee:	4a05      	ldr	r2, [pc, #20]	; (400a04 <pvPortMalloc+0x5c>)
  4009f0:	6013      	str	r3, [r2, #0]
  4009f2:	e7e6      	b.n	4009c2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4009f4:	4b05      	ldr	r3, [pc, #20]	; (400a0c <pvPortMalloc+0x64>)
  4009f6:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4009f8:	4b06      	ldr	r3, [pc, #24]	; (400a14 <pvPortMalloc+0x6c>)
  4009fa:	4798      	blx	r3
  4009fc:	2500      	movs	r5, #0
	return pvReturn;
  4009fe:	e7f1      	b.n	4009e4 <pvPortMalloc+0x3c>
  400a00:	00401409 	.word	0x00401409
  400a04:	20400bf0 	.word	0x20400bf0
  400a08:	2040c3f4 	.word	0x2040c3f4
  400a0c:	0040155d 	.word	0x0040155d
  400a10:	20400bfc 	.word	0x20400bfc
  400a14:	00402fe7 	.word	0x00402fe7

00400a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400a18:	4770      	bx	lr
	...

00400a1c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400a1c:	b538      	push	{r3, r4, r5, lr}
  400a1e:	4604      	mov	r4, r0
  400a20:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400a22:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a24:	b962      	cbnz	r2, 400a40 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400a26:	6803      	ldr	r3, [r0, #0]
  400a28:	b123      	cbz	r3, 400a34 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400a2a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a2e:	3301      	adds	r3, #1
  400a30:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400a32:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400a34:	6840      	ldr	r0, [r0, #4]
  400a36:	4b18      	ldr	r3, [pc, #96]	; (400a98 <prvCopyDataToQueue+0x7c>)
  400a38:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400a3a:	2300      	movs	r3, #0
  400a3c:	6063      	str	r3, [r4, #4]
  400a3e:	e7f5      	b.n	400a2c <prvCopyDataToQueue+0x10>
	else if( xPosition == queueSEND_TO_BACK )
  400a40:	b96d      	cbnz	r5, 400a5e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400a42:	6880      	ldr	r0, [r0, #8]
  400a44:	4b15      	ldr	r3, [pc, #84]	; (400a9c <prvCopyDataToQueue+0x80>)
  400a46:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400a48:	68a3      	ldr	r3, [r4, #8]
  400a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a4c:	4413      	add	r3, r2
  400a4e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a50:	6862      	ldr	r2, [r4, #4]
  400a52:	4293      	cmp	r3, r2
  400a54:	d31c      	bcc.n	400a90 <prvCopyDataToQueue+0x74>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400a56:	6823      	ldr	r3, [r4, #0]
  400a58:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400a5a:	2000      	movs	r0, #0
  400a5c:	e7e6      	b.n	400a2c <prvCopyDataToQueue+0x10>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400a5e:	68c0      	ldr	r0, [r0, #12]
  400a60:	4b0e      	ldr	r3, [pc, #56]	; (400a9c <prvCopyDataToQueue+0x80>)
  400a62:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400a64:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a66:	4252      	negs	r2, r2
  400a68:	68e3      	ldr	r3, [r4, #12]
  400a6a:	4413      	add	r3, r2
  400a6c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a6e:	6821      	ldr	r1, [r4, #0]
  400a70:	428b      	cmp	r3, r1
  400a72:	d202      	bcs.n	400a7a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400a74:	6863      	ldr	r3, [r4, #4]
  400a76:	441a      	add	r2, r3
  400a78:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400a7a:	2d02      	cmp	r5, #2
  400a7c:	d001      	beq.n	400a82 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  400a7e:	2000      	movs	r0, #0
  400a80:	e7d4      	b.n	400a2c <prvCopyDataToQueue+0x10>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a84:	b133      	cbz	r3, 400a94 <prvCopyDataToQueue+0x78>
				--( pxQueue->uxMessagesWaiting );
  400a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a88:	3b01      	subs	r3, #1
  400a8a:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400a8c:	2000      	movs	r0, #0
  400a8e:	e7cd      	b.n	400a2c <prvCopyDataToQueue+0x10>
  400a90:	2000      	movs	r0, #0
  400a92:	e7cb      	b.n	400a2c <prvCopyDataToQueue+0x10>
  400a94:	2000      	movs	r0, #0
  400a96:	e7c9      	b.n	400a2c <prvCopyDataToQueue+0x10>
  400a98:	00401ab5 	.word	0x00401ab5
  400a9c:	004034d5 	.word	0x004034d5

00400aa0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400aa0:	b530      	push	{r4, r5, lr}
  400aa2:	b083      	sub	sp, #12
  400aa4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400aa6:	6d44      	ldr	r4, [r0, #84]	; 0x54
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400aa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400aac:	429a      	cmp	r2, r3
  400aae:	d303      	bcc.n	400ab8 <prvNotifyQueueSetContainer+0x18>
	BaseType_t xReturn = pdFALSE;
  400ab0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400ab2:	4628      	mov	r0, r5
  400ab4:	b003      	add	sp, #12
  400ab6:	bd30      	pop	{r4, r5, pc}
  400ab8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400aba:	a901      	add	r1, sp, #4
  400abc:	4620      	mov	r0, r4
  400abe:	4b0b      	ldr	r3, [pc, #44]	; (400aec <prvNotifyQueueSetContainer+0x4c>)
  400ac0:	4798      	blx	r3
  400ac2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400ac4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aca:	d003      	beq.n	400ad4 <prvNotifyQueueSetContainer+0x34>
				( pxQueueSetContainer->xTxLock )++;
  400acc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ace:	3301      	adds	r3, #1
  400ad0:	64a3      	str	r3, [r4, #72]	; 0x48
  400ad2:	e7ee      	b.n	400ab2 <prvNotifyQueueSetContainer+0x12>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ad6:	2b00      	cmp	r3, #0
  400ad8:	d0eb      	beq.n	400ab2 <prvNotifyQueueSetContainer+0x12>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400ada:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ade:	4b04      	ldr	r3, [pc, #16]	; (400af0 <prvNotifyQueueSetContainer+0x50>)
  400ae0:	4798      	blx	r3
  400ae2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400ae4:	bf18      	it	ne
  400ae6:	2501      	movne	r5, #1
  400ae8:	e7e3      	b.n	400ab2 <prvNotifyQueueSetContainer+0x12>
  400aea:	bf00      	nop
  400aec:	00400a1d 	.word	0x00400a1d
  400af0:	004018e9 	.word	0x004018e9

00400af4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400af4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400af6:	b172      	cbz	r2, 400b16 <prvCopyDataFromQueue+0x22>
{
  400af8:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400afa:	68c3      	ldr	r3, [r0, #12]
  400afc:	4413      	add	r3, r2
  400afe:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400b00:	6844      	ldr	r4, [r0, #4]
  400b02:	42a3      	cmp	r3, r4
  400b04:	d301      	bcc.n	400b0a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400b06:	6803      	ldr	r3, [r0, #0]
  400b08:	60c3      	str	r3, [r0, #12]
  400b0a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400b0c:	68c1      	ldr	r1, [r0, #12]
  400b0e:	4620      	mov	r0, r4
  400b10:	4b01      	ldr	r3, [pc, #4]	; (400b18 <prvCopyDataFromQueue+0x24>)
  400b12:	4798      	blx	r3
  400b14:	bd10      	pop	{r4, pc}
  400b16:	4770      	bx	lr
  400b18:	004034d5 	.word	0x004034d5

00400b1c <prvUnlockQueue>:
{
  400b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400b20:	4b22      	ldr	r3, [pc, #136]	; (400bac <prvUnlockQueue+0x90>)
  400b22:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400b24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b26:	2b00      	cmp	r3, #0
  400b28:	dd1b      	ble.n	400b62 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400b2a:	4d21      	ldr	r5, [pc, #132]	; (400bb0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400b2c:	4f21      	ldr	r7, [pc, #132]	; (400bb4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b2e:	4e22      	ldr	r6, [pc, #136]	; (400bb8 <prvUnlockQueue+0x9c>)
  400b30:	e00b      	b.n	400b4a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b34:	b1ab      	cbz	r3, 400b62 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b36:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b3a:	47b0      	blx	r6
  400b3c:	b978      	cbnz	r0, 400b5e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400b3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b40:	3b01      	subs	r3, #1
  400b42:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400b44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b46:	2b00      	cmp	r3, #0
  400b48:	dd0b      	ble.n	400b62 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400b4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d0f0      	beq.n	400b32 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400b50:	2100      	movs	r1, #0
  400b52:	4620      	mov	r0, r4
  400b54:	47a8      	blx	r5
  400b56:	2801      	cmp	r0, #1
  400b58:	d1f1      	bne.n	400b3e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400b5a:	47b8      	blx	r7
  400b5c:	e7ef      	b.n	400b3e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400b5e:	47b8      	blx	r7
  400b60:	e7ed      	b.n	400b3e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400b62:	f04f 33ff 	mov.w	r3, #4294967295
  400b66:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400b68:	4b14      	ldr	r3, [pc, #80]	; (400bbc <prvUnlockQueue+0xa0>)
  400b6a:	4798      	blx	r3
	taskENTER_CRITICAL();
  400b6c:	4b0f      	ldr	r3, [pc, #60]	; (400bac <prvUnlockQueue+0x90>)
  400b6e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b70:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b72:	2b00      	cmp	r3, #0
  400b74:	dd14      	ble.n	400ba0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b76:	6923      	ldr	r3, [r4, #16]
  400b78:	b193      	cbz	r3, 400ba0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b7a:	f104 0610 	add.w	r6, r4, #16
  400b7e:	4d0e      	ldr	r5, [pc, #56]	; (400bb8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400b80:	4f0c      	ldr	r7, [pc, #48]	; (400bb4 <prvUnlockQueue+0x98>)
  400b82:	e007      	b.n	400b94 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400b84:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b86:	3b01      	subs	r3, #1
  400b88:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b8c:	2b00      	cmp	r3, #0
  400b8e:	dd07      	ble.n	400ba0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b90:	6923      	ldr	r3, [r4, #16]
  400b92:	b12b      	cbz	r3, 400ba0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b94:	4630      	mov	r0, r6
  400b96:	47a8      	blx	r5
  400b98:	2800      	cmp	r0, #0
  400b9a:	d0f3      	beq.n	400b84 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400b9c:	47b8      	blx	r7
  400b9e:	e7f1      	b.n	400b84 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400ba0:	f04f 33ff 	mov.w	r3, #4294967295
  400ba4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400ba6:	4b05      	ldr	r3, [pc, #20]	; (400bbc <prvUnlockQueue+0xa0>)
  400ba8:	4798      	blx	r3
  400baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bac:	00400869 	.word	0x00400869
  400bb0:	00400aa1 	.word	0x00400aa1
  400bb4:	004019e5 	.word	0x004019e5
  400bb8:	004018e9 	.word	0x004018e9
  400bbc:	0040088d 	.word	0x0040088d

00400bc0 <xQueueGenericReset>:
{
  400bc0:	b538      	push	{r3, r4, r5, lr}
  400bc2:	4604      	mov	r4, r0
  400bc4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400bc6:	4b18      	ldr	r3, [pc, #96]	; (400c28 <xQueueGenericReset+0x68>)
  400bc8:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400bca:	6822      	ldr	r2, [r4, #0]
  400bcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400bce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400bd0:	fb03 f301 	mul.w	r3, r3, r1
  400bd4:	18d0      	adds	r0, r2, r3
  400bd6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400bd8:	2000      	movs	r0, #0
  400bda:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400bdc:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400bde:	1a5b      	subs	r3, r3, r1
  400be0:	4413      	add	r3, r2
  400be2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400be4:	f04f 33ff 	mov.w	r3, #4294967295
  400be8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400bea:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400bec:	b9a5      	cbnz	r5, 400c18 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400bee:	6923      	ldr	r3, [r4, #16]
  400bf0:	b91b      	cbnz	r3, 400bfa <xQueueGenericReset+0x3a>
	taskEXIT_CRITICAL();
  400bf2:	4b0e      	ldr	r3, [pc, #56]	; (400c2c <xQueueGenericReset+0x6c>)
  400bf4:	4798      	blx	r3
}
  400bf6:	2001      	movs	r0, #1
  400bf8:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400bfa:	f104 0010 	add.w	r0, r4, #16
  400bfe:	4b0c      	ldr	r3, [pc, #48]	; (400c30 <xQueueGenericReset+0x70>)
  400c00:	4798      	blx	r3
  400c02:	2801      	cmp	r0, #1
  400c04:	d1f5      	bne.n	400bf2 <xQueueGenericReset+0x32>
					queueYIELD_IF_USING_PREEMPTION();
  400c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c0a:	4b0a      	ldr	r3, [pc, #40]	; (400c34 <xQueueGenericReset+0x74>)
  400c0c:	601a      	str	r2, [r3, #0]
  400c0e:	f3bf 8f4f 	dsb	sy
  400c12:	f3bf 8f6f 	isb	sy
  400c16:	e7ec      	b.n	400bf2 <xQueueGenericReset+0x32>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400c18:	f104 0010 	add.w	r0, r4, #16
  400c1c:	4d06      	ldr	r5, [pc, #24]	; (400c38 <xQueueGenericReset+0x78>)
  400c1e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400c20:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c24:	47a8      	blx	r5
  400c26:	e7e4      	b.n	400bf2 <xQueueGenericReset+0x32>
  400c28:	00400869 	.word	0x00400869
  400c2c:	0040088d 	.word	0x0040088d
  400c30:	004018e9 	.word	0x004018e9
  400c34:	e000ed04 	.word	0xe000ed04
  400c38:	00400745 	.word	0x00400745

00400c3c <xQueueGenericCreate>:
{
  400c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c3e:	4605      	mov	r5, r0
  400c40:	4617      	mov	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
  400c42:	460e      	mov	r6, r1
  400c44:	b159      	cbz	r1, 400c5e <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400c46:	fb00 f001 	mul.w	r0, r0, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c4a:	3059      	adds	r0, #89	; 0x59
  400c4c:	4b0d      	ldr	r3, [pc, #52]	; (400c84 <xQueueGenericCreate+0x48>)
  400c4e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c50:	4604      	mov	r4, r0
  400c52:	b118      	cbz	r0, 400c5c <xQueueGenericCreate+0x20>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c54:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c58:	6003      	str	r3, [r0, #0]
  400c5a:	e006      	b.n	400c6a <xQueueGenericCreate+0x2e>
  400c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c5e:	2058      	movs	r0, #88	; 0x58
  400c60:	4b08      	ldr	r3, [pc, #32]	; (400c84 <xQueueGenericCreate+0x48>)
  400c62:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c64:	4604      	mov	r4, r0
  400c66:	b160      	cbz	r0, 400c82 <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c68:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400c6a:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c6c:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c6e:	2101      	movs	r1, #1
  400c70:	4620      	mov	r0, r4
  400c72:	4b05      	ldr	r3, [pc, #20]	; (400c88 <xQueueGenericCreate+0x4c>)
  400c74:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400c76:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400c7a:	2300      	movs	r3, #0
  400c7c:	6563      	str	r3, [r4, #84]	; 0x54
  400c7e:	4620      	mov	r0, r4
	return xReturn;
  400c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
  400c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c84:	004009a9 	.word	0x004009a9
  400c88:	00400bc1 	.word	0x00400bc1

00400c8c <xQueueGenericSend>:
{
  400c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c90:	b085      	sub	sp, #20
  400c92:	4604      	mov	r4, r0
  400c94:	468a      	mov	sl, r1
  400c96:	9201      	str	r2, [sp, #4]
  400c98:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  400c9a:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400c9c:	4d4a      	ldr	r5, [pc, #296]	; (400dc8 <xQueueGenericSend+0x13c>)
					vTaskSetTimeOutState( &xTimeOut );
  400c9e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 400df4 <xQueueGenericSend+0x168>
					portYIELD_WITHIN_API();
  400ca2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 400dd8 <xQueueGenericSend+0x14c>
  400ca6:	e04a      	b.n	400d3e <xQueueGenericSend+0xb2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ca8:	463a      	mov	r2, r7
  400caa:	4651      	mov	r1, sl
  400cac:	4620      	mov	r0, r4
  400cae:	4b47      	ldr	r3, [pc, #284]	; (400dcc <xQueueGenericSend+0x140>)
  400cb0:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400cb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400cb4:	b1a3      	cbz	r3, 400ce0 <xQueueGenericSend+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400cb6:	4639      	mov	r1, r7
  400cb8:	4620      	mov	r0, r4
  400cba:	4b45      	ldr	r3, [pc, #276]	; (400dd0 <xQueueGenericSend+0x144>)
  400cbc:	4798      	blx	r3
  400cbe:	2801      	cmp	r0, #1
  400cc0:	d005      	beq.n	400cce <xQueueGenericSend+0x42>
				taskEXIT_CRITICAL();
  400cc2:	4b44      	ldr	r3, [pc, #272]	; (400dd4 <xQueueGenericSend+0x148>)
  400cc4:	4798      	blx	r3
				return pdPASS;
  400cc6:	2001      	movs	r0, #1
}
  400cc8:	b005      	add	sp, #20
  400cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							queueYIELD_IF_USING_PREEMPTION();
  400cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cd2:	4b41      	ldr	r3, [pc, #260]	; (400dd8 <xQueueGenericSend+0x14c>)
  400cd4:	601a      	str	r2, [r3, #0]
  400cd6:	f3bf 8f4f 	dsb	sy
  400cda:	f3bf 8f6f 	isb	sy
  400cde:	e7f0      	b.n	400cc2 <xQueueGenericSend+0x36>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ce2:	b953      	cbnz	r3, 400cfa <xQueueGenericSend+0x6e>
						else if( xYieldRequired != pdFALSE )
  400ce4:	2800      	cmp	r0, #0
  400ce6:	d0ec      	beq.n	400cc2 <xQueueGenericSend+0x36>
							queueYIELD_IF_USING_PREEMPTION();
  400ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cec:	4b3a      	ldr	r3, [pc, #232]	; (400dd8 <xQueueGenericSend+0x14c>)
  400cee:	601a      	str	r2, [r3, #0]
  400cf0:	f3bf 8f4f 	dsb	sy
  400cf4:	f3bf 8f6f 	isb	sy
  400cf8:	e7e3      	b.n	400cc2 <xQueueGenericSend+0x36>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400cfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cfe:	4b37      	ldr	r3, [pc, #220]	; (400ddc <xQueueGenericSend+0x150>)
  400d00:	4798      	blx	r3
  400d02:	2801      	cmp	r0, #1
  400d04:	d1dd      	bne.n	400cc2 <xQueueGenericSend+0x36>
								queueYIELD_IF_USING_PREEMPTION();
  400d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d0a:	4b33      	ldr	r3, [pc, #204]	; (400dd8 <xQueueGenericSend+0x14c>)
  400d0c:	601a      	str	r2, [r3, #0]
  400d0e:	f3bf 8f4f 	dsb	sy
  400d12:	f3bf 8f6f 	isb	sy
  400d16:	e7d4      	b.n	400cc2 <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
  400d18:	4b2e      	ldr	r3, [pc, #184]	; (400dd4 <xQueueGenericSend+0x148>)
  400d1a:	4798      	blx	r3
					return errQUEUE_FULL;
  400d1c:	2000      	movs	r0, #0
  400d1e:	e7d3      	b.n	400cc8 <xQueueGenericSend+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
  400d20:	a802      	add	r0, sp, #8
  400d22:	47c0      	blx	r8
  400d24:	e017      	b.n	400d56 <xQueueGenericSend+0xca>
		prvLockQueue( pxQueue );
  400d26:	2300      	movs	r3, #0
  400d28:	6463      	str	r3, [r4, #68]	; 0x44
  400d2a:	e01d      	b.n	400d68 <xQueueGenericSend+0xdc>
  400d2c:	2300      	movs	r3, #0
  400d2e:	64a3      	str	r3, [r4, #72]	; 0x48
  400d30:	e01e      	b.n	400d70 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
  400d32:	4620      	mov	r0, r4
  400d34:	4b2a      	ldr	r3, [pc, #168]	; (400de0 <xQueueGenericSend+0x154>)
  400d36:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d38:	4b2a      	ldr	r3, [pc, #168]	; (400de4 <xQueueGenericSend+0x158>)
  400d3a:	4798      	blx	r3
  400d3c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400d3e:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d44:	429a      	cmp	r2, r3
  400d46:	d3af      	bcc.n	400ca8 <xQueueGenericSend+0x1c>
  400d48:	2f02      	cmp	r7, #2
  400d4a:	d0ad      	beq.n	400ca8 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d4c:	9b01      	ldr	r3, [sp, #4]
  400d4e:	2b00      	cmp	r3, #0
  400d50:	d0e2      	beq.n	400d18 <xQueueGenericSend+0x8c>
				else if( xEntryTimeSet == pdFALSE )
  400d52:	2e00      	cmp	r6, #0
  400d54:	d0e4      	beq.n	400d20 <xQueueGenericSend+0x94>
		taskEXIT_CRITICAL();
  400d56:	4b1f      	ldr	r3, [pc, #124]	; (400dd4 <xQueueGenericSend+0x148>)
  400d58:	4798      	blx	r3
		vTaskSuspendAll();
  400d5a:	4b23      	ldr	r3, [pc, #140]	; (400de8 <xQueueGenericSend+0x15c>)
  400d5c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d5e:	47a8      	blx	r5
  400d60:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d62:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d66:	d0de      	beq.n	400d26 <xQueueGenericSend+0x9a>
  400d68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d6e:	d0dd      	beq.n	400d2c <xQueueGenericSend+0xa0>
  400d70:	4b18      	ldr	r3, [pc, #96]	; (400dd4 <xQueueGenericSend+0x148>)
  400d72:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d74:	a901      	add	r1, sp, #4
  400d76:	a802      	add	r0, sp, #8
  400d78:	4b1c      	ldr	r3, [pc, #112]	; (400dec <xQueueGenericSend+0x160>)
  400d7a:	4798      	blx	r3
  400d7c:	b9e0      	cbnz	r0, 400db8 <xQueueGenericSend+0x12c>
	taskENTER_CRITICAL();
  400d7e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400d80:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400d84:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400d86:	4b13      	ldr	r3, [pc, #76]	; (400dd4 <xQueueGenericSend+0x148>)
  400d88:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400d8a:	45b3      	cmp	fp, r6
  400d8c:	d1d1      	bne.n	400d32 <xQueueGenericSend+0xa6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400d8e:	9901      	ldr	r1, [sp, #4]
  400d90:	f104 0010 	add.w	r0, r4, #16
  400d94:	4b16      	ldr	r3, [pc, #88]	; (400df0 <xQueueGenericSend+0x164>)
  400d96:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d98:	4620      	mov	r0, r4
  400d9a:	4b11      	ldr	r3, [pc, #68]	; (400de0 <xQueueGenericSend+0x154>)
  400d9c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d9e:	4b11      	ldr	r3, [pc, #68]	; (400de4 <xQueueGenericSend+0x158>)
  400da0:	4798      	blx	r3
  400da2:	2800      	cmp	r0, #0
  400da4:	d1ca      	bne.n	400d3c <xQueueGenericSend+0xb0>
					portYIELD_WITHIN_API();
  400da6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400daa:	f8c9 3000 	str.w	r3, [r9]
  400dae:	f3bf 8f4f 	dsb	sy
  400db2:	f3bf 8f6f 	isb	sy
  400db6:	e7c1      	b.n	400d3c <xQueueGenericSend+0xb0>
			prvUnlockQueue( pxQueue );
  400db8:	4620      	mov	r0, r4
  400dba:	4b09      	ldr	r3, [pc, #36]	; (400de0 <xQueueGenericSend+0x154>)
  400dbc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400dbe:	4b09      	ldr	r3, [pc, #36]	; (400de4 <xQueueGenericSend+0x158>)
  400dc0:	4798      	blx	r3
			return errQUEUE_FULL;
  400dc2:	2000      	movs	r0, #0
  400dc4:	e780      	b.n	400cc8 <xQueueGenericSend+0x3c>
  400dc6:	bf00      	nop
  400dc8:	00400869 	.word	0x00400869
  400dcc:	00400a1d 	.word	0x00400a1d
  400dd0:	00400aa1 	.word	0x00400aa1
  400dd4:	0040088d 	.word	0x0040088d
  400dd8:	e000ed04 	.word	0xe000ed04
  400ddc:	004018e9 	.word	0x004018e9
  400de0:	00400b1d 	.word	0x00400b1d
  400de4:	0040155d 	.word	0x0040155d
  400de8:	00401409 	.word	0x00401409
  400dec:	00401981 	.word	0x00401981
  400df0:	00401815 	.word	0x00401815
  400df4:	00401969 	.word	0x00401969

00400df8 <xQueueGenericSendFromISR>:
{
  400df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  400dfa:	f3ef 8711 	mrs	r7, BASEPRI
  400dfe:	f04f 0480 	mov.w	r4, #128	; 0x80
  400e02:	b672      	cpsid	i
  400e04:	f384 8811 	msr	BASEPRI, r4
  400e08:	f3bf 8f6f 	isb	sy
  400e0c:	f3bf 8f4f 	dsb	sy
  400e10:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e12:	6b85      	ldr	r5, [r0, #56]	; 0x38
  400e14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  400e16:	42a5      	cmp	r5, r4
  400e18:	d305      	bcc.n	400e26 <xQueueGenericSendFromISR+0x2e>
  400e1a:	2b02      	cmp	r3, #2
  400e1c:	d003      	beq.n	400e26 <xQueueGenericSendFromISR+0x2e>
			xReturn = errQUEUE_FULL;
  400e1e:	2000      	movs	r0, #0
	__asm volatile
  400e20:	f387 8811 	msr	BASEPRI, r7
}
  400e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e26:	461d      	mov	r5, r3
  400e28:	4616      	mov	r6, r2
  400e2a:	4604      	mov	r4, r0
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e2c:	461a      	mov	r2, r3
  400e2e:	4b13      	ldr	r3, [pc, #76]	; (400e7c <xQueueGenericSendFromISR+0x84>)
  400e30:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e34:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e38:	d004      	beq.n	400e44 <xQueueGenericSendFromISR+0x4c>
				++( pxQueue->xTxLock );
  400e3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e3c:	3301      	adds	r3, #1
  400e3e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400e40:	2001      	movs	r0, #1
  400e42:	e7ed      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
					if( pxQueue->pxQueueSetContainer != NULL )
  400e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e46:	b143      	cbz	r3, 400e5a <xQueueGenericSendFromISR+0x62>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400e48:	4629      	mov	r1, r5
  400e4a:	4620      	mov	r0, r4
  400e4c:	4b0c      	ldr	r3, [pc, #48]	; (400e80 <xQueueGenericSendFromISR+0x88>)
  400e4e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400e50:	b186      	cbz	r6, 400e74 <xQueueGenericSendFromISR+0x7c>
  400e52:	2801      	cmp	r0, #1
  400e54:	d10e      	bne.n	400e74 <xQueueGenericSendFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e56:	6030      	str	r0, [r6, #0]
  400e58:	e7e2      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e5c:	b90b      	cbnz	r3, 400e62 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400e5e:	2001      	movs	r0, #1
  400e60:	e7de      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e62:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e66:	4b07      	ldr	r3, [pc, #28]	; (400e84 <xQueueGenericSendFromISR+0x8c>)
  400e68:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400e6a:	b12e      	cbz	r6, 400e78 <xQueueGenericSendFromISR+0x80>
  400e6c:	b120      	cbz	r0, 400e78 <xQueueGenericSendFromISR+0x80>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400e6e:	2001      	movs	r0, #1
  400e70:	6030      	str	r0, [r6, #0]
  400e72:	e7d5      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
			xReturn = pdPASS;
  400e74:	2001      	movs	r0, #1
  400e76:	e7d3      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
  400e78:	2001      	movs	r0, #1
  400e7a:	e7d1      	b.n	400e20 <xQueueGenericSendFromISR+0x28>
  400e7c:	00400a1d 	.word	0x00400a1d
  400e80:	00400aa1 	.word	0x00400aa1
  400e84:	004018e9 	.word	0x004018e9

00400e88 <xQueueGiveFromISR>:
{
  400e88:	b538      	push	{r3, r4, r5, lr}
	__asm volatile
  400e8a:	f3ef 8411 	mrs	r4, BASEPRI
  400e8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e92:	b672      	cpsid	i
  400e94:	f383 8811 	msr	BASEPRI, r3
  400e98:	f3bf 8f6f 	isb	sy
  400e9c:	f3bf 8f4f 	dsb	sy
  400ea0:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400ea2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  400ea4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400ea6:	429a      	cmp	r2, r3
  400ea8:	d224      	bcs.n	400ef4 <xQueueGiveFromISR+0x6c>
			++( pxQueue->uxMessagesWaiting );
  400eaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400eac:	3301      	adds	r3, #1
  400eae:	6383      	str	r3, [r0, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  400eb0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  400eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400eb6:	d006      	beq.n	400ec6 <xQueueGiveFromISR+0x3e>
				++( pxQueue->xTxLock );
  400eb8:	6c83      	ldr	r3, [r0, #72]	; 0x48
  400eba:	3301      	adds	r3, #1
  400ebc:	6483      	str	r3, [r0, #72]	; 0x48
			xReturn = pdPASS;
  400ebe:	2001      	movs	r0, #1
	__asm volatile
  400ec0:	f384 8811 	msr	BASEPRI, r4
}
  400ec4:	bd38      	pop	{r3, r4, r5, pc}
  400ec6:	460d      	mov	r5, r1
					if( pxQueue->pxQueueSetContainer != NULL )
  400ec8:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400eca:	b13b      	cbz	r3, 400edc <xQueueGiveFromISR+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ecc:	2100      	movs	r1, #0
  400ece:	4b0c      	ldr	r3, [pc, #48]	; (400f00 <xQueueGiveFromISR+0x78>)
  400ed0:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400ed2:	b18d      	cbz	r5, 400ef8 <xQueueGiveFromISR+0x70>
  400ed4:	2801      	cmp	r0, #1
  400ed6:	d10f      	bne.n	400ef8 <xQueueGiveFromISR+0x70>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400ed8:	6028      	str	r0, [r5, #0]
  400eda:	e7f1      	b.n	400ec0 <xQueueGiveFromISR+0x38>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400edc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400ede:	b90b      	cbnz	r3, 400ee4 <xQueueGiveFromISR+0x5c>
			xReturn = pdPASS;
  400ee0:	2001      	movs	r0, #1
  400ee2:	e7ed      	b.n	400ec0 <xQueueGiveFromISR+0x38>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ee4:	3024      	adds	r0, #36	; 0x24
  400ee6:	4b07      	ldr	r3, [pc, #28]	; (400f04 <xQueueGiveFromISR+0x7c>)
  400ee8:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400eea:	b13d      	cbz	r5, 400efc <xQueueGiveFromISR+0x74>
  400eec:	b130      	cbz	r0, 400efc <xQueueGiveFromISR+0x74>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400eee:	2001      	movs	r0, #1
  400ef0:	6028      	str	r0, [r5, #0]
  400ef2:	e7e5      	b.n	400ec0 <xQueueGiveFromISR+0x38>
			xReturn = errQUEUE_FULL;
  400ef4:	2000      	movs	r0, #0
  400ef6:	e7e3      	b.n	400ec0 <xQueueGiveFromISR+0x38>
			xReturn = pdPASS;
  400ef8:	2001      	movs	r0, #1
  400efa:	e7e1      	b.n	400ec0 <xQueueGiveFromISR+0x38>
  400efc:	2001      	movs	r0, #1
  400efe:	e7df      	b.n	400ec0 <xQueueGiveFromISR+0x38>
  400f00:	00400aa1 	.word	0x00400aa1
  400f04:	004018e9 	.word	0x004018e9

00400f08 <xQueueGenericReceive>:
{
  400f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f0c:	b084      	sub	sp, #16
  400f0e:	4604      	mov	r4, r0
  400f10:	468a      	mov	sl, r1
  400f12:	9201      	str	r2, [sp, #4]
  400f14:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
  400f16:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400f18:	4d4d      	ldr	r5, [pc, #308]	; (401050 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  400f1a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 401080 <xQueueGenericReceive+0x178>
					portYIELD_WITHIN_API();
  400f1e:	4f4d      	ldr	r7, [pc, #308]	; (401054 <xQueueGenericReceive+0x14c>)
  400f20:	e054      	b.n	400fcc <xQueueGenericReceive+0xc4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400f22:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400f24:	4651      	mov	r1, sl
  400f26:	4620      	mov	r0, r4
  400f28:	4b4b      	ldr	r3, [pc, #300]	; (401058 <xQueueGenericReceive+0x150>)
  400f2a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400f2c:	f1b9 0f00 	cmp.w	r9, #0
  400f30:	d11f      	bne.n	400f72 <xQueueGenericReceive+0x6a>
					--( pxQueue->uxMessagesWaiting );
  400f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f34:	3b01      	subs	r3, #1
  400f36:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400f38:	6823      	ldr	r3, [r4, #0]
  400f3a:	b13b      	cbz	r3, 400f4c <xQueueGenericReceive+0x44>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f3c:	6923      	ldr	r3, [r4, #16]
  400f3e:	b94b      	cbnz	r3, 400f54 <xQueueGenericReceive+0x4c>
				taskEXIT_CRITICAL();
  400f40:	4b46      	ldr	r3, [pc, #280]	; (40105c <xQueueGenericReceive+0x154>)
  400f42:	4798      	blx	r3
				return pdPASS;
  400f44:	2001      	movs	r0, #1
}
  400f46:	b004      	add	sp, #16
  400f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400f4c:	4b44      	ldr	r3, [pc, #272]	; (401060 <xQueueGenericReceive+0x158>)
  400f4e:	4798      	blx	r3
  400f50:	6060      	str	r0, [r4, #4]
  400f52:	e7f3      	b.n	400f3c <xQueueGenericReceive+0x34>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400f54:	f104 0010 	add.w	r0, r4, #16
  400f58:	4b42      	ldr	r3, [pc, #264]	; (401064 <xQueueGenericReceive+0x15c>)
  400f5a:	4798      	blx	r3
  400f5c:	2801      	cmp	r0, #1
  400f5e:	d1ef      	bne.n	400f40 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f64:	4b3b      	ldr	r3, [pc, #236]	; (401054 <xQueueGenericReceive+0x14c>)
  400f66:	601a      	str	r2, [r3, #0]
  400f68:	f3bf 8f4f 	dsb	sy
  400f6c:	f3bf 8f6f 	isb	sy
  400f70:	e7e6      	b.n	400f40 <xQueueGenericReceive+0x38>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400f72:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f76:	2b00      	cmp	r3, #0
  400f78:	d0e2      	beq.n	400f40 <xQueueGenericReceive+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f7e:	4b39      	ldr	r3, [pc, #228]	; (401064 <xQueueGenericReceive+0x15c>)
  400f80:	4798      	blx	r3
  400f82:	2800      	cmp	r0, #0
  400f84:	d0dc      	beq.n	400f40 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f8a:	4b32      	ldr	r3, [pc, #200]	; (401054 <xQueueGenericReceive+0x14c>)
  400f8c:	601a      	str	r2, [r3, #0]
  400f8e:	f3bf 8f4f 	dsb	sy
  400f92:	f3bf 8f6f 	isb	sy
  400f96:	e7d3      	b.n	400f40 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
  400f98:	4b30      	ldr	r3, [pc, #192]	; (40105c <xQueueGenericReceive+0x154>)
  400f9a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400f9c:	2000      	movs	r0, #0
  400f9e:	e7d2      	b.n	400f46 <xQueueGenericReceive+0x3e>
					vTaskSetTimeOutState( &xTimeOut );
  400fa0:	a802      	add	r0, sp, #8
  400fa2:	47c0      	blx	r8
  400fa4:	e01b      	b.n	400fde <xQueueGenericReceive+0xd6>
		prvLockQueue( pxQueue );
  400fa6:	2300      	movs	r3, #0
  400fa8:	6463      	str	r3, [r4, #68]	; 0x44
  400faa:	e021      	b.n	400ff0 <xQueueGenericReceive+0xe8>
  400fac:	2300      	movs	r3, #0
  400fae:	64a3      	str	r3, [r4, #72]	; 0x48
  400fb0:	e022      	b.n	400ff8 <xQueueGenericReceive+0xf0>
						taskENTER_CRITICAL();
  400fb2:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400fb4:	6860      	ldr	r0, [r4, #4]
  400fb6:	4b2c      	ldr	r3, [pc, #176]	; (401068 <xQueueGenericReceive+0x160>)
  400fb8:	4798      	blx	r3
						taskEXIT_CRITICAL();
  400fba:	4b28      	ldr	r3, [pc, #160]	; (40105c <xQueueGenericReceive+0x154>)
  400fbc:	4798      	blx	r3
  400fbe:	e02b      	b.n	401018 <xQueueGenericReceive+0x110>
				prvUnlockQueue( pxQueue );
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b2a      	ldr	r3, [pc, #168]	; (40106c <xQueueGenericReceive+0x164>)
  400fc4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400fc6:	4b2a      	ldr	r3, [pc, #168]	; (401070 <xQueueGenericReceive+0x168>)
  400fc8:	4798      	blx	r3
  400fca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400fcc:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fd0:	2b00      	cmp	r3, #0
  400fd2:	d1a6      	bne.n	400f22 <xQueueGenericReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400fd4:	9b01      	ldr	r3, [sp, #4]
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d0de      	beq.n	400f98 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  400fda:	2e00      	cmp	r6, #0
  400fdc:	d0e0      	beq.n	400fa0 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  400fde:	4b1f      	ldr	r3, [pc, #124]	; (40105c <xQueueGenericReceive+0x154>)
  400fe0:	4798      	blx	r3
		vTaskSuspendAll();
  400fe2:	4b24      	ldr	r3, [pc, #144]	; (401074 <xQueueGenericReceive+0x16c>)
  400fe4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400fe6:	47a8      	blx	r5
  400fe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400fea:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fee:	d0da      	beq.n	400fa6 <xQueueGenericReceive+0x9e>
  400ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ff6:	d0d9      	beq.n	400fac <xQueueGenericReceive+0xa4>
  400ff8:	4b18      	ldr	r3, [pc, #96]	; (40105c <xQueueGenericReceive+0x154>)
  400ffa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400ffc:	a901      	add	r1, sp, #4
  400ffe:	a802      	add	r0, sp, #8
  401000:	4b1d      	ldr	r3, [pc, #116]	; (401078 <xQueueGenericReceive+0x170>)
  401002:	4798      	blx	r3
  401004:	b9e0      	cbnz	r0, 401040 <xQueueGenericReceive+0x138>
	taskENTER_CRITICAL();
  401006:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401008:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40100a:	4b14      	ldr	r3, [pc, #80]	; (40105c <xQueueGenericReceive+0x154>)
  40100c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40100e:	2e00      	cmp	r6, #0
  401010:	d1d6      	bne.n	400fc0 <xQueueGenericReceive+0xb8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401012:	6823      	ldr	r3, [r4, #0]
  401014:	2b00      	cmp	r3, #0
  401016:	d0cc      	beq.n	400fb2 <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401018:	9901      	ldr	r1, [sp, #4]
  40101a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40101e:	4b17      	ldr	r3, [pc, #92]	; (40107c <xQueueGenericReceive+0x174>)
  401020:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401022:	4620      	mov	r0, r4
  401024:	4b11      	ldr	r3, [pc, #68]	; (40106c <xQueueGenericReceive+0x164>)
  401026:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401028:	4b11      	ldr	r3, [pc, #68]	; (401070 <xQueueGenericReceive+0x168>)
  40102a:	4798      	blx	r3
  40102c:	2800      	cmp	r0, #0
  40102e:	d1cc      	bne.n	400fca <xQueueGenericReceive+0xc2>
					portYIELD_WITHIN_API();
  401030:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401034:	603b      	str	r3, [r7, #0]
  401036:	f3bf 8f4f 	dsb	sy
  40103a:	f3bf 8f6f 	isb	sy
  40103e:	e7c4      	b.n	400fca <xQueueGenericReceive+0xc2>
			prvUnlockQueue( pxQueue );
  401040:	4620      	mov	r0, r4
  401042:	4b0a      	ldr	r3, [pc, #40]	; (40106c <xQueueGenericReceive+0x164>)
  401044:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401046:	4b0a      	ldr	r3, [pc, #40]	; (401070 <xQueueGenericReceive+0x168>)
  401048:	4798      	blx	r3
			return errQUEUE_EMPTY;
  40104a:	2000      	movs	r0, #0
  40104c:	e77b      	b.n	400f46 <xQueueGenericReceive+0x3e>
  40104e:	bf00      	nop
  401050:	00400869 	.word	0x00400869
  401054:	e000ed04 	.word	0xe000ed04
  401058:	00400af5 	.word	0x00400af5
  40105c:	0040088d 	.word	0x0040088d
  401060:	00401b39 	.word	0x00401b39
  401064:	004018e9 	.word	0x004018e9
  401068:	00401a11 	.word	0x00401a11
  40106c:	00400b1d 	.word	0x00400b1d
  401070:	0040155d 	.word	0x0040155d
  401074:	00401409 	.word	0x00401409
  401078:	00401981 	.word	0x00401981
  40107c:	00401815 	.word	0x00401815
  401080:	00401969 	.word	0x00401969

00401084 <vQueueAddToRegistry>:
	{
  401084:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401086:	4b0b      	ldr	r3, [pc, #44]	; (4010b4 <vQueueAddToRegistry+0x30>)
  401088:	681b      	ldr	r3, [r3, #0]
  40108a:	b153      	cbz	r3, 4010a2 <vQueueAddToRegistry+0x1e>
  40108c:	2301      	movs	r3, #1
  40108e:	4c09      	ldr	r4, [pc, #36]	; (4010b4 <vQueueAddToRegistry+0x30>)
  401090:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401094:	b132      	cbz	r2, 4010a4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401096:	3301      	adds	r3, #1
  401098:	2b08      	cmp	r3, #8
  40109a:	d1f9      	bne.n	401090 <vQueueAddToRegistry+0xc>
	}
  40109c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010a0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4010a2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4010a4:	4a03      	ldr	r2, [pc, #12]	; (4010b4 <vQueueAddToRegistry+0x30>)
  4010a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4010aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4010ae:	6058      	str	r0, [r3, #4]
				break;
  4010b0:	e7f4      	b.n	40109c <vQueueAddToRegistry+0x18>
  4010b2:	bf00      	nop
  4010b4:	2040c5e0 	.word	0x2040c5e0

004010b8 <vQueueWaitForMessageRestricted>:
	{
  4010b8:	b570      	push	{r4, r5, r6, lr}
  4010ba:	4604      	mov	r4, r0
  4010bc:	460d      	mov	r5, r1
  4010be:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4010c0:	4b0f      	ldr	r3, [pc, #60]	; (401100 <vQueueWaitForMessageRestricted+0x48>)
  4010c2:	4798      	blx	r3
  4010c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ca:	d00b      	beq.n	4010e4 <vQueueWaitForMessageRestricted+0x2c>
  4010cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010d2:	d00a      	beq.n	4010ea <vQueueWaitForMessageRestricted+0x32>
  4010d4:	4b0b      	ldr	r3, [pc, #44]	; (401104 <vQueueWaitForMessageRestricted+0x4c>)
  4010d6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4010d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010da:	b14b      	cbz	r3, 4010f0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4010dc:	4620      	mov	r0, r4
  4010de:	4b0a      	ldr	r3, [pc, #40]	; (401108 <vQueueWaitForMessageRestricted+0x50>)
  4010e0:	4798      	blx	r3
  4010e2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4010e4:	2300      	movs	r3, #0
  4010e6:	6463      	str	r3, [r4, #68]	; 0x44
  4010e8:	e7f0      	b.n	4010cc <vQueueWaitForMessageRestricted+0x14>
  4010ea:	2300      	movs	r3, #0
  4010ec:	64a3      	str	r3, [r4, #72]	; 0x48
  4010ee:	e7f1      	b.n	4010d4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4010f0:	4632      	mov	r2, r6
  4010f2:	4629      	mov	r1, r5
  4010f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010f8:	4b04      	ldr	r3, [pc, #16]	; (40110c <vQueueWaitForMessageRestricted+0x54>)
  4010fa:	4798      	blx	r3
  4010fc:	e7ee      	b.n	4010dc <vQueueWaitForMessageRestricted+0x24>
  4010fe:	bf00      	nop
  401100:	00400869 	.word	0x00400869
  401104:	0040088d 	.word	0x0040088d
  401108:	00400b1d 	.word	0x00400b1d
  40110c:	00401881 	.word	0x00401881

00401110 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401110:	4b08      	ldr	r3, [pc, #32]	; (401134 <prvResetNextTaskUnblockTime+0x24>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	681b      	ldr	r3, [r3, #0]
  401116:	b13b      	cbz	r3, 401128 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401118:	4b06      	ldr	r3, [pc, #24]	; (401134 <prvResetNextTaskUnblockTime+0x24>)
  40111a:	681b      	ldr	r3, [r3, #0]
  40111c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40111e:	68db      	ldr	r3, [r3, #12]
  401120:	685a      	ldr	r2, [r3, #4]
  401122:	4b05      	ldr	r3, [pc, #20]	; (401138 <prvResetNextTaskUnblockTime+0x28>)
  401124:	601a      	str	r2, [r3, #0]
  401126:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401128:	f04f 32ff 	mov.w	r2, #4294967295
  40112c:	4b02      	ldr	r3, [pc, #8]	; (401138 <prvResetNextTaskUnblockTime+0x28>)
  40112e:	601a      	str	r2, [r3, #0]
  401130:	4770      	bx	lr
  401132:	bf00      	nop
  401134:	2040c3fc 	.word	0x2040c3fc
  401138:	2040c4a8 	.word	0x2040c4a8

0040113c <prvAddCurrentTaskToDelayedList>:
{
  40113c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40113e:	4b0f      	ldr	r3, [pc, #60]	; (40117c <prvAddCurrentTaskToDelayedList+0x40>)
  401140:	681b      	ldr	r3, [r3, #0]
  401142:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401144:	4b0e      	ldr	r3, [pc, #56]	; (401180 <prvAddCurrentTaskToDelayedList+0x44>)
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	4298      	cmp	r0, r3
  40114a:	d30e      	bcc.n	40116a <prvAddCurrentTaskToDelayedList+0x2e>
  40114c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40114e:	4b0d      	ldr	r3, [pc, #52]	; (401184 <prvAddCurrentTaskToDelayedList+0x48>)
  401150:	6818      	ldr	r0, [r3, #0]
  401152:	4b0a      	ldr	r3, [pc, #40]	; (40117c <prvAddCurrentTaskToDelayedList+0x40>)
  401154:	6819      	ldr	r1, [r3, #0]
  401156:	3104      	adds	r1, #4
  401158:	4b0b      	ldr	r3, [pc, #44]	; (401188 <prvAddCurrentTaskToDelayedList+0x4c>)
  40115a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40115c:	4b0b      	ldr	r3, [pc, #44]	; (40118c <prvAddCurrentTaskToDelayedList+0x50>)
  40115e:	681b      	ldr	r3, [r3, #0]
  401160:	429c      	cmp	r4, r3
  401162:	d201      	bcs.n	401168 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401164:	4b09      	ldr	r3, [pc, #36]	; (40118c <prvAddCurrentTaskToDelayedList+0x50>)
  401166:	601c      	str	r4, [r3, #0]
  401168:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40116a:	4b09      	ldr	r3, [pc, #36]	; (401190 <prvAddCurrentTaskToDelayedList+0x54>)
  40116c:	6818      	ldr	r0, [r3, #0]
  40116e:	4b03      	ldr	r3, [pc, #12]	; (40117c <prvAddCurrentTaskToDelayedList+0x40>)
  401170:	6819      	ldr	r1, [r3, #0]
  401172:	3104      	adds	r1, #4
  401174:	4b04      	ldr	r3, [pc, #16]	; (401188 <prvAddCurrentTaskToDelayedList+0x4c>)
  401176:	4798      	blx	r3
  401178:	bd10      	pop	{r4, pc}
  40117a:	bf00      	nop
  40117c:	2040c3f8 	.word	0x2040c3f8
  401180:	2040c4f0 	.word	0x2040c4f0
  401184:	2040c3fc 	.word	0x2040c3fc
  401188:	00400779 	.word	0x00400779
  40118c:	2040c4a8 	.word	0x2040c4a8
  401190:	2040c400 	.word	0x2040c400

00401194 <xTaskGenericCreate>:
{
  401194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401198:	b083      	sub	sp, #12
  40119a:	9000      	str	r0, [sp, #0]
  40119c:	460e      	mov	r6, r1
  40119e:	4617      	mov	r7, r2
  4011a0:	9301      	str	r3, [sp, #4]
  4011a2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4011a6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4011aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011ac:	2d00      	cmp	r5, #0
  4011ae:	f000 8089 	beq.w	4012c4 <xTaskGenericCreate+0x130>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4011b2:	2058      	movs	r0, #88	; 0x58
  4011b4:	4b5f      	ldr	r3, [pc, #380]	; (401334 <xTaskGenericCreate+0x1a0>)
  4011b6:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4011b8:	4604      	mov	r4, r0
  4011ba:	2800      	cmp	r0, #0
  4011bc:	f000 8088 	beq.w	4012d0 <xTaskGenericCreate+0x13c>
				pxNewTCB->pxStack = pxStack;
  4011c0:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4011c2:	00ba      	lsls	r2, r7, #2
  4011c4:	21a5      	movs	r1, #165	; 0xa5
  4011c6:	4628      	mov	r0, r5
  4011c8:	4b5b      	ldr	r3, [pc, #364]	; (401338 <xTaskGenericCreate+0x1a4>)
  4011ca:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4011cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  4011d0:	443b      	add	r3, r7
  4011d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4011d4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4011d8:	f025 0507 	bic.w	r5, r5, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4011dc:	7833      	ldrb	r3, [r6, #0]
  4011de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4011e2:	7833      	ldrb	r3, [r6, #0]
  4011e4:	b15b      	cbz	r3, 4011fe <xTaskGenericCreate+0x6a>
  4011e6:	4633      	mov	r3, r6
  4011e8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4011ec:	3609      	adds	r6, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4011ee:	7859      	ldrb	r1, [r3, #1]
  4011f0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4011f4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4011f8:	b109      	cbz	r1, 4011fe <xTaskGenericCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4011fa:	42b3      	cmp	r3, r6
  4011fc:	d1f7      	bne.n	4011ee <xTaskGenericCreate+0x5a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4011fe:	2700      	movs	r7, #0
  401200:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401204:	465e      	mov	r6, fp
  401206:	2e04      	cmp	r6, #4
  401208:	bf28      	it	cs
  40120a:	2604      	movcs	r6, #4
	pxTCB->uxPriority = uxPriority;
  40120c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40120e:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401210:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401212:	f104 0804 	add.w	r8, r4, #4
  401216:	4640      	mov	r0, r8
  401218:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40138c <xTaskGenericCreate+0x1f8>
  40121c:	47c8      	blx	r9
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40121e:	f104 0018 	add.w	r0, r4, #24
  401222:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401224:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401226:	f1c6 0605 	rsb	r6, r6, #5
  40122a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40122c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40122e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401230:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401234:	9a01      	ldr	r2, [sp, #4]
  401236:	9900      	ldr	r1, [sp, #0]
  401238:	4628      	mov	r0, r5
  40123a:	4b40      	ldr	r3, [pc, #256]	; (40133c <xTaskGenericCreate+0x1a8>)
  40123c:	4798      	blx	r3
  40123e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401240:	f1ba 0f00 	cmp.w	sl, #0
  401244:	d001      	beq.n	40124a <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401246:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40124a:	4b3d      	ldr	r3, [pc, #244]	; (401340 <xTaskGenericCreate+0x1ac>)
  40124c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40124e:	4a3d      	ldr	r2, [pc, #244]	; (401344 <xTaskGenericCreate+0x1b0>)
  401250:	6813      	ldr	r3, [r2, #0]
  401252:	3301      	adds	r3, #1
  401254:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401256:	4b3c      	ldr	r3, [pc, #240]	; (401348 <xTaskGenericCreate+0x1b4>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	2b00      	cmp	r3, #0
  40125c:	d03e      	beq.n	4012dc <xTaskGenericCreate+0x148>
				if( xSchedulerRunning == pdFALSE )
  40125e:	4b3b      	ldr	r3, [pc, #236]	; (40134c <xTaskGenericCreate+0x1b8>)
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	b933      	cbnz	r3, 401272 <xTaskGenericCreate+0xde>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401264:	4b38      	ldr	r3, [pc, #224]	; (401348 <xTaskGenericCreate+0x1b4>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40126a:	459b      	cmp	fp, r3
  40126c:	d301      	bcc.n	401272 <xTaskGenericCreate+0xde>
						pxCurrentTCB = pxNewTCB;
  40126e:	4b36      	ldr	r3, [pc, #216]	; (401348 <xTaskGenericCreate+0x1b4>)
  401270:	601c      	str	r4, [r3, #0]
			uxTaskNumber++;
  401272:	4a37      	ldr	r2, [pc, #220]	; (401350 <xTaskGenericCreate+0x1bc>)
  401274:	6813      	ldr	r3, [r2, #0]
  401276:	3301      	adds	r3, #1
  401278:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40127a:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40127c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40127e:	4a35      	ldr	r2, [pc, #212]	; (401354 <xTaskGenericCreate+0x1c0>)
  401280:	6811      	ldr	r1, [r2, #0]
  401282:	2301      	movs	r3, #1
  401284:	4083      	lsls	r3, r0
  401286:	430b      	orrs	r3, r1
  401288:	6013      	str	r3, [r2, #0]
  40128a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40128e:	4641      	mov	r1, r8
  401290:	4b31      	ldr	r3, [pc, #196]	; (401358 <xTaskGenericCreate+0x1c4>)
  401292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401296:	4b31      	ldr	r3, [pc, #196]	; (40135c <xTaskGenericCreate+0x1c8>)
  401298:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40129a:	4b31      	ldr	r3, [pc, #196]	; (401360 <xTaskGenericCreate+0x1cc>)
  40129c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  40129e:	4b2b      	ldr	r3, [pc, #172]	; (40134c <xTaskGenericCreate+0x1b8>)
  4012a0:	681b      	ldr	r3, [r3, #0]
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	d040      	beq.n	401328 <xTaskGenericCreate+0x194>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4012a6:	4b28      	ldr	r3, [pc, #160]	; (401348 <xTaskGenericCreate+0x1b4>)
  4012a8:	681b      	ldr	r3, [r3, #0]
  4012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012ac:	459b      	cmp	fp, r3
  4012ae:	d93f      	bls.n	401330 <xTaskGenericCreate+0x19c>
				taskYIELD_IF_USING_PREEMPTION();
  4012b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b4:	4b2b      	ldr	r3, [pc, #172]	; (401364 <xTaskGenericCreate+0x1d0>)
  4012b6:	601a      	str	r2, [r3, #0]
  4012b8:	f3bf 8f4f 	dsb	sy
  4012bc:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4012c0:	2001      	movs	r0, #1
  4012c2:	e032      	b.n	40132a <xTaskGenericCreate+0x196>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012c4:	0090      	lsls	r0, r2, #2
  4012c6:	4b1b      	ldr	r3, [pc, #108]	; (401334 <xTaskGenericCreate+0x1a0>)
  4012c8:	4798      	blx	r3
		if( pxStack != NULL )
  4012ca:	4605      	mov	r5, r0
  4012cc:	b118      	cbz	r0, 4012d6 <xTaskGenericCreate+0x142>
  4012ce:	e770      	b.n	4011b2 <xTaskGenericCreate+0x1e>
				vPortFree( pxStack );
  4012d0:	4628      	mov	r0, r5
  4012d2:	4b25      	ldr	r3, [pc, #148]	; (401368 <xTaskGenericCreate+0x1d4>)
  4012d4:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4012d6:	f04f 30ff 	mov.w	r0, #4294967295
  4012da:	e026      	b.n	40132a <xTaskGenericCreate+0x196>
				pxCurrentTCB =  pxNewTCB;
  4012dc:	4b1a      	ldr	r3, [pc, #104]	; (401348 <xTaskGenericCreate+0x1b4>)
  4012de:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4012e0:	6813      	ldr	r3, [r2, #0]
  4012e2:	2b01      	cmp	r3, #1
  4012e4:	d1c5      	bne.n	401272 <xTaskGenericCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4012e6:	4e1c      	ldr	r6, [pc, #112]	; (401358 <xTaskGenericCreate+0x1c4>)
  4012e8:	4630      	mov	r0, r6
  4012ea:	4d20      	ldr	r5, [pc, #128]	; (40136c <xTaskGenericCreate+0x1d8>)
  4012ec:	47a8      	blx	r5
  4012ee:	f106 0014 	add.w	r0, r6, #20
  4012f2:	47a8      	blx	r5
  4012f4:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4012f8:	47a8      	blx	r5
  4012fa:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  4012fe:	47a8      	blx	r5
  401300:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401304:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401306:	4f1a      	ldr	r7, [pc, #104]	; (401370 <xTaskGenericCreate+0x1dc>)
  401308:	4638      	mov	r0, r7
  40130a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40130c:	4e19      	ldr	r6, [pc, #100]	; (401374 <xTaskGenericCreate+0x1e0>)
  40130e:	4630      	mov	r0, r6
  401310:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401312:	4819      	ldr	r0, [pc, #100]	; (401378 <xTaskGenericCreate+0x1e4>)
  401314:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401316:	4819      	ldr	r0, [pc, #100]	; (40137c <xTaskGenericCreate+0x1e8>)
  401318:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40131a:	4819      	ldr	r0, [pc, #100]	; (401380 <xTaskGenericCreate+0x1ec>)
  40131c:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40131e:	4b19      	ldr	r3, [pc, #100]	; (401384 <xTaskGenericCreate+0x1f0>)
  401320:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401322:	4b19      	ldr	r3, [pc, #100]	; (401388 <xTaskGenericCreate+0x1f4>)
  401324:	601e      	str	r6, [r3, #0]
  401326:	e7a4      	b.n	401272 <xTaskGenericCreate+0xde>
			xReturn = pdPASS;
  401328:	2001      	movs	r0, #1
}
  40132a:	b003      	add	sp, #12
  40132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401330:	2001      	movs	r0, #1
	return xReturn;
  401332:	e7fa      	b.n	40132a <xTaskGenericCreate+0x196>
  401334:	004009a9 	.word	0x004009a9
  401338:	00403609 	.word	0x00403609
  40133c:	0040081d 	.word	0x0040081d
  401340:	00400869 	.word	0x00400869
  401344:	2040c468 	.word	0x2040c468
  401348:	2040c3f8 	.word	0x2040c3f8
  40134c:	2040c4c4 	.word	0x2040c4c4
  401350:	2040c474 	.word	0x2040c474
  401354:	2040c47c 	.word	0x2040c47c
  401358:	2040c404 	.word	0x2040c404
  40135c:	00400761 	.word	0x00400761
  401360:	0040088d 	.word	0x0040088d
  401364:	e000ed04 	.word	0xe000ed04
  401368:	00400a19 	.word	0x00400a19
  40136c:	00400745 	.word	0x00400745
  401370:	2040c480 	.word	0x2040c480
  401374:	2040c494 	.word	0x2040c494
  401378:	2040c4b0 	.word	0x2040c4b0
  40137c:	2040c4dc 	.word	0x2040c4dc
  401380:	2040c4c8 	.word	0x2040c4c8
  401384:	2040c3fc 	.word	0x2040c3fc
  401388:	2040c400 	.word	0x2040c400
  40138c:	0040075b 	.word	0x0040075b

00401390 <vTaskStartScheduler>:
{
  401390:	b510      	push	{r4, lr}
  401392:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401394:	2300      	movs	r3, #0
  401396:	9303      	str	r3, [sp, #12]
  401398:	9302      	str	r3, [sp, #8]
  40139a:	9301      	str	r3, [sp, #4]
  40139c:	9300      	str	r3, [sp, #0]
  40139e:	2282      	movs	r2, #130	; 0x82
  4013a0:	4911      	ldr	r1, [pc, #68]	; (4013e8 <vTaskStartScheduler+0x58>)
  4013a2:	4812      	ldr	r0, [pc, #72]	; (4013ec <vTaskStartScheduler+0x5c>)
  4013a4:	4c12      	ldr	r4, [pc, #72]	; (4013f0 <vTaskStartScheduler+0x60>)
  4013a6:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4013a8:	2801      	cmp	r0, #1
  4013aa:	d001      	beq.n	4013b0 <vTaskStartScheduler+0x20>
}
  4013ac:	b004      	add	sp, #16
  4013ae:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  4013b0:	4b10      	ldr	r3, [pc, #64]	; (4013f4 <vTaskStartScheduler+0x64>)
  4013b2:	4798      	blx	r3
	if( xReturn == pdPASS )
  4013b4:	2801      	cmp	r0, #1
  4013b6:	d1f9      	bne.n	4013ac <vTaskStartScheduler+0x1c>
	__asm volatile
  4013b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013bc:	b672      	cpsid	i
  4013be:	f383 8811 	msr	BASEPRI, r3
  4013c2:	f3bf 8f6f 	isb	sy
  4013c6:	f3bf 8f4f 	dsb	sy
  4013ca:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4013cc:	f04f 32ff 	mov.w	r2, #4294967295
  4013d0:	4b09      	ldr	r3, [pc, #36]	; (4013f8 <vTaskStartScheduler+0x68>)
  4013d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4013d4:	2201      	movs	r2, #1
  4013d6:	4b09      	ldr	r3, [pc, #36]	; (4013fc <vTaskStartScheduler+0x6c>)
  4013d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4013da:	2200      	movs	r2, #0
  4013dc:	4b08      	ldr	r3, [pc, #32]	; (401400 <vTaskStartScheduler+0x70>)
  4013de:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4013e0:	4b08      	ldr	r3, [pc, #32]	; (401404 <vTaskStartScheduler+0x74>)
  4013e2:	4798      	blx	r3
}
  4013e4:	e7e2      	b.n	4013ac <vTaskStartScheduler+0x1c>
  4013e6:	bf00      	nop
  4013e8:	0040710c 	.word	0x0040710c
  4013ec:	004016cd 	.word	0x004016cd
  4013f0:	00401195 	.word	0x00401195
  4013f4:	00401c11 	.word	0x00401c11
  4013f8:	2040c4a8 	.word	0x2040c4a8
  4013fc:	2040c4c4 	.word	0x2040c4c4
  401400:	2040c4f0 	.word	0x2040c4f0
  401404:	00400959 	.word	0x00400959

00401408 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401408:	4a02      	ldr	r2, [pc, #8]	; (401414 <vTaskSuspendAll+0xc>)
  40140a:	6813      	ldr	r3, [r2, #0]
  40140c:	3301      	adds	r3, #1
  40140e:	6013      	str	r3, [r2, #0]
  401410:	4770      	bx	lr
  401412:	bf00      	nop
  401414:	2040c470 	.word	0x2040c470

00401418 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401418:	4b01      	ldr	r3, [pc, #4]	; (401420 <xTaskGetTickCount+0x8>)
  40141a:	6818      	ldr	r0, [r3, #0]
}
  40141c:	4770      	bx	lr
  40141e:	bf00      	nop
  401420:	2040c4f0 	.word	0x2040c4f0

00401424 <xTaskIncrementTick>:
{
  401424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401428:	4b3d      	ldr	r3, [pc, #244]	; (401520 <xTaskIncrementTick+0xfc>)
  40142a:	681b      	ldr	r3, [r3, #0]
  40142c:	2b00      	cmp	r3, #0
  40142e:	d16e      	bne.n	40150e <xTaskIncrementTick+0xea>
		++xTickCount;
  401430:	4b3c      	ldr	r3, [pc, #240]	; (401524 <xTaskIncrementTick+0x100>)
  401432:	681a      	ldr	r2, [r3, #0]
  401434:	3201      	adds	r2, #1
  401436:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401438:	f8d3 a000 	ldr.w	sl, [r3]
			if( xConstTickCount == ( TickType_t ) 0U )
  40143c:	f1ba 0f00 	cmp.w	sl, #0
  401440:	d01b      	beq.n	40147a <xTaskIncrementTick+0x56>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401442:	4b39      	ldr	r3, [pc, #228]	; (401528 <xTaskIncrementTick+0x104>)
  401444:	681b      	ldr	r3, [r3, #0]
  401446:	459a      	cmp	sl, r3
  401448:	d224      	bcs.n	401494 <xTaskIncrementTick+0x70>
BaseType_t xSwitchRequired = pdFALSE;
  40144a:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40144c:	4b37      	ldr	r3, [pc, #220]	; (40152c <xTaskIncrementTick+0x108>)
  40144e:	681b      	ldr	r3, [r3, #0]
  401450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401452:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401456:	4a36      	ldr	r2, [pc, #216]	; (401530 <xTaskIncrementTick+0x10c>)
  401458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  40145c:	2b02      	cmp	r3, #2
  40145e:	bf28      	it	cs
  401460:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401462:	4b34      	ldr	r3, [pc, #208]	; (401534 <xTaskIncrementTick+0x110>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	2b00      	cmp	r3, #0
  401468:	d04e      	beq.n	401508 <xTaskIncrementTick+0xe4>
		if( xYieldPending != pdFALSE )
  40146a:	4b33      	ldr	r3, [pc, #204]	; (401538 <xTaskIncrementTick+0x114>)
  40146c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40146e:	2b00      	cmp	r3, #0
}
  401470:	bf0c      	ite	eq
  401472:	4630      	moveq	r0, r6
  401474:	2001      	movne	r0, #1
  401476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				taskSWITCH_DELAYED_LISTS();
  40147a:	4a30      	ldr	r2, [pc, #192]	; (40153c <xTaskIncrementTick+0x118>)
  40147c:	6811      	ldr	r1, [r2, #0]
  40147e:	4b30      	ldr	r3, [pc, #192]	; (401540 <xTaskIncrementTick+0x11c>)
  401480:	6818      	ldr	r0, [r3, #0]
  401482:	6010      	str	r0, [r2, #0]
  401484:	6019      	str	r1, [r3, #0]
  401486:	4a2f      	ldr	r2, [pc, #188]	; (401544 <xTaskIncrementTick+0x120>)
  401488:	6813      	ldr	r3, [r2, #0]
  40148a:	3301      	adds	r3, #1
  40148c:	6013      	str	r3, [r2, #0]
  40148e:	4b2e      	ldr	r3, [pc, #184]	; (401548 <xTaskIncrementTick+0x124>)
  401490:	4798      	blx	r3
  401492:	e7d6      	b.n	401442 <xTaskIncrementTick+0x1e>
  401494:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401496:	4f29      	ldr	r7, [pc, #164]	; (40153c <xTaskIncrementTick+0x118>)
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401498:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 401554 <xTaskIncrementTick+0x130>
						prvAddTaskToReadyList( pxTCB );
  40149c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401558 <xTaskIncrementTick+0x134>
  4014a0:	e021      	b.n	4014e6 <xTaskIncrementTick+0xc2>
						xNextTaskUnblockTime = portMAX_DELAY;
  4014a2:	f04f 32ff 	mov.w	r2, #4294967295
  4014a6:	4b20      	ldr	r3, [pc, #128]	; (401528 <xTaskIncrementTick+0x104>)
  4014a8:	601a      	str	r2, [r3, #0]
						break;
  4014aa:	e7cf      	b.n	40144c <xTaskIncrementTick+0x28>
							xNextTaskUnblockTime = xItemValue;
  4014ac:	4a1e      	ldr	r2, [pc, #120]	; (401528 <xTaskIncrementTick+0x104>)
  4014ae:	6013      	str	r3, [r2, #0]
							break;
  4014b0:	e7cc      	b.n	40144c <xTaskIncrementTick+0x28>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4014b2:	f104 0018 	add.w	r0, r4, #24
  4014b6:	47c8      	blx	r9
						prvAddTaskToReadyList( pxTCB );
  4014b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4014ba:	f8d8 2000 	ldr.w	r2, [r8]
  4014be:	2301      	movs	r3, #1
  4014c0:	4083      	lsls	r3, r0
  4014c2:	4313      	orrs	r3, r2
  4014c4:	f8c8 3000 	str.w	r3, [r8]
  4014c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4014cc:	4629      	mov	r1, r5
  4014ce:	4b18      	ldr	r3, [pc, #96]	; (401530 <xTaskIncrementTick+0x10c>)
  4014d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4014d4:	4b1d      	ldr	r3, [pc, #116]	; (40154c <xTaskIncrementTick+0x128>)
  4014d6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4014d8:	4b14      	ldr	r3, [pc, #80]	; (40152c <xTaskIncrementTick+0x108>)
  4014da:	681b      	ldr	r3, [r3, #0]
  4014dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4014e0:	429a      	cmp	r2, r3
  4014e2:	bf28      	it	cs
  4014e4:	2601      	movcs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4014e6:	683b      	ldr	r3, [r7, #0]
  4014e8:	681b      	ldr	r3, [r3, #0]
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	d0d9      	beq.n	4014a2 <xTaskIncrementTick+0x7e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4014ee:	683b      	ldr	r3, [r7, #0]
  4014f0:	68db      	ldr	r3, [r3, #12]
  4014f2:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4014f4:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
  4014f6:	459a      	cmp	sl, r3
  4014f8:	d3d8      	bcc.n	4014ac <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4014fa:	1d25      	adds	r5, r4, #4
  4014fc:	4628      	mov	r0, r5
  4014fe:	47c8      	blx	r9
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401502:	2b00      	cmp	r3, #0
  401504:	d1d5      	bne.n	4014b2 <xTaskIncrementTick+0x8e>
  401506:	e7d7      	b.n	4014b8 <xTaskIncrementTick+0x94>
				vApplicationTickHook();
  401508:	4b11      	ldr	r3, [pc, #68]	; (401550 <xTaskIncrementTick+0x12c>)
  40150a:	4798      	blx	r3
  40150c:	e7ad      	b.n	40146a <xTaskIncrementTick+0x46>
		++uxPendedTicks;
  40150e:	4a09      	ldr	r2, [pc, #36]	; (401534 <xTaskIncrementTick+0x110>)
  401510:	6813      	ldr	r3, [r2, #0]
  401512:	3301      	adds	r3, #1
  401514:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401516:	4b0e      	ldr	r3, [pc, #56]	; (401550 <xTaskIncrementTick+0x12c>)
  401518:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40151a:	2600      	movs	r6, #0
  40151c:	e7a5      	b.n	40146a <xTaskIncrementTick+0x46>
  40151e:	bf00      	nop
  401520:	2040c470 	.word	0x2040c470
  401524:	2040c4f0 	.word	0x2040c4f0
  401528:	2040c4a8 	.word	0x2040c4a8
  40152c:	2040c3f8 	.word	0x2040c3f8
  401530:	2040c404 	.word	0x2040c404
  401534:	2040c46c 	.word	0x2040c46c
  401538:	2040c4f4 	.word	0x2040c4f4
  40153c:	2040c3fc 	.word	0x2040c3fc
  401540:	2040c400 	.word	0x2040c400
  401544:	2040c4ac 	.word	0x2040c4ac
  401548:	00401111 	.word	0x00401111
  40154c:	00400761 	.word	0x00400761
  401550:	00402fe5 	.word	0x00402fe5
  401554:	004007ad 	.word	0x004007ad
  401558:	2040c47c 	.word	0x2040c47c

0040155c <xTaskResumeAll>:
{
  40155c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	taskENTER_CRITICAL();
  401560:	4b2f      	ldr	r3, [pc, #188]	; (401620 <xTaskResumeAll+0xc4>)
  401562:	4798      	blx	r3
		--uxSchedulerSuspended;
  401564:	4b2f      	ldr	r3, [pc, #188]	; (401624 <xTaskResumeAll+0xc8>)
  401566:	681a      	ldr	r2, [r3, #0]
  401568:	3a01      	subs	r2, #1
  40156a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40156c:	681b      	ldr	r3, [r3, #0]
  40156e:	2b00      	cmp	r3, #0
  401570:	d150      	bne.n	401614 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401572:	4b2d      	ldr	r3, [pc, #180]	; (401628 <xTaskResumeAll+0xcc>)
  401574:	681b      	ldr	r3, [r3, #0]
  401576:	b333      	cbz	r3, 4015c6 <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401578:	4e2c      	ldr	r6, [pc, #176]	; (40162c <xTaskResumeAll+0xd0>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40157a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401650 <xTaskResumeAll+0xf4>
					prvAddTaskToReadyList( pxTCB );
  40157e:	4f2c      	ldr	r7, [pc, #176]	; (401630 <xTaskResumeAll+0xd4>)
  401580:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401654 <xTaskResumeAll+0xf8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401584:	6833      	ldr	r3, [r6, #0]
  401586:	b303      	cbz	r3, 4015ca <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401588:	68f3      	ldr	r3, [r6, #12]
  40158a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40158c:	f104 0018 	add.w	r0, r4, #24
  401590:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401592:	1d25      	adds	r5, r4, #4
  401594:	4628      	mov	r0, r5
  401596:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401598:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40159a:	683a      	ldr	r2, [r7, #0]
  40159c:	2301      	movs	r3, #1
  40159e:	4083      	lsls	r3, r0
  4015a0:	4313      	orrs	r3, r2
  4015a2:	603b      	str	r3, [r7, #0]
  4015a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4015a8:	4629      	mov	r1, r5
  4015aa:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4015ae:	4b21      	ldr	r3, [pc, #132]	; (401634 <xTaskResumeAll+0xd8>)
  4015b0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015b2:	4b21      	ldr	r3, [pc, #132]	; (401638 <xTaskResumeAll+0xdc>)
  4015b4:	681b      	ldr	r3, [r3, #0]
  4015b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015ba:	429a      	cmp	r2, r3
  4015bc:	d3e2      	bcc.n	401584 <xTaskResumeAll+0x28>
						xYieldPending = pdTRUE;
  4015be:	2201      	movs	r2, #1
  4015c0:	4b1e      	ldr	r3, [pc, #120]	; (40163c <xTaskResumeAll+0xe0>)
  4015c2:	601a      	str	r2, [r3, #0]
  4015c4:	e7de      	b.n	401584 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
  4015c6:	2400      	movs	r4, #0
  4015c8:	e025      	b.n	401616 <xTaskResumeAll+0xba>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4015ca:	4b1d      	ldr	r3, [pc, #116]	; (401640 <xTaskResumeAll+0xe4>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	b18b      	cbz	r3, 4015f4 <xTaskResumeAll+0x98>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4015d0:	4b1b      	ldr	r3, [pc, #108]	; (401640 <xTaskResumeAll+0xe4>)
  4015d2:	681b      	ldr	r3, [r3, #0]
  4015d4:	b173      	cbz	r3, 4015f4 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  4015d6:	4d1b      	ldr	r5, [pc, #108]	; (401644 <xTaskResumeAll+0xe8>)
							xYieldPending = pdTRUE;
  4015d8:	4e18      	ldr	r6, [pc, #96]	; (40163c <xTaskResumeAll+0xe0>)
						--uxPendedTicks;
  4015da:	4c19      	ldr	r4, [pc, #100]	; (401640 <xTaskResumeAll+0xe4>)
  4015dc:	e004      	b.n	4015e8 <xTaskResumeAll+0x8c>
  4015de:	6823      	ldr	r3, [r4, #0]
  4015e0:	3b01      	subs	r3, #1
  4015e2:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4015e4:	6823      	ldr	r3, [r4, #0]
  4015e6:	b12b      	cbz	r3, 4015f4 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  4015e8:	47a8      	blx	r5
  4015ea:	2800      	cmp	r0, #0
  4015ec:	d0f7      	beq.n	4015de <xTaskResumeAll+0x82>
							xYieldPending = pdTRUE;
  4015ee:	2301      	movs	r3, #1
  4015f0:	6033      	str	r3, [r6, #0]
  4015f2:	e7f4      	b.n	4015de <xTaskResumeAll+0x82>
				if( xYieldPending == pdTRUE )
  4015f4:	4b11      	ldr	r3, [pc, #68]	; (40163c <xTaskResumeAll+0xe0>)
  4015f6:	681b      	ldr	r3, [r3, #0]
  4015f8:	2b01      	cmp	r3, #1
  4015fa:	d001      	beq.n	401600 <xTaskResumeAll+0xa4>
BaseType_t xAlreadyYielded = pdFALSE;
  4015fc:	2400      	movs	r4, #0
  4015fe:	e00a      	b.n	401616 <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
  401600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401604:	4b10      	ldr	r3, [pc, #64]	; (401648 <xTaskResumeAll+0xec>)
  401606:	601a      	str	r2, [r3, #0]
  401608:	f3bf 8f4f 	dsb	sy
  40160c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401610:	2401      	movs	r4, #1
  401612:	e000      	b.n	401616 <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
  401614:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401616:	4b0d      	ldr	r3, [pc, #52]	; (40164c <xTaskResumeAll+0xf0>)
  401618:	4798      	blx	r3
}
  40161a:	4620      	mov	r0, r4
  40161c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401620:	00400869 	.word	0x00400869
  401624:	2040c470 	.word	0x2040c470
  401628:	2040c468 	.word	0x2040c468
  40162c:	2040c4b0 	.word	0x2040c4b0
  401630:	2040c47c 	.word	0x2040c47c
  401634:	00400761 	.word	0x00400761
  401638:	2040c3f8 	.word	0x2040c3f8
  40163c:	2040c4f4 	.word	0x2040c4f4
  401640:	2040c46c 	.word	0x2040c46c
  401644:	00401425 	.word	0x00401425
  401648:	e000ed04 	.word	0xe000ed04
  40164c:	0040088d 	.word	0x0040088d
  401650:	004007ad 	.word	0x004007ad
  401654:	2040c404 	.word	0x2040c404

00401658 <vTaskDelay>:
	{
  401658:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40165a:	b940      	cbnz	r0, 40166e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
  40165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401660:	4b12      	ldr	r3, [pc, #72]	; (4016ac <vTaskDelay+0x54>)
  401662:	601a      	str	r2, [r3, #0]
  401664:	f3bf 8f4f 	dsb	sy
  401668:	f3bf 8f6f 	isb	sy
  40166c:	bd10      	pop	{r4, pc}
  40166e:	4604      	mov	r4, r0
			vTaskSuspendAll();
  401670:	4b0f      	ldr	r3, [pc, #60]	; (4016b0 <vTaskDelay+0x58>)
  401672:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401674:	4b0f      	ldr	r3, [pc, #60]	; (4016b4 <vTaskDelay+0x5c>)
  401676:	681b      	ldr	r3, [r3, #0]
  401678:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40167a:	4b0f      	ldr	r3, [pc, #60]	; (4016b8 <vTaskDelay+0x60>)
  40167c:	6818      	ldr	r0, [r3, #0]
  40167e:	3004      	adds	r0, #4
  401680:	4b0e      	ldr	r3, [pc, #56]	; (4016bc <vTaskDelay+0x64>)
  401682:	4798      	blx	r3
  401684:	b948      	cbnz	r0, 40169a <vTaskDelay+0x42>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401686:	4b0c      	ldr	r3, [pc, #48]	; (4016b8 <vTaskDelay+0x60>)
  401688:	681a      	ldr	r2, [r3, #0]
  40168a:	490d      	ldr	r1, [pc, #52]	; (4016c0 <vTaskDelay+0x68>)
  40168c:	680b      	ldr	r3, [r1, #0]
  40168e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401690:	2201      	movs	r2, #1
  401692:	4082      	lsls	r2, r0
  401694:	ea23 0302 	bic.w	r3, r3, r2
  401698:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40169a:	4620      	mov	r0, r4
  40169c:	4b09      	ldr	r3, [pc, #36]	; (4016c4 <vTaskDelay+0x6c>)
  40169e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4016a0:	4b09      	ldr	r3, [pc, #36]	; (4016c8 <vTaskDelay+0x70>)
  4016a2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4016a4:	2800      	cmp	r0, #0
  4016a6:	d1e1      	bne.n	40166c <vTaskDelay+0x14>
  4016a8:	e7d8      	b.n	40165c <vTaskDelay+0x4>
  4016aa:	bf00      	nop
  4016ac:	e000ed04 	.word	0xe000ed04
  4016b0:	00401409 	.word	0x00401409
  4016b4:	2040c4f0 	.word	0x2040c4f0
  4016b8:	2040c3f8 	.word	0x2040c3f8
  4016bc:	004007ad 	.word	0x004007ad
  4016c0:	2040c47c 	.word	0x2040c47c
  4016c4:	0040113d 	.word	0x0040113d
  4016c8:	0040155d 	.word	0x0040155d

004016cc <prvIdleTask>:
{
  4016cc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4016ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401758 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4016d2:	4e19      	ldr	r6, [pc, #100]	; (401738 <prvIdleTask+0x6c>)
				taskYIELD();
  4016d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40175c <prvIdleTask+0x90>
  4016d8:	e02a      	b.n	401730 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4016da:	4b18      	ldr	r3, [pc, #96]	; (40173c <prvIdleTask+0x70>)
  4016dc:	681b      	ldr	r3, [r3, #0]
  4016de:	2b01      	cmp	r3, #1
  4016e0:	d81e      	bhi.n	401720 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4016e2:	682b      	ldr	r3, [r5, #0]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d0f8      	beq.n	4016da <prvIdleTask+0xe>
			vTaskSuspendAll();
  4016e8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4016ea:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4016ec:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4016ee:	2c00      	cmp	r4, #0
  4016f0:	d0f7      	beq.n	4016e2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4016f2:	4b13      	ldr	r3, [pc, #76]	; (401740 <prvIdleTask+0x74>)
  4016f4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4016f6:	68f3      	ldr	r3, [r6, #12]
  4016f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4016fa:	1d20      	adds	r0, r4, #4
  4016fc:	4b11      	ldr	r3, [pc, #68]	; (401744 <prvIdleTask+0x78>)
  4016fe:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401700:	4a11      	ldr	r2, [pc, #68]	; (401748 <prvIdleTask+0x7c>)
  401702:	6813      	ldr	r3, [r2, #0]
  401704:	3b01      	subs	r3, #1
  401706:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401708:	682b      	ldr	r3, [r5, #0]
  40170a:	3b01      	subs	r3, #1
  40170c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40170e:	4b0f      	ldr	r3, [pc, #60]	; (40174c <prvIdleTask+0x80>)
  401710:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401712:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401714:	f8df a048 	ldr.w	sl, [pc, #72]	; 401760 <prvIdleTask+0x94>
  401718:	47d0      	blx	sl
		vPortFree( pxTCB );
  40171a:	4620      	mov	r0, r4
  40171c:	47d0      	blx	sl
  40171e:	e7e0      	b.n	4016e2 <prvIdleTask+0x16>
				taskYIELD();
  401720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401724:	f8c9 3000 	str.w	r3, [r9]
  401728:	f3bf 8f4f 	dsb	sy
  40172c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401730:	4d07      	ldr	r5, [pc, #28]	; (401750 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401732:	4f08      	ldr	r7, [pc, #32]	; (401754 <prvIdleTask+0x88>)
  401734:	e7d5      	b.n	4016e2 <prvIdleTask+0x16>
  401736:	bf00      	nop
  401738:	2040c4dc 	.word	0x2040c4dc
  40173c:	2040c404 	.word	0x2040c404
  401740:	00400869 	.word	0x00400869
  401744:	004007ad 	.word	0x004007ad
  401748:	2040c468 	.word	0x2040c468
  40174c:	0040088d 	.word	0x0040088d
  401750:	2040c478 	.word	0x2040c478
  401754:	0040155d 	.word	0x0040155d
  401758:	00401409 	.word	0x00401409
  40175c:	e000ed04 	.word	0xe000ed04
  401760:	00400a19 	.word	0x00400a19

00401764 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401764:	4b25      	ldr	r3, [pc, #148]	; (4017fc <vTaskSwitchContext+0x98>)
  401766:	681b      	ldr	r3, [r3, #0]
  401768:	2b00      	cmp	r3, #0
  40176a:	d12e      	bne.n	4017ca <vTaskSwitchContext+0x66>
{
  40176c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40176e:	2200      	movs	r2, #0
  401770:	4b23      	ldr	r3, [pc, #140]	; (401800 <vTaskSwitchContext+0x9c>)
  401772:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401774:	4b23      	ldr	r3, [pc, #140]	; (401804 <vTaskSwitchContext+0xa0>)
  401776:	681b      	ldr	r3, [r3, #0]
  401778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40177a:	681a      	ldr	r2, [r3, #0]
  40177c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401780:	d027      	beq.n	4017d2 <vTaskSwitchContext+0x6e>
  401782:	4b20      	ldr	r3, [pc, #128]	; (401804 <vTaskSwitchContext+0xa0>)
  401784:	6818      	ldr	r0, [r3, #0]
  401786:	6819      	ldr	r1, [r3, #0]
  401788:	3134      	adds	r1, #52	; 0x34
  40178a:	4b1f      	ldr	r3, [pc, #124]	; (401808 <vTaskSwitchContext+0xa4>)
  40178c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40178e:	4b1f      	ldr	r3, [pc, #124]	; (40180c <vTaskSwitchContext+0xa8>)
  401790:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401792:	fab3 f383 	clz	r3, r3
  401796:	b2db      	uxtb	r3, r3
  401798:	f1c3 031f 	rsb	r3, r3, #31
  40179c:	4a1c      	ldr	r2, [pc, #112]	; (401810 <vTaskSwitchContext+0xac>)
  40179e:	0099      	lsls	r1, r3, #2
  4017a0:	18c8      	adds	r0, r1, r3
  4017a2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4017a6:	6844      	ldr	r4, [r0, #4]
  4017a8:	6864      	ldr	r4, [r4, #4]
  4017aa:	6044      	str	r4, [r0, #4]
  4017ac:	4419      	add	r1, r3
  4017ae:	4602      	mov	r2, r0
  4017b0:	3208      	adds	r2, #8
  4017b2:	4294      	cmp	r4, r2
  4017b4:	d01a      	beq.n	4017ec <vTaskSwitchContext+0x88>
  4017b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4017ba:	4a15      	ldr	r2, [pc, #84]	; (401810 <vTaskSwitchContext+0xac>)
  4017bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4017c0:	685b      	ldr	r3, [r3, #4]
  4017c2:	68da      	ldr	r2, [r3, #12]
  4017c4:	4b0f      	ldr	r3, [pc, #60]	; (401804 <vTaskSwitchContext+0xa0>)
  4017c6:	601a      	str	r2, [r3, #0]
  4017c8:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  4017ca:	2201      	movs	r2, #1
  4017cc:	4b0c      	ldr	r3, [pc, #48]	; (401800 <vTaskSwitchContext+0x9c>)
  4017ce:	601a      	str	r2, [r3, #0]
  4017d0:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4017d2:	685a      	ldr	r2, [r3, #4]
  4017d4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4017d8:	d1d3      	bne.n	401782 <vTaskSwitchContext+0x1e>
  4017da:	689a      	ldr	r2, [r3, #8]
  4017dc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4017e0:	d1cf      	bne.n	401782 <vTaskSwitchContext+0x1e>
  4017e2:	68db      	ldr	r3, [r3, #12]
  4017e4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4017e8:	d1cb      	bne.n	401782 <vTaskSwitchContext+0x1e>
  4017ea:	e7d0      	b.n	40178e <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4017ec:	6860      	ldr	r0, [r4, #4]
  4017ee:	460a      	mov	r2, r1
  4017f0:	4907      	ldr	r1, [pc, #28]	; (401810 <vTaskSwitchContext+0xac>)
  4017f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4017f6:	6050      	str	r0, [r2, #4]
  4017f8:	e7dd      	b.n	4017b6 <vTaskSwitchContext+0x52>
  4017fa:	bf00      	nop
  4017fc:	2040c470 	.word	0x2040c470
  401800:	2040c4f4 	.word	0x2040c4f4
  401804:	2040c3f8 	.word	0x2040c3f8
  401808:	00402fcd 	.word	0x00402fcd
  40180c:	2040c47c 	.word	0x2040c47c
  401810:	2040c404 	.word	0x2040c404

00401814 <vTaskPlaceOnEventList>:
{
  401814:	b538      	push	{r3, r4, r5, lr}
  401816:	460d      	mov	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401818:	4c11      	ldr	r4, [pc, #68]	; (401860 <vTaskPlaceOnEventList+0x4c>)
  40181a:	6821      	ldr	r1, [r4, #0]
  40181c:	3118      	adds	r1, #24
  40181e:	4b11      	ldr	r3, [pc, #68]	; (401864 <vTaskPlaceOnEventList+0x50>)
  401820:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401822:	6820      	ldr	r0, [r4, #0]
  401824:	3004      	adds	r0, #4
  401826:	4b10      	ldr	r3, [pc, #64]	; (401868 <vTaskPlaceOnEventList+0x54>)
  401828:	4798      	blx	r3
  40182a:	b940      	cbnz	r0, 40183e <vTaskPlaceOnEventList+0x2a>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40182c:	6822      	ldr	r2, [r4, #0]
  40182e:	490f      	ldr	r1, [pc, #60]	; (40186c <vTaskPlaceOnEventList+0x58>)
  401830:	680b      	ldr	r3, [r1, #0]
  401832:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401834:	2201      	movs	r2, #1
  401836:	4082      	lsls	r2, r0
  401838:	ea23 0302 	bic.w	r3, r3, r2
  40183c:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40183e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401842:	d005      	beq.n	401850 <vTaskPlaceOnEventList+0x3c>
			xTimeToWake = xTickCount + xTicksToWait;
  401844:	4b0a      	ldr	r3, [pc, #40]	; (401870 <vTaskPlaceOnEventList+0x5c>)
  401846:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401848:	4428      	add	r0, r5
  40184a:	4b0a      	ldr	r3, [pc, #40]	; (401874 <vTaskPlaceOnEventList+0x60>)
  40184c:	4798      	blx	r3
  40184e:	bd38      	pop	{r3, r4, r5, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401850:	4b03      	ldr	r3, [pc, #12]	; (401860 <vTaskPlaceOnEventList+0x4c>)
  401852:	6819      	ldr	r1, [r3, #0]
  401854:	3104      	adds	r1, #4
  401856:	4808      	ldr	r0, [pc, #32]	; (401878 <vTaskPlaceOnEventList+0x64>)
  401858:	4b08      	ldr	r3, [pc, #32]	; (40187c <vTaskPlaceOnEventList+0x68>)
  40185a:	4798      	blx	r3
  40185c:	bd38      	pop	{r3, r4, r5, pc}
  40185e:	bf00      	nop
  401860:	2040c3f8 	.word	0x2040c3f8
  401864:	00400779 	.word	0x00400779
  401868:	004007ad 	.word	0x004007ad
  40186c:	2040c47c 	.word	0x2040c47c
  401870:	2040c4f0 	.word	0x2040c4f0
  401874:	0040113d 	.word	0x0040113d
  401878:	2040c4c8 	.word	0x2040c4c8
  40187c:	00400761 	.word	0x00400761

00401880 <vTaskPlaceOnEventListRestricted>:
	{
  401880:	b570      	push	{r4, r5, r6, lr}
  401882:	460e      	mov	r6, r1
  401884:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401886:	4c11      	ldr	r4, [pc, #68]	; (4018cc <vTaskPlaceOnEventListRestricted+0x4c>)
  401888:	6821      	ldr	r1, [r4, #0]
  40188a:	3118      	adds	r1, #24
  40188c:	4b10      	ldr	r3, [pc, #64]	; (4018d0 <vTaskPlaceOnEventListRestricted+0x50>)
  40188e:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401890:	6820      	ldr	r0, [r4, #0]
  401892:	3004      	adds	r0, #4
  401894:	4b0f      	ldr	r3, [pc, #60]	; (4018d4 <vTaskPlaceOnEventListRestricted+0x54>)
  401896:	4798      	blx	r3
  401898:	b940      	cbnz	r0, 4018ac <vTaskPlaceOnEventListRestricted+0x2c>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40189a:	6822      	ldr	r2, [r4, #0]
  40189c:	490e      	ldr	r1, [pc, #56]	; (4018d8 <vTaskPlaceOnEventListRestricted+0x58>)
  40189e:	680b      	ldr	r3, [r1, #0]
  4018a0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4018a2:	2201      	movs	r2, #1
  4018a4:	4082      	lsls	r2, r0
  4018a6:	ea23 0302 	bic.w	r3, r3, r2
  4018aa:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4018ac:	2d01      	cmp	r5, #1
  4018ae:	d005      	beq.n	4018bc <vTaskPlaceOnEventListRestricted+0x3c>
				xTimeToWake = xTickCount + xTicksToWait;
  4018b0:	4b0a      	ldr	r3, [pc, #40]	; (4018dc <vTaskPlaceOnEventListRestricted+0x5c>)
  4018b2:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4018b4:	4430      	add	r0, r6
  4018b6:	4b0a      	ldr	r3, [pc, #40]	; (4018e0 <vTaskPlaceOnEventListRestricted+0x60>)
  4018b8:	4798      	blx	r3
  4018ba:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4018bc:	4b03      	ldr	r3, [pc, #12]	; (4018cc <vTaskPlaceOnEventListRestricted+0x4c>)
  4018be:	6819      	ldr	r1, [r3, #0]
  4018c0:	3104      	adds	r1, #4
  4018c2:	4808      	ldr	r0, [pc, #32]	; (4018e4 <vTaskPlaceOnEventListRestricted+0x64>)
  4018c4:	4b02      	ldr	r3, [pc, #8]	; (4018d0 <vTaskPlaceOnEventListRestricted+0x50>)
  4018c6:	4798      	blx	r3
  4018c8:	bd70      	pop	{r4, r5, r6, pc}
  4018ca:	bf00      	nop
  4018cc:	2040c3f8 	.word	0x2040c3f8
  4018d0:	00400761 	.word	0x00400761
  4018d4:	004007ad 	.word	0x004007ad
  4018d8:	2040c47c 	.word	0x2040c47c
  4018dc:	2040c4f0 	.word	0x2040c4f0
  4018e0:	0040113d 	.word	0x0040113d
  4018e4:	2040c4c8 	.word	0x2040c4c8

004018e8 <xTaskRemoveFromEventList>:
{
  4018e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4018ea:	68c3      	ldr	r3, [r0, #12]
  4018ec:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4018ee:	f104 0518 	add.w	r5, r4, #24
  4018f2:	4628      	mov	r0, r5
  4018f4:	4b14      	ldr	r3, [pc, #80]	; (401948 <xTaskRemoveFromEventList+0x60>)
  4018f6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4018f8:	4b14      	ldr	r3, [pc, #80]	; (40194c <xTaskRemoveFromEventList+0x64>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	b9e3      	cbnz	r3, 401938 <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4018fe:	1d25      	adds	r5, r4, #4
  401900:	4628      	mov	r0, r5
  401902:	4b11      	ldr	r3, [pc, #68]	; (401948 <xTaskRemoveFromEventList+0x60>)
  401904:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401906:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401908:	4a11      	ldr	r2, [pc, #68]	; (401950 <xTaskRemoveFromEventList+0x68>)
  40190a:	6811      	ldr	r1, [r2, #0]
  40190c:	2301      	movs	r3, #1
  40190e:	4083      	lsls	r3, r0
  401910:	430b      	orrs	r3, r1
  401912:	6013      	str	r3, [r2, #0]
  401914:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401918:	4629      	mov	r1, r5
  40191a:	4b0e      	ldr	r3, [pc, #56]	; (401954 <xTaskRemoveFromEventList+0x6c>)
  40191c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401920:	4b0d      	ldr	r3, [pc, #52]	; (401958 <xTaskRemoveFromEventList+0x70>)
  401922:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401924:	4b0d      	ldr	r3, [pc, #52]	; (40195c <xTaskRemoveFromEventList+0x74>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40192c:	429a      	cmp	r2, r3
  40192e:	d908      	bls.n	401942 <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
  401930:	2001      	movs	r0, #1
  401932:	4b0b      	ldr	r3, [pc, #44]	; (401960 <xTaskRemoveFromEventList+0x78>)
  401934:	6018      	str	r0, [r3, #0]
  401936:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401938:	4629      	mov	r1, r5
  40193a:	480a      	ldr	r0, [pc, #40]	; (401964 <xTaskRemoveFromEventList+0x7c>)
  40193c:	4b06      	ldr	r3, [pc, #24]	; (401958 <xTaskRemoveFromEventList+0x70>)
  40193e:	4798      	blx	r3
  401940:	e7f0      	b.n	401924 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
  401942:	2000      	movs	r0, #0
}
  401944:	bd38      	pop	{r3, r4, r5, pc}
  401946:	bf00      	nop
  401948:	004007ad 	.word	0x004007ad
  40194c:	2040c470 	.word	0x2040c470
  401950:	2040c47c 	.word	0x2040c47c
  401954:	2040c404 	.word	0x2040c404
  401958:	00400761 	.word	0x00400761
  40195c:	2040c3f8 	.word	0x2040c3f8
  401960:	2040c4f4 	.word	0x2040c4f4
  401964:	2040c4b0 	.word	0x2040c4b0

00401968 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401968:	4b03      	ldr	r3, [pc, #12]	; (401978 <vTaskSetTimeOutState+0x10>)
  40196a:	681b      	ldr	r3, [r3, #0]
  40196c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40196e:	4b03      	ldr	r3, [pc, #12]	; (40197c <vTaskSetTimeOutState+0x14>)
  401970:	681b      	ldr	r3, [r3, #0]
  401972:	6043      	str	r3, [r0, #4]
  401974:	4770      	bx	lr
  401976:	bf00      	nop
  401978:	2040c4ac 	.word	0x2040c4ac
  40197c:	2040c4f0 	.word	0x2040c4f0

00401980 <xTaskCheckForTimeOut>:
{
  401980:	b538      	push	{r3, r4, r5, lr}
  401982:	4604      	mov	r4, r0
  401984:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401986:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <xTaskCheckForTimeOut+0x50>)
  401988:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40198a:	4b12      	ldr	r3, [pc, #72]	; (4019d4 <xTaskCheckForTimeOut+0x54>)
  40198c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40198e:	682b      	ldr	r3, [r5, #0]
  401990:	f1b3 3fff 	cmp.w	r3, #4294967295
  401994:	d018      	beq.n	4019c8 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401996:	4910      	ldr	r1, [pc, #64]	; (4019d8 <xTaskCheckForTimeOut+0x58>)
  401998:	6809      	ldr	r1, [r1, #0]
  40199a:	6820      	ldr	r0, [r4, #0]
  40199c:	4288      	cmp	r0, r1
  40199e:	d002      	beq.n	4019a6 <xTaskCheckForTimeOut+0x26>
  4019a0:	6861      	ldr	r1, [r4, #4]
  4019a2:	428a      	cmp	r2, r1
  4019a4:	d212      	bcs.n	4019cc <xTaskCheckForTimeOut+0x4c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4019a6:	6861      	ldr	r1, [r4, #4]
  4019a8:	1a50      	subs	r0, r2, r1
  4019aa:	4283      	cmp	r3, r0
  4019ac:	d804      	bhi.n	4019b8 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  4019ae:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4019b0:	4b0a      	ldr	r3, [pc, #40]	; (4019dc <xTaskCheckForTimeOut+0x5c>)
  4019b2:	4798      	blx	r3
}
  4019b4:	4620      	mov	r0, r4
  4019b6:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4019b8:	1a8a      	subs	r2, r1, r2
  4019ba:	4413      	add	r3, r2
  4019bc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4019be:	4620      	mov	r0, r4
  4019c0:	4b07      	ldr	r3, [pc, #28]	; (4019e0 <xTaskCheckForTimeOut+0x60>)
  4019c2:	4798      	blx	r3
			xReturn = pdFALSE;
  4019c4:	2400      	movs	r4, #0
  4019c6:	e7f3      	b.n	4019b0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
  4019c8:	2400      	movs	r4, #0
  4019ca:	e7f1      	b.n	4019b0 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  4019cc:	2401      	movs	r4, #1
  4019ce:	e7ef      	b.n	4019b0 <xTaskCheckForTimeOut+0x30>
  4019d0:	00400869 	.word	0x00400869
  4019d4:	2040c4f0 	.word	0x2040c4f0
  4019d8:	2040c4ac 	.word	0x2040c4ac
  4019dc:	0040088d 	.word	0x0040088d
  4019e0:	00401969 	.word	0x00401969

004019e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4019e4:	2201      	movs	r2, #1
  4019e6:	4b01      	ldr	r3, [pc, #4]	; (4019ec <vTaskMissedYield+0x8>)
  4019e8:	601a      	str	r2, [r3, #0]
  4019ea:	4770      	bx	lr
  4019ec:	2040c4f4 	.word	0x2040c4f4

004019f0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4019f0:	4b05      	ldr	r3, [pc, #20]	; (401a08 <xTaskGetSchedulerState+0x18>)
  4019f2:	681b      	ldr	r3, [r3, #0]
  4019f4:	b133      	cbz	r3, 401a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4019f6:	4b05      	ldr	r3, [pc, #20]	; (401a0c <xTaskGetSchedulerState+0x1c>)
  4019f8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4019fa:	2b00      	cmp	r3, #0
  4019fc:	bf0c      	ite	eq
  4019fe:	2002      	moveq	r0, #2
  401a00:	2000      	movne	r0, #0
  401a02:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401a04:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401a06:	4770      	bx	lr
  401a08:	2040c4c4 	.word	0x2040c4c4
  401a0c:	2040c470 	.word	0x2040c470

00401a10 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401a10:	2800      	cmp	r0, #0
  401a12:	d044      	beq.n	401a9e <vTaskPriorityInherit+0x8e>
	{
  401a14:	b538      	push	{r3, r4, r5, lr}
  401a16:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401a18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401a1a:	4921      	ldr	r1, [pc, #132]	; (401aa0 <vTaskPriorityInherit+0x90>)
  401a1c:	6809      	ldr	r1, [r1, #0]
  401a1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401a20:	428a      	cmp	r2, r1
  401a22:	d214      	bcs.n	401a4e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401a24:	6981      	ldr	r1, [r0, #24]
  401a26:	2900      	cmp	r1, #0
  401a28:	db05      	blt.n	401a36 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a2a:	491d      	ldr	r1, [pc, #116]	; (401aa0 <vTaskPriorityInherit+0x90>)
  401a2c:	6809      	ldr	r1, [r1, #0]
  401a2e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401a30:	f1c1 0105 	rsb	r1, r1, #5
  401a34:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401a36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401a3a:	491a      	ldr	r1, [pc, #104]	; (401aa4 <vTaskPriorityInherit+0x94>)
  401a3c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401a40:	6961      	ldr	r1, [r4, #20]
  401a42:	4291      	cmp	r1, r2
  401a44:	d004      	beq.n	401a50 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401a46:	4a16      	ldr	r2, [pc, #88]	; (401aa0 <vTaskPriorityInherit+0x90>)
  401a48:	6812      	ldr	r2, [r2, #0]
  401a4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401a4c:	62e2      	str	r2, [r4, #44]	; 0x2c
  401a4e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a50:	1d25      	adds	r5, r4, #4
  401a52:	4628      	mov	r0, r5
  401a54:	4b14      	ldr	r3, [pc, #80]	; (401aa8 <vTaskPriorityInherit+0x98>)
  401a56:	4798      	blx	r3
  401a58:	b970      	cbnz	r0, 401a78 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401a5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401a5c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a60:	4a10      	ldr	r2, [pc, #64]	; (401aa4 <vTaskPriorityInherit+0x94>)
  401a62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401a66:	b93a      	cbnz	r2, 401a78 <vTaskPriorityInherit+0x68>
  401a68:	4810      	ldr	r0, [pc, #64]	; (401aac <vTaskPriorityInherit+0x9c>)
  401a6a:	6802      	ldr	r2, [r0, #0]
  401a6c:	2101      	movs	r1, #1
  401a6e:	fa01 f303 	lsl.w	r3, r1, r3
  401a72:	ea22 0303 	bic.w	r3, r2, r3
  401a76:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401a78:	4b09      	ldr	r3, [pc, #36]	; (401aa0 <vTaskPriorityInherit+0x90>)
  401a7a:	681b      	ldr	r3, [r3, #0]
  401a7c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401a7e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401a80:	4a0a      	ldr	r2, [pc, #40]	; (401aac <vTaskPriorityInherit+0x9c>)
  401a82:	6811      	ldr	r1, [r2, #0]
  401a84:	2301      	movs	r3, #1
  401a86:	4083      	lsls	r3, r0
  401a88:	430b      	orrs	r3, r1
  401a8a:	6013      	str	r3, [r2, #0]
  401a8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a90:	4629      	mov	r1, r5
  401a92:	4b04      	ldr	r3, [pc, #16]	; (401aa4 <vTaskPriorityInherit+0x94>)
  401a94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a98:	4b05      	ldr	r3, [pc, #20]	; (401ab0 <vTaskPriorityInherit+0xa0>)
  401a9a:	4798      	blx	r3
  401a9c:	bd38      	pop	{r3, r4, r5, pc}
  401a9e:	4770      	bx	lr
  401aa0:	2040c3f8 	.word	0x2040c3f8
  401aa4:	2040c404 	.word	0x2040c404
  401aa8:	004007ad 	.word	0x004007ad
  401aac:	2040c47c 	.word	0x2040c47c
  401ab0:	00400761 	.word	0x00400761

00401ab4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401ab4:	2800      	cmp	r0, #0
  401ab6:	d033      	beq.n	401b20 <xTaskPriorityDisinherit+0x6c>
	{
  401ab8:	b538      	push	{r3, r4, r5, lr}
  401aba:	4604      	mov	r4, r0
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
  401abc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401abe:	3a01      	subs	r2, #1
  401ac0:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401ac2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401ac4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401ac6:	4288      	cmp	r0, r1
  401ac8:	d02c      	beq.n	401b24 <xTaskPriorityDisinherit+0x70>
  401aca:	bb5a      	cbnz	r2, 401b24 <xTaskPriorityDisinherit+0x70>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401acc:	1d25      	adds	r5, r4, #4
  401ace:	4628      	mov	r0, r5
  401ad0:	4b15      	ldr	r3, [pc, #84]	; (401b28 <xTaskPriorityDisinherit+0x74>)
  401ad2:	4798      	blx	r3
  401ad4:	b970      	cbnz	r0, 401af4 <xTaskPriorityDisinherit+0x40>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401ad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ad8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401adc:	4a13      	ldr	r2, [pc, #76]	; (401b2c <xTaskPriorityDisinherit+0x78>)
  401ade:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401ae2:	b93a      	cbnz	r2, 401af4 <xTaskPriorityDisinherit+0x40>
  401ae4:	4812      	ldr	r0, [pc, #72]	; (401b30 <xTaskPriorityDisinherit+0x7c>)
  401ae6:	6802      	ldr	r2, [r0, #0]
  401ae8:	2101      	movs	r1, #1
  401aea:	fa01 f303 	lsl.w	r3, r1, r3
  401aee:	ea22 0303 	bic.w	r3, r2, r3
  401af2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401af4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401af6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401af8:	f1c0 0305 	rsb	r3, r0, #5
  401afc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401afe:	4a0c      	ldr	r2, [pc, #48]	; (401b30 <xTaskPriorityDisinherit+0x7c>)
  401b00:	6811      	ldr	r1, [r2, #0]
  401b02:	2401      	movs	r4, #1
  401b04:	fa04 f300 	lsl.w	r3, r4, r0
  401b08:	430b      	orrs	r3, r1
  401b0a:	6013      	str	r3, [r2, #0]
  401b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b10:	4629      	mov	r1, r5
  401b12:	4b06      	ldr	r3, [pc, #24]	; (401b2c <xTaskPriorityDisinherit+0x78>)
  401b14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b18:	4b06      	ldr	r3, [pc, #24]	; (401b34 <xTaskPriorityDisinherit+0x80>)
  401b1a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401b1c:	4620      	mov	r0, r4
  401b1e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401b20:	2000      	movs	r0, #0
  401b22:	4770      	bx	lr
  401b24:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401b26:	bd38      	pop	{r3, r4, r5, pc}
  401b28:	004007ad 	.word	0x004007ad
  401b2c:	2040c404 	.word	0x2040c404
  401b30:	2040c47c 	.word	0x2040c47c
  401b34:	00400761 	.word	0x00400761

00401b38 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401b38:	4b05      	ldr	r3, [pc, #20]	; (401b50 <pvTaskIncrementMutexHeldCount+0x18>)
  401b3a:	681b      	ldr	r3, [r3, #0]
  401b3c:	b123      	cbz	r3, 401b48 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401b3e:	4b04      	ldr	r3, [pc, #16]	; (401b50 <pvTaskIncrementMutexHeldCount+0x18>)
  401b40:	681a      	ldr	r2, [r3, #0]
  401b42:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401b44:	3301      	adds	r3, #1
  401b46:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401b48:	4b01      	ldr	r3, [pc, #4]	; (401b50 <pvTaskIncrementMutexHeldCount+0x18>)
  401b4a:	6818      	ldr	r0, [r3, #0]
	}
  401b4c:	4770      	bx	lr
  401b4e:	bf00      	nop
  401b50:	2040c3f8 	.word	0x2040c3f8

00401b54 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401b54:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401b56:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401b58:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401b5a:	4291      	cmp	r1, r2
  401b5c:	d80c      	bhi.n	401b78 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401b5e:	1ad2      	subs	r2, r2, r3
  401b60:	6983      	ldr	r3, [r0, #24]
  401b62:	429a      	cmp	r2, r3
  401b64:	d301      	bcc.n	401b6a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401b66:	2001      	movs	r0, #1
  401b68:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401b6a:	1d01      	adds	r1, r0, #4
  401b6c:	4b09      	ldr	r3, [pc, #36]	; (401b94 <prvInsertTimerInActiveList+0x40>)
  401b6e:	6818      	ldr	r0, [r3, #0]
  401b70:	4b09      	ldr	r3, [pc, #36]	; (401b98 <prvInsertTimerInActiveList+0x44>)
  401b72:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b74:	2000      	movs	r0, #0
  401b76:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401b78:	429a      	cmp	r2, r3
  401b7a:	d203      	bcs.n	401b84 <prvInsertTimerInActiveList+0x30>
  401b7c:	4299      	cmp	r1, r3
  401b7e:	d301      	bcc.n	401b84 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401b80:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401b82:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401b84:	1d01      	adds	r1, r0, #4
  401b86:	4b05      	ldr	r3, [pc, #20]	; (401b9c <prvInsertTimerInActiveList+0x48>)
  401b88:	6818      	ldr	r0, [r3, #0]
  401b8a:	4b03      	ldr	r3, [pc, #12]	; (401b98 <prvInsertTimerInActiveList+0x44>)
  401b8c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b8e:	2000      	movs	r0, #0
  401b90:	bd08      	pop	{r3, pc}
  401b92:	bf00      	nop
  401b94:	2040c4fc 	.word	0x2040c4fc
  401b98:	00400779 	.word	0x00400779
  401b9c:	2040c4f8 	.word	0x2040c4f8

00401ba0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401ba0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401ba2:	4b10      	ldr	r3, [pc, #64]	; (401be4 <prvCheckForValidListAndQueue+0x44>)
  401ba4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401ba6:	4b10      	ldr	r3, [pc, #64]	; (401be8 <prvCheckForValidListAndQueue+0x48>)
  401ba8:	681b      	ldr	r3, [r3, #0]
  401baa:	b113      	cbz	r3, 401bb2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401bac:	4b0f      	ldr	r3, [pc, #60]	; (401bec <prvCheckForValidListAndQueue+0x4c>)
  401bae:	4798      	blx	r3
  401bb0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401bb2:	4d0f      	ldr	r5, [pc, #60]	; (401bf0 <prvCheckForValidListAndQueue+0x50>)
  401bb4:	4628      	mov	r0, r5
  401bb6:	4e0f      	ldr	r6, [pc, #60]	; (401bf4 <prvCheckForValidListAndQueue+0x54>)
  401bb8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401bba:	4c0f      	ldr	r4, [pc, #60]	; (401bf8 <prvCheckForValidListAndQueue+0x58>)
  401bbc:	4620      	mov	r0, r4
  401bbe:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401bc0:	4b0e      	ldr	r3, [pc, #56]	; (401bfc <prvCheckForValidListAndQueue+0x5c>)
  401bc2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401bc4:	4b0e      	ldr	r3, [pc, #56]	; (401c00 <prvCheckForValidListAndQueue+0x60>)
  401bc6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401bc8:	2200      	movs	r2, #0
  401bca:	2110      	movs	r1, #16
  401bcc:	2005      	movs	r0, #5
  401bce:	4b0d      	ldr	r3, [pc, #52]	; (401c04 <prvCheckForValidListAndQueue+0x64>)
  401bd0:	4798      	blx	r3
  401bd2:	4b05      	ldr	r3, [pc, #20]	; (401be8 <prvCheckForValidListAndQueue+0x48>)
  401bd4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401bd6:	2800      	cmp	r0, #0
  401bd8:	d0e8      	beq.n	401bac <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401bda:	490b      	ldr	r1, [pc, #44]	; (401c08 <prvCheckForValidListAndQueue+0x68>)
  401bdc:	4b0b      	ldr	r3, [pc, #44]	; (401c0c <prvCheckForValidListAndQueue+0x6c>)
  401bde:	4798      	blx	r3
  401be0:	e7e4      	b.n	401bac <prvCheckForValidListAndQueue+0xc>
  401be2:	bf00      	nop
  401be4:	00400869 	.word	0x00400869
  401be8:	2040c52c 	.word	0x2040c52c
  401bec:	0040088d 	.word	0x0040088d
  401bf0:	2040c500 	.word	0x2040c500
  401bf4:	00400745 	.word	0x00400745
  401bf8:	2040c514 	.word	0x2040c514
  401bfc:	2040c4f8 	.word	0x2040c4f8
  401c00:	2040c4fc 	.word	0x2040c4fc
  401c04:	00400c3d 	.word	0x00400c3d
  401c08:	00407114 	.word	0x00407114
  401c0c:	00401085 	.word	0x00401085

00401c10 <xTimerCreateTimerTask>:
{
  401c10:	b510      	push	{r4, lr}
  401c12:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401c14:	4b0a      	ldr	r3, [pc, #40]	; (401c40 <xTimerCreateTimerTask+0x30>)
  401c16:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401c18:	4b0a      	ldr	r3, [pc, #40]	; (401c44 <xTimerCreateTimerTask+0x34>)
  401c1a:	681b      	ldr	r3, [r3, #0]
  401c1c:	b16b      	cbz	r3, 401c3a <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401c1e:	2300      	movs	r3, #0
  401c20:	9303      	str	r3, [sp, #12]
  401c22:	9302      	str	r3, [sp, #8]
  401c24:	9301      	str	r3, [sp, #4]
  401c26:	2204      	movs	r2, #4
  401c28:	9200      	str	r2, [sp, #0]
  401c2a:	f44f 7282 	mov.w	r2, #260	; 0x104
  401c2e:	4906      	ldr	r1, [pc, #24]	; (401c48 <xTimerCreateTimerTask+0x38>)
  401c30:	4806      	ldr	r0, [pc, #24]	; (401c4c <xTimerCreateTimerTask+0x3c>)
  401c32:	4c07      	ldr	r4, [pc, #28]	; (401c50 <xTimerCreateTimerTask+0x40>)
  401c34:	47a0      	blx	r4
}
  401c36:	b004      	add	sp, #16
  401c38:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  401c3a:	2000      	movs	r0, #0
	return xReturn;
  401c3c:	e7fb      	b.n	401c36 <xTimerCreateTimerTask+0x26>
  401c3e:	bf00      	nop
  401c40:	00401ba1 	.word	0x00401ba1
  401c44:	2040c52c 	.word	0x2040c52c
  401c48:	0040711c 	.word	0x0040711c
  401c4c:	00401d51 	.word	0x00401d51
  401c50:	00401195 	.word	0x00401195

00401c54 <xTimerGenericCommand>:
{
  401c54:	b530      	push	{r4, r5, lr}
  401c56:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  401c58:	4c10      	ldr	r4, [pc, #64]	; (401c9c <xTimerGenericCommand+0x48>)
  401c5a:	6825      	ldr	r5, [r4, #0]
  401c5c:	b1dd      	cbz	r5, 401c96 <xTimerGenericCommand+0x42>
  401c5e:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  401c60:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401c62:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401c64:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401c66:	2905      	cmp	r1, #5
  401c68:	dc0e      	bgt.n	401c88 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401c6a:	4b0d      	ldr	r3, [pc, #52]	; (401ca0 <xTimerGenericCommand+0x4c>)
  401c6c:	4798      	blx	r3
  401c6e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401c70:	f04f 0300 	mov.w	r3, #0
  401c74:	bf0c      	ite	eq
  401c76:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401c78:	461a      	movne	r2, r3
  401c7a:	4669      	mov	r1, sp
  401c7c:	4807      	ldr	r0, [pc, #28]	; (401c9c <xTimerGenericCommand+0x48>)
  401c7e:	6800      	ldr	r0, [r0, #0]
  401c80:	4c08      	ldr	r4, [pc, #32]	; (401ca4 <xTimerGenericCommand+0x50>)
  401c82:	47a0      	blx	r4
}
  401c84:	b005      	add	sp, #20
  401c86:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401c88:	2300      	movs	r3, #0
  401c8a:	4622      	mov	r2, r4
  401c8c:	4669      	mov	r1, sp
  401c8e:	4628      	mov	r0, r5
  401c90:	4c05      	ldr	r4, [pc, #20]	; (401ca8 <xTimerGenericCommand+0x54>)
  401c92:	47a0      	blx	r4
  401c94:	e7f6      	b.n	401c84 <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  401c96:	2000      	movs	r0, #0
	return xReturn;
  401c98:	e7f4      	b.n	401c84 <xTimerGenericCommand+0x30>
  401c9a:	bf00      	nop
  401c9c:	2040c52c 	.word	0x2040c52c
  401ca0:	004019f1 	.word	0x004019f1
  401ca4:	00400c8d 	.word	0x00400c8d
  401ca8:	00400df9 	.word	0x00400df9

00401cac <prvSampleTimeNow>:
{
  401cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401cb0:	b082      	sub	sp, #8
  401cb2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401cb4:	4b1f      	ldr	r3, [pc, #124]	; (401d34 <prvSampleTimeNow+0x88>)
  401cb6:	4798      	blx	r3
  401cb8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401cba:	4b1f      	ldr	r3, [pc, #124]	; (401d38 <prvSampleTimeNow+0x8c>)
  401cbc:	681b      	ldr	r3, [r3, #0]
  401cbe:	4298      	cmp	r0, r3
  401cc0:	d310      	bcc.n	401ce4 <prvSampleTimeNow+0x38>
		*pxTimerListsWereSwitched = pdFALSE;
  401cc2:	2300      	movs	r3, #0
  401cc4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401cc8:	4b1b      	ldr	r3, [pc, #108]	; (401d38 <prvSampleTimeNow+0x8c>)
  401cca:	601f      	str	r7, [r3, #0]
}
  401ccc:	4638      	mov	r0, r7
  401cce:	b002      	add	sp, #8
  401cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401cd4:	2100      	movs	r1, #0
  401cd6:	9100      	str	r1, [sp, #0]
  401cd8:	460b      	mov	r3, r1
  401cda:	4652      	mov	r2, sl
  401cdc:	4620      	mov	r0, r4
  401cde:	4c17      	ldr	r4, [pc, #92]	; (401d3c <prvSampleTimeNow+0x90>)
  401ce0:	47a0      	blx	r4
  401ce2:	e001      	b.n	401ce8 <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ce4:	4d16      	ldr	r5, [pc, #88]	; (401d40 <prvSampleTimeNow+0x94>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401ce6:	4e17      	ldr	r6, [pc, #92]	; (401d44 <prvSampleTimeNow+0x98>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ce8:	682b      	ldr	r3, [r5, #0]
  401cea:	681a      	ldr	r2, [r3, #0]
  401cec:	b1c2      	cbz	r2, 401d20 <prvSampleTimeNow+0x74>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401cee:	68db      	ldr	r3, [r3, #12]
  401cf0:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401cf4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401cf6:	f104 0904 	add.w	r9, r4, #4
  401cfa:	4648      	mov	r0, r9
  401cfc:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d00:	4620      	mov	r0, r4
  401d02:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401d04:	69e3      	ldr	r3, [r4, #28]
  401d06:	2b01      	cmp	r3, #1
  401d08:	d1ee      	bne.n	401ce8 <prvSampleTimeNow+0x3c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401d0a:	69a3      	ldr	r3, [r4, #24]
  401d0c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401d0e:	459a      	cmp	sl, r3
  401d10:	d2e0      	bcs.n	401cd4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401d12:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d14:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d16:	4649      	mov	r1, r9
  401d18:	6828      	ldr	r0, [r5, #0]
  401d1a:	4b0b      	ldr	r3, [pc, #44]	; (401d48 <prvSampleTimeNow+0x9c>)
  401d1c:	4798      	blx	r3
  401d1e:	e7e3      	b.n	401ce8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
  401d20:	4a0a      	ldr	r2, [pc, #40]	; (401d4c <prvSampleTimeNow+0xa0>)
  401d22:	6810      	ldr	r0, [r2, #0]
  401d24:	4906      	ldr	r1, [pc, #24]	; (401d40 <prvSampleTimeNow+0x94>)
  401d26:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401d28:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401d2a:	2301      	movs	r3, #1
  401d2c:	f8c8 3000 	str.w	r3, [r8]
  401d30:	e7ca      	b.n	401cc8 <prvSampleTimeNow+0x1c>
  401d32:	bf00      	nop
  401d34:	00401419 	.word	0x00401419
  401d38:	2040c528 	.word	0x2040c528
  401d3c:	00401c55 	.word	0x00401c55
  401d40:	2040c4f8 	.word	0x2040c4f8
  401d44:	004007ad 	.word	0x004007ad
  401d48:	00400779 	.word	0x00400779
  401d4c:	2040c4fc 	.word	0x2040c4fc

00401d50 <prvTimerTask>:
{
  401d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d54:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401d56:	4e63      	ldr	r6, [pc, #396]	; (401ee4 <prvTimerTask+0x194>)
	vTaskSuspendAll();
  401d58:	4f63      	ldr	r7, [pc, #396]	; (401ee8 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401d5a:	4d64      	ldr	r5, [pc, #400]	; (401eec <prvTimerTask+0x19c>)
					portYIELD_WITHIN_API();
  401d5c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401f10 <prvTimerTask+0x1c0>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 401f14 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401d64:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401d66:	681a      	ldr	r2, [r3, #0]
  401d68:	2a00      	cmp	r2, #0
  401d6a:	f000 80a9 	beq.w	401ec0 <prvTimerTask+0x170>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d6e:	68db      	ldr	r3, [r3, #12]
  401d70:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  401d74:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401d76:	a804      	add	r0, sp, #16
  401d78:	4b5d      	ldr	r3, [pc, #372]	; (401ef0 <prvTimerTask+0x1a0>)
  401d7a:	4798      	blx	r3
  401d7c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401d7e:	9b04      	ldr	r3, [sp, #16]
  401d80:	2b00      	cmp	r3, #0
  401d82:	d137      	bne.n	401df4 <prvTimerTask+0xa4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401d84:	4550      	cmp	r0, sl
  401d86:	d211      	bcs.n	401dac <prvTimerTask+0x5c>
  401d88:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401d8a:	ebaa 0104 	sub.w	r1, sl, r4
  401d8e:	6828      	ldr	r0, [r5, #0]
  401d90:	4b58      	ldr	r3, [pc, #352]	; (401ef4 <prvTimerTask+0x1a4>)
  401d92:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401d94:	4b58      	ldr	r3, [pc, #352]	; (401ef8 <prvTimerTask+0x1a8>)
  401d96:	4798      	blx	r3
  401d98:	bb70      	cbnz	r0, 401df8 <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
  401d9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d9e:	f8c9 3000 	str.w	r3, [r9]
  401da2:	f3bf 8f4f 	dsb	sy
  401da6:	f3bf 8f6f 	isb	sy
  401daa:	e025      	b.n	401df8 <prvTimerTask+0xa8>
				( void ) xTaskResumeAll();
  401dac:	4b52      	ldr	r3, [pc, #328]	; (401ef8 <prvTimerTask+0x1a8>)
  401dae:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401db0:	6833      	ldr	r3, [r6, #0]
  401db2:	68db      	ldr	r3, [r3, #12]
  401db4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401db8:	f10b 0004 	add.w	r0, fp, #4
  401dbc:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401dbe:	f8db 301c 	ldr.w	r3, [fp, #28]
  401dc2:	2b01      	cmp	r3, #1
  401dc4:	d004      	beq.n	401dd0 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401dc6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  401dca:	4658      	mov	r0, fp
  401dcc:	4798      	blx	r3
  401dce:	e013      	b.n	401df8 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401dd0:	f8db 1018 	ldr.w	r1, [fp, #24]
  401dd4:	4653      	mov	r3, sl
  401dd6:	4622      	mov	r2, r4
  401dd8:	4451      	add	r1, sl
  401dda:	4658      	mov	r0, fp
  401ddc:	4c47      	ldr	r4, [pc, #284]	; (401efc <prvTimerTask+0x1ac>)
  401dde:	47a0      	blx	r4
  401de0:	2801      	cmp	r0, #1
  401de2:	d1f0      	bne.n	401dc6 <prvTimerTask+0x76>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401de4:	2100      	movs	r1, #0
  401de6:	9100      	str	r1, [sp, #0]
  401de8:	460b      	mov	r3, r1
  401dea:	4652      	mov	r2, sl
  401dec:	4658      	mov	r0, fp
  401dee:	4c44      	ldr	r4, [pc, #272]	; (401f00 <prvTimerTask+0x1b0>)
  401df0:	47a0      	blx	r4
  401df2:	e7e8      	b.n	401dc6 <prvTimerTask+0x76>
			( void ) xTaskResumeAll();
  401df4:	4b40      	ldr	r3, [pc, #256]	; (401ef8 <prvTimerTask+0x1a8>)
  401df6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401df8:	4c42      	ldr	r4, [pc, #264]	; (401f04 <prvTimerTask+0x1b4>)
  401dfa:	e006      	b.n	401e0a <prvTimerTask+0xba>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401dfc:	9907      	ldr	r1, [sp, #28]
  401dfe:	9806      	ldr	r0, [sp, #24]
  401e00:	9b05      	ldr	r3, [sp, #20]
  401e02:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401e04:	9b04      	ldr	r3, [sp, #16]
  401e06:	2b00      	cmp	r3, #0
  401e08:	da09      	bge.n	401e1e <prvTimerTask+0xce>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e0a:	2300      	movs	r3, #0
  401e0c:	461a      	mov	r2, r3
  401e0e:	a904      	add	r1, sp, #16
  401e10:	6828      	ldr	r0, [r5, #0]
  401e12:	47a0      	blx	r4
  401e14:	2800      	cmp	r0, #0
  401e16:	d0a5      	beq.n	401d64 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401e18:	9b04      	ldr	r3, [sp, #16]
  401e1a:	2b00      	cmp	r3, #0
  401e1c:	dbee      	blt.n	401dfc <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401e1e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401e22:	f8da 3014 	ldr.w	r3, [sl, #20]
  401e26:	b113      	cbz	r3, 401e2e <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e28:	f10a 0004 	add.w	r0, sl, #4
  401e2c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e2e:	a803      	add	r0, sp, #12
  401e30:	4b2f      	ldr	r3, [pc, #188]	; (401ef0 <prvTimerTask+0x1a0>)
  401e32:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401e34:	9b04      	ldr	r3, [sp, #16]
  401e36:	2b09      	cmp	r3, #9
  401e38:	d8e7      	bhi.n	401e0a <prvTimerTask+0xba>
  401e3a:	a201      	add	r2, pc, #4	; (adr r2, 401e40 <prvTimerTask+0xf0>)
  401e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e40:	00401e69 	.word	0x00401e69
  401e44:	00401e69 	.word	0x00401e69
  401e48:	00401e69 	.word	0x00401e69
  401e4c:	00401e0b 	.word	0x00401e0b
  401e50:	00401ea5 	.word	0x00401ea5
  401e54:	00401eb9 	.word	0x00401eb9
  401e58:	00401e69 	.word	0x00401e69
  401e5c:	00401e69 	.word	0x00401e69
  401e60:	00401e0b 	.word	0x00401e0b
  401e64:	00401ea5 	.word	0x00401ea5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401e68:	9c05      	ldr	r4, [sp, #20]
  401e6a:	f8da 1018 	ldr.w	r1, [sl, #24]
  401e6e:	4623      	mov	r3, r4
  401e70:	4602      	mov	r2, r0
  401e72:	4421      	add	r1, r4
  401e74:	4650      	mov	r0, sl
  401e76:	4c21      	ldr	r4, [pc, #132]	; (401efc <prvTimerTask+0x1ac>)
  401e78:	47a0      	blx	r4
  401e7a:	2801      	cmp	r0, #1
  401e7c:	d1bc      	bne.n	401df8 <prvTimerTask+0xa8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e7e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401e82:	4650      	mov	r0, sl
  401e84:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401e86:	f8da 301c 	ldr.w	r3, [sl, #28]
  401e8a:	2b01      	cmp	r3, #1
  401e8c:	d1b4      	bne.n	401df8 <prvTimerTask+0xa8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401e8e:	f8da 2018 	ldr.w	r2, [sl, #24]
  401e92:	2100      	movs	r1, #0
  401e94:	9100      	str	r1, [sp, #0]
  401e96:	460b      	mov	r3, r1
  401e98:	9805      	ldr	r0, [sp, #20]
  401e9a:	4402      	add	r2, r0
  401e9c:	4650      	mov	r0, sl
  401e9e:	4c18      	ldr	r4, [pc, #96]	; (401f00 <prvTimerTask+0x1b0>)
  401ea0:	47a0      	blx	r4
  401ea2:	e7a9      	b.n	401df8 <prvTimerTask+0xa8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401ea4:	9905      	ldr	r1, [sp, #20]
  401ea6:	f8ca 1018 	str.w	r1, [sl, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401eaa:	4603      	mov	r3, r0
  401eac:	4602      	mov	r2, r0
  401eae:	4401      	add	r1, r0
  401eb0:	4650      	mov	r0, sl
  401eb2:	4c12      	ldr	r4, [pc, #72]	; (401efc <prvTimerTask+0x1ac>)
  401eb4:	47a0      	blx	r4
  401eb6:	e79f      	b.n	401df8 <prvTimerTask+0xa8>
					vPortFree( pxTimer );
  401eb8:	4650      	mov	r0, sl
  401eba:	4b13      	ldr	r3, [pc, #76]	; (401f08 <prvTimerTask+0x1b8>)
  401ebc:	4798      	blx	r3
  401ebe:	e79b      	b.n	401df8 <prvTimerTask+0xa8>
	vTaskSuspendAll();
  401ec0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401ec2:	a804      	add	r0, sp, #16
  401ec4:	4b0a      	ldr	r3, [pc, #40]	; (401ef0 <prvTimerTask+0x1a0>)
  401ec6:	4798      	blx	r3
  401ec8:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401eca:	9b04      	ldr	r3, [sp, #16]
  401ecc:	2b00      	cmp	r3, #0
  401ece:	d191      	bne.n	401df4 <prvTimerTask+0xa4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401ed0:	4b0e      	ldr	r3, [pc, #56]	; (401f0c <prvTimerTask+0x1bc>)
  401ed2:	681b      	ldr	r3, [r3, #0]
  401ed4:	681a      	ldr	r2, [r3, #0]
  401ed6:	fab2 f282 	clz	r2, r2
  401eda:	0952      	lsrs	r2, r2, #5
  401edc:	f04f 0a00 	mov.w	sl, #0
  401ee0:	e753      	b.n	401d8a <prvTimerTask+0x3a>
  401ee2:	bf00      	nop
  401ee4:	2040c4f8 	.word	0x2040c4f8
  401ee8:	00401409 	.word	0x00401409
  401eec:	2040c52c 	.word	0x2040c52c
  401ef0:	00401cad 	.word	0x00401cad
  401ef4:	004010b9 	.word	0x004010b9
  401ef8:	0040155d 	.word	0x0040155d
  401efc:	00401b55 	.word	0x00401b55
  401f00:	00401c55 	.word	0x00401c55
  401f04:	00400f09 	.word	0x00400f09
  401f08:	00400a19 	.word	0x00400a19
  401f0c:	2040c4fc 	.word	0x2040c4fc
  401f10:	e000ed04 	.word	0xe000ed04
  401f14:	004007ad 	.word	0x004007ad

00401f18 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401f18:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401f1a:	4810      	ldr	r0, [pc, #64]	; (401f5c <sysclk_init+0x44>)
  401f1c:	4b10      	ldr	r3, [pc, #64]	; (401f60 <sysclk_init+0x48>)
  401f1e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401f20:	213e      	movs	r1, #62	; 0x3e
  401f22:	2000      	movs	r0, #0
  401f24:	4b0f      	ldr	r3, [pc, #60]	; (401f64 <sysclk_init+0x4c>)
  401f26:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401f28:	4c0f      	ldr	r4, [pc, #60]	; (401f68 <sysclk_init+0x50>)
  401f2a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401f2c:	2800      	cmp	r0, #0
  401f2e:	d0fc      	beq.n	401f2a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401f30:	4b0e      	ldr	r3, [pc, #56]	; (401f6c <sysclk_init+0x54>)
  401f32:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401f34:	4a0e      	ldr	r2, [pc, #56]	; (401f70 <sysclk_init+0x58>)
  401f36:	4b0f      	ldr	r3, [pc, #60]	; (401f74 <sysclk_init+0x5c>)
  401f38:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401f3a:	4c0f      	ldr	r4, [pc, #60]	; (401f78 <sysclk_init+0x60>)
  401f3c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401f3e:	2800      	cmp	r0, #0
  401f40:	d0fc      	beq.n	401f3c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401f42:	2002      	movs	r0, #2
  401f44:	4b0d      	ldr	r3, [pc, #52]	; (401f7c <sysclk_init+0x64>)
  401f46:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401f48:	2000      	movs	r0, #0
  401f4a:	4b0d      	ldr	r3, [pc, #52]	; (401f80 <sysclk_init+0x68>)
  401f4c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401f4e:	4b0d      	ldr	r3, [pc, #52]	; (401f84 <sysclk_init+0x6c>)
  401f50:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401f52:	4802      	ldr	r0, [pc, #8]	; (401f5c <sysclk_init+0x44>)
  401f54:	4b02      	ldr	r3, [pc, #8]	; (401f60 <sysclk_init+0x48>)
  401f56:	4798      	blx	r3
  401f58:	bd10      	pop	{r4, pc}
  401f5a:	bf00      	nop
  401f5c:	11e1a300 	.word	0x11e1a300
  401f60:	00402ca1 	.word	0x00402ca1
  401f64:	00402769 	.word	0x00402769
  401f68:	004027bd 	.word	0x004027bd
  401f6c:	004027cd 	.word	0x004027cd
  401f70:	20183f01 	.word	0x20183f01
  401f74:	400e0600 	.word	0x400e0600
  401f78:	004027dd 	.word	0x004027dd
  401f7c:	004026cd 	.word	0x004026cd
  401f80:	00402705 	.word	0x00402705
  401f84:	00402b95 	.word	0x00402b95

00401f88 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401f8c:	b980      	cbnz	r0, 401fb0 <_read+0x28>
  401f8e:	460c      	mov	r4, r1
  401f90:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401f92:	2a00      	cmp	r2, #0
  401f94:	dd0f      	ble.n	401fb6 <_read+0x2e>
  401f96:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401f98:	4e08      	ldr	r6, [pc, #32]	; (401fbc <_read+0x34>)
  401f9a:	4d09      	ldr	r5, [pc, #36]	; (401fc0 <_read+0x38>)
  401f9c:	6830      	ldr	r0, [r6, #0]
  401f9e:	4621      	mov	r1, r4
  401fa0:	682b      	ldr	r3, [r5, #0]
  401fa2:	4798      	blx	r3
		ptr++;
  401fa4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401fa6:	42bc      	cmp	r4, r7
  401fa8:	d1f8      	bne.n	401f9c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401faa:	4640      	mov	r0, r8
  401fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401fb0:	f04f 38ff 	mov.w	r8, #4294967295
  401fb4:	e7f9      	b.n	401faa <_read+0x22>
	for (; len > 0; --len) {
  401fb6:	4680      	mov	r8, r0
  401fb8:	e7f7      	b.n	401faa <_read+0x22>
  401fba:	bf00      	nop
  401fbc:	2040c628 	.word	0x2040c628
  401fc0:	2040c620 	.word	0x2040c620

00401fc4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401fc4:	3801      	subs	r0, #1
  401fc6:	2802      	cmp	r0, #2
  401fc8:	d815      	bhi.n	401ff6 <_write+0x32>
{
  401fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fce:	460e      	mov	r6, r1
  401fd0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401fd2:	b19a      	cbz	r2, 401ffc <_write+0x38>
  401fd4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401fd6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402010 <_write+0x4c>
  401fda:	4f0c      	ldr	r7, [pc, #48]	; (40200c <_write+0x48>)
  401fdc:	f8d8 0000 	ldr.w	r0, [r8]
  401fe0:	f815 1b01 	ldrb.w	r1, [r5], #1
  401fe4:	683b      	ldr	r3, [r7, #0]
  401fe6:	4798      	blx	r3
  401fe8:	2800      	cmp	r0, #0
  401fea:	db0a      	blt.n	402002 <_write+0x3e>
  401fec:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401fee:	3c01      	subs	r4, #1
  401ff0:	d1f4      	bne.n	401fdc <_write+0x18>
  401ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401ff6:	f04f 30ff 	mov.w	r0, #4294967295
  401ffa:	4770      	bx	lr
	for (; len != 0; --len) {
  401ffc:	4610      	mov	r0, r2
  401ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  402002:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40200a:	bf00      	nop
  40200c:	2040c624 	.word	0x2040c624
  402010:	2040c628 	.word	0x2040c628

00402014 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402016:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40201a:	4bb8      	ldr	r3, [pc, #736]	; (4022fc <board_init+0x2e8>)
  40201c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40201e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402022:	4fb7      	ldr	r7, [pc, #732]	; (402300 <board_init+0x2ec>)
  402024:	4638      	mov	r0, r7
  402026:	4db7      	ldr	r5, [pc, #732]	; (402304 <board_init+0x2f0>)
  402028:	47a8      	blx	r5
	dw_region_attr =
  40202a:	4eb7      	ldr	r6, [pc, #732]	; (402308 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40202c:	ea40 0106 	orr.w	r1, r0, r6
  402030:	2011      	movs	r0, #17
  402032:	4cb6      	ldr	r4, [pc, #728]	; (40230c <board_init+0x2f8>)
  402034:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  402036:	48b6      	ldr	r0, [pc, #728]	; (402310 <board_init+0x2fc>)
  402038:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40203a:	49b6      	ldr	r1, [pc, #728]	; (402314 <board_init+0x300>)
  40203c:	4301      	orrs	r1, r0
  40203e:	48b6      	ldr	r0, [pc, #728]	; (402318 <board_init+0x304>)
  402040:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  402042:	4638      	mov	r0, r7
  402044:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402046:	ea40 0106 	orr.w	r1, r0, r6
  40204a:	48b4      	ldr	r0, [pc, #720]	; (40231c <board_init+0x308>)
  40204c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  40204e:	48b4      	ldr	r0, [pc, #720]	; (402320 <board_init+0x30c>)
  402050:	47a8      	blx	r5
	dw_region_attr =
  402052:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  402056:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40205a:	ea40 0106 	orr.w	r1, r0, r6
  40205e:	48b1      	ldr	r0, [pc, #708]	; (402324 <board_init+0x310>)
  402060:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  402062:	48b1      	ldr	r0, [pc, #708]	; (402328 <board_init+0x314>)
  402064:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402066:	ea40 0106 	orr.w	r1, r0, r6
  40206a:	48b0      	ldr	r0, [pc, #704]	; (40232c <board_init+0x318>)
  40206c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  40206e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  402072:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  402074:	4eae      	ldr	r6, [pc, #696]	; (402330 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402076:	ea40 0106 	orr.w	r1, r0, r6
  40207a:	48ae      	ldr	r0, [pc, #696]	; (402334 <board_init+0x320>)
  40207c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  40207e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  402082:	47a8      	blx	r5
	dw_region_attr =
  402084:	4fac      	ldr	r7, [pc, #688]	; (402338 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402086:	ea40 0107 	orr.w	r1, r0, r7
  40208a:	48ac      	ldr	r0, [pc, #688]	; (40233c <board_init+0x328>)
  40208c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  40208e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  402092:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402094:	49aa      	ldr	r1, [pc, #680]	; (402340 <board_init+0x32c>)
  402096:	4301      	orrs	r1, r0
  402098:	48aa      	ldr	r0, [pc, #680]	; (402344 <board_init+0x330>)
  40209a:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  40209c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4020a0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4020a2:	ea40 0107 	orr.w	r1, r0, r7
  4020a6:	48a8      	ldr	r0, [pc, #672]	; (402348 <board_init+0x334>)
  4020a8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  4020aa:	48a8      	ldr	r0, [pc, #672]	; (40234c <board_init+0x338>)
  4020ac:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4020ae:	ea40 0106 	orr.w	r1, r0, r6
  4020b2:	48a7      	ldr	r0, [pc, #668]	; (402350 <board_init+0x33c>)
  4020b4:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4020b6:	4ca7      	ldr	r4, [pc, #668]	; (402354 <board_init+0x340>)
  4020b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4020be:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4020c0:	2005      	movs	r0, #5
  4020c2:	4ba5      	ldr	r3, [pc, #660]	; (402358 <board_init+0x344>)
  4020c4:	4798      	blx	r3
  __ASM volatile ("dsb");
  4020c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020ca:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4020ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020d2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4020d6:	2300      	movs	r3, #0
  4020d8:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4020dc:	6963      	ldr	r3, [r4, #20]
  4020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4020e2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4020e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020e8:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4020ec:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4020f0:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4020f4:	f007 0007 	and.w	r0, r7, #7
  4020f8:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4020fa:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4020fe:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  402102:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  402106:	f3bf 8f4f 	dsb	sy
  40210a:	f04f 34ff 	mov.w	r4, #4294967295
  40210e:	fa04 fc00 	lsl.w	ip, r4, r0
  402112:	fa06 f000 	lsl.w	r0, r6, r0
  402116:	fa04 f40e 	lsl.w	r4, r4, lr
  40211a:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40211e:	4d8d      	ldr	r5, [pc, #564]	; (402354 <board_init+0x340>)
         int32_t tmpways = ways;
  402120:	463a      	mov	r2, r7
  402122:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  402124:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  402128:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40212c:	3a01      	subs	r2, #1
  40212e:	4423      	add	r3, r4
  402130:	f1b2 3fff 	cmp.w	r2, #4294967295
  402134:	d1f6      	bne.n	402124 <board_init+0x110>
        } while(sets--);
  402136:	3e01      	subs	r6, #1
  402138:	4460      	add	r0, ip
  40213a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40213e:	d1ef      	bne.n	402120 <board_init+0x10c>
  402140:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402144:	4b83      	ldr	r3, [pc, #524]	; (402354 <board_init+0x340>)
  402146:	695a      	ldr	r2, [r3, #20]
  402148:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40214c:	615a      	str	r2, [r3, #20]
  40214e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402152:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402156:	4a81      	ldr	r2, [pc, #516]	; (40235c <board_init+0x348>)
  402158:	4981      	ldr	r1, [pc, #516]	; (402360 <board_init+0x34c>)
  40215a:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40215c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402160:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  402162:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402166:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40216a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40216e:	f022 0201 	bic.w	r2, r2, #1
  402172:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402176:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40217a:	f022 0201 	bic.w	r2, r2, #1
  40217e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  402182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402186:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40218a:	200a      	movs	r0, #10
  40218c:	4c75      	ldr	r4, [pc, #468]	; (402364 <board_init+0x350>)
  40218e:	47a0      	blx	r4
  402190:	200b      	movs	r0, #11
  402192:	47a0      	blx	r4
  402194:	200c      	movs	r0, #12
  402196:	47a0      	blx	r4
  402198:	2010      	movs	r0, #16
  40219a:	47a0      	blx	r4
  40219c:	2011      	movs	r0, #17
  40219e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021a0:	4a71      	ldr	r2, [pc, #452]	; (402368 <board_init+0x354>)
  4021a2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4021a6:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021a8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4021ac:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021ae:	4b6f      	ldr	r3, [pc, #444]	; (40236c <board_init+0x358>)
  4021b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4021b4:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021b6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4021ba:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4021bc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4021c0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4021c2:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4021c4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4021c8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4021ca:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  4021ce:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4021d0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4021d2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  4021d6:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4021d8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4021dc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4021e0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4021e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4021e8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4021ea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4021ee:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4021f0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4021f2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4021f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4021f8:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  4021fc:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4021fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402200:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  402204:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402206:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402208:	4859      	ldr	r0, [pc, #356]	; (402370 <board_init+0x35c>)
  40220a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  40220e:	f041 0110 	orr.w	r1, r1, #16
  402212:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  402216:	4957      	ldr	r1, [pc, #348]	; (402374 <board_init+0x360>)
  402218:	2010      	movs	r0, #16
  40221a:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40221c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  402220:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  402222:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402224:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402228:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  40222a:	4304      	orrs	r4, r0
  40222c:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40222e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  402230:	4304      	orrs	r4, r0
  402232:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402234:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  402236:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40223a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40223c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402240:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402242:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402244:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402248:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40224a:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  40224e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402250:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402252:	4308      	orrs	r0, r1
  402254:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402256:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  402258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40225c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40225e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402262:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402264:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402266:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40226a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40226c:	4308      	orrs	r0, r1
  40226e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402270:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402272:	4308      	orrs	r0, r1
  402274:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402276:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  402278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40227c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40227e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402282:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402284:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402286:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40228a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40228c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402290:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402292:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402294:	4308      	orrs	r0, r1
  402296:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402298:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40229a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40229e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4022a0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022a4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4022a6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4022a8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4022ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  4022b2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4022b4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4022b6:	4308      	orrs	r0, r1
  4022b8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4022ba:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4022bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4022c0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4022c2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022c6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4022c8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4022ca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4022ce:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022d0:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  4022d4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4022d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4022d8:	4308      	orrs	r0, r1
  4022da:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4022dc:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4022de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4022e2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4022e4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022e8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4022ea:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4022ec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4022f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022f2:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  4022f6:	6718      	str	r0, [r3, #112]	; 0x70
  4022f8:	e03e      	b.n	402378 <board_init+0x364>
  4022fa:	bf00      	nop
  4022fc:	400e1850 	.word	0x400e1850
  402300:	003fffff 	.word	0x003fffff
  402304:	004023c5 	.word	0x004023c5
  402308:	01000001 	.word	0x01000001
  40230c:	004023b9 	.word	0x004023b9
  402310:	001fffff 	.word	0x001fffff
  402314:	06230001 	.word	0x06230001
  402318:	00400012 	.word	0x00400012
  40231c:	20000013 	.word	0x20000013
  402320:	0003ffff 	.word	0x0003ffff
  402324:	20400014 	.word	0x20400014
  402328:	0001ffff 	.word	0x0001ffff
  40232c:	20440015 	.word	0x20440015
  402330:	13010001 	.word	0x13010001
  402334:	40000016 	.word	0x40000016
  402338:	03000001 	.word	0x03000001
  40233c:	60000017 	.word	0x60000017
  402340:	03250001 	.word	0x03250001
  402344:	70000018 	.word	0x70000018
  402348:	80000019 	.word	0x80000019
  40234c:	000fffff 	.word	0x000fffff
  402350:	a010001a 	.word	0xa010001a
  402354:	e000ed00 	.word	0xe000ed00
  402358:	004023ad 	.word	0x004023ad
  40235c:	400e0c00 	.word	0x400e0c00
  402360:	5a00080c 	.word	0x5a00080c
  402364:	004027ed 	.word	0x004027ed
  402368:	400e1200 	.word	0x400e1200
  40236c:	400e0e00 	.word	0x400e0e00
  402370:	40088000 	.word	0x40088000
  402374:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  402378:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40237a:	4308      	orrs	r0, r1
  40237c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40237e:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  402384:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402386:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40238a:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  402390:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  402392:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402398:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40239e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023a0:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4023a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4023a6:	6753      	str	r3, [r2, #116]	; 0x74
  4023a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023aa:	bf00      	nop

004023ac <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  4023ac:	4b01      	ldr	r3, [pc, #4]	; (4023b4 <mpu_enable+0x8>)
  4023ae:	6058      	str	r0, [r3, #4]
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	e000ed90 	.word	0xe000ed90

004023b8 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  4023b8:	4b01      	ldr	r3, [pc, #4]	; (4023c0 <mpu_set_region+0x8>)
  4023ba:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  4023bc:	6119      	str	r1, [r3, #16]
  4023be:	4770      	bx	lr
  4023c0:	e000ed90 	.word	0xe000ed90

004023c4 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4023c4:	2820      	cmp	r0, #32
  4023c6:	d909      	bls.n	4023dc <mpu_cal_mpu_region_size+0x18>
  4023c8:	2304      	movs	r3, #4
  4023ca:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  4023cc:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  4023ce:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4023d0:	4290      	cmp	r0, r2
  4023d2:	d901      	bls.n	4023d8 <mpu_cal_mpu_region_size+0x14>
  4023d4:	2b1e      	cmp	r3, #30
  4023d6:	d9f9      	bls.n	4023cc <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  4023d8:	0058      	lsls	r0, r3, #1
  4023da:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  4023dc:	2304      	movs	r3, #4
  4023de:	e7fb      	b.n	4023d8 <mpu_cal_mpu_region_size+0x14>

004023e0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4023e0:	6301      	str	r1, [r0, #48]	; 0x30
  4023e2:	4770      	bx	lr

004023e4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4023e4:	6341      	str	r1, [r0, #52]	; 0x34
  4023e6:	4770      	bx	lr

004023e8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4023e8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4023ea:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4023ee:	d03a      	beq.n	402466 <pio_set_peripheral+0x7e>
  4023f0:	d813      	bhi.n	40241a <pio_set_peripheral+0x32>
  4023f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4023f6:	d025      	beq.n	402444 <pio_set_peripheral+0x5c>
  4023f8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4023fc:	d10a      	bne.n	402414 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402400:	4313      	orrs	r3, r2
  402402:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402404:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402406:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402408:	400b      	ands	r3, r1
  40240a:	ea23 0302 	bic.w	r3, r3, r2
  40240e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402410:	6042      	str	r2, [r0, #4]
  402412:	4770      	bx	lr
	switch (ul_type) {
  402414:	2900      	cmp	r1, #0
  402416:	d1fb      	bne.n	402410 <pio_set_peripheral+0x28>
  402418:	4770      	bx	lr
  40241a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40241e:	d021      	beq.n	402464 <pio_set_peripheral+0x7c>
  402420:	d809      	bhi.n	402436 <pio_set_peripheral+0x4e>
  402422:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402426:	d1f3      	bne.n	402410 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402428:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40242a:	4313      	orrs	r3, r2
  40242c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40242e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402430:	4313      	orrs	r3, r2
  402432:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402434:	e7ec      	b.n	402410 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402436:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40243a:	d013      	beq.n	402464 <pio_set_peripheral+0x7c>
  40243c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402440:	d010      	beq.n	402464 <pio_set_peripheral+0x7c>
  402442:	e7e5      	b.n	402410 <pio_set_peripheral+0x28>
{
  402444:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402446:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402448:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40244a:	43d3      	mvns	r3, r2
  40244c:	4021      	ands	r1, r4
  40244e:	461c      	mov	r4, r3
  402450:	4019      	ands	r1, r3
  402452:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402454:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402456:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402458:	400b      	ands	r3, r1
  40245a:	4023      	ands	r3, r4
  40245c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40245e:	6042      	str	r2, [r0, #4]
}
  402460:	f85d 4b04 	ldr.w	r4, [sp], #4
  402464:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402466:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402468:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40246a:	400b      	ands	r3, r1
  40246c:	ea23 0302 	bic.w	r3, r3, r2
  402470:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402472:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402474:	4313      	orrs	r3, r2
  402476:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402478:	e7ca      	b.n	402410 <pio_set_peripheral+0x28>

0040247a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40247a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40247c:	f012 0f01 	tst.w	r2, #1
  402480:	d10d      	bne.n	40249e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  402482:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402484:	f012 0f0a 	tst.w	r2, #10
  402488:	d00b      	beq.n	4024a2 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40248a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40248c:	f012 0f02 	tst.w	r2, #2
  402490:	d109      	bne.n	4024a6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402492:	f012 0f08 	tst.w	r2, #8
  402496:	d008      	beq.n	4024aa <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402498:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40249c:	e005      	b.n	4024aa <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40249e:	6641      	str	r1, [r0, #100]	; 0x64
  4024a0:	e7f0      	b.n	402484 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4024a2:	6241      	str	r1, [r0, #36]	; 0x24
  4024a4:	e7f2      	b.n	40248c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4024a6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4024aa:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4024ac:	6001      	str	r1, [r0, #0]
  4024ae:	4770      	bx	lr

004024b0 <pio_set_output>:
{
  4024b0:	b410      	push	{r4}
  4024b2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4024b4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4024b6:	b94c      	cbnz	r4, 4024cc <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4024b8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4024ba:	b14b      	cbz	r3, 4024d0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4024bc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4024be:	b94a      	cbnz	r2, 4024d4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4024c0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4024c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4024c4:	6001      	str	r1, [r0, #0]
}
  4024c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024ca:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4024cc:	6641      	str	r1, [r0, #100]	; 0x64
  4024ce:	e7f4      	b.n	4024ba <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4024d0:	6541      	str	r1, [r0, #84]	; 0x54
  4024d2:	e7f4      	b.n	4024be <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4024d4:	6301      	str	r1, [r0, #48]	; 0x30
  4024d6:	e7f4      	b.n	4024c2 <pio_set_output+0x12>

004024d8 <pio_configure>:
{
  4024d8:	b570      	push	{r4, r5, r6, lr}
  4024da:	b082      	sub	sp, #8
  4024dc:	4605      	mov	r5, r0
  4024de:	4616      	mov	r6, r2
  4024e0:	461c      	mov	r4, r3
	switch (ul_type) {
  4024e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4024e6:	d014      	beq.n	402512 <pio_configure+0x3a>
  4024e8:	d90a      	bls.n	402500 <pio_configure+0x28>
  4024ea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4024ee:	d024      	beq.n	40253a <pio_configure+0x62>
  4024f0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4024f4:	d021      	beq.n	40253a <pio_configure+0x62>
  4024f6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4024fa:	d017      	beq.n	40252c <pio_configure+0x54>
		return 0;
  4024fc:	2000      	movs	r0, #0
  4024fe:	e01a      	b.n	402536 <pio_configure+0x5e>
	switch (ul_type) {
  402500:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402504:	d005      	beq.n	402512 <pio_configure+0x3a>
  402506:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40250a:	d002      	beq.n	402512 <pio_configure+0x3a>
  40250c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402510:	d1f4      	bne.n	4024fc <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402512:	4632      	mov	r2, r6
  402514:	4628      	mov	r0, r5
  402516:	4b11      	ldr	r3, [pc, #68]	; (40255c <pio_configure+0x84>)
  402518:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40251a:	f014 0f01 	tst.w	r4, #1
  40251e:	d102      	bne.n	402526 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  402520:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  402522:	2001      	movs	r0, #1
  402524:	e007      	b.n	402536 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  402526:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  402528:	2001      	movs	r0, #1
  40252a:	e004      	b.n	402536 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40252c:	461a      	mov	r2, r3
  40252e:	4631      	mov	r1, r6
  402530:	4b0b      	ldr	r3, [pc, #44]	; (402560 <pio_configure+0x88>)
  402532:	4798      	blx	r3
	return 1;
  402534:	2001      	movs	r0, #1
}
  402536:	b002      	add	sp, #8
  402538:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40253a:	f004 0301 	and.w	r3, r4, #1
  40253e:	9300      	str	r3, [sp, #0]
  402540:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402544:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402548:	bf14      	ite	ne
  40254a:	2200      	movne	r2, #0
  40254c:	2201      	moveq	r2, #1
  40254e:	4631      	mov	r1, r6
  402550:	4628      	mov	r0, r5
  402552:	4c04      	ldr	r4, [pc, #16]	; (402564 <pio_configure+0x8c>)
  402554:	47a0      	blx	r4
	return 1;
  402556:	2001      	movs	r0, #1
		break;
  402558:	e7ed      	b.n	402536 <pio_configure+0x5e>
  40255a:	bf00      	nop
  40255c:	004023e9 	.word	0x004023e9
  402560:	0040247b 	.word	0x0040247b
  402564:	004024b1 	.word	0x004024b1

00402568 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  402568:	f012 0f10 	tst.w	r2, #16
  40256c:	d012      	beq.n	402594 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40256e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402572:	f012 0f20 	tst.w	r2, #32
  402576:	d007      	beq.n	402588 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  402578:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40257c:	f012 0f40 	tst.w	r2, #64	; 0x40
  402580:	d005      	beq.n	40258e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  402582:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402586:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  402588:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40258c:	e7f6      	b.n	40257c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40258e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402592:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  402594:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402598:	4770      	bx	lr

0040259a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40259a:	6401      	str	r1, [r0, #64]	; 0x40
  40259c:	4770      	bx	lr

0040259e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40259e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4025a0:	4770      	bx	lr

004025a2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4025a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4025a4:	4770      	bx	lr
	...

004025a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4025a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025ac:	4604      	mov	r4, r0
  4025ae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4025b0:	4b0e      	ldr	r3, [pc, #56]	; (4025ec <pio_handler_process+0x44>)
  4025b2:	4798      	blx	r3
  4025b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4025b6:	4620      	mov	r0, r4
  4025b8:	4b0d      	ldr	r3, [pc, #52]	; (4025f0 <pio_handler_process+0x48>)
  4025ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4025bc:	4005      	ands	r5, r0
  4025be:	d013      	beq.n	4025e8 <pio_handler_process+0x40>
  4025c0:	4c0c      	ldr	r4, [pc, #48]	; (4025f4 <pio_handler_process+0x4c>)
  4025c2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4025c6:	e003      	b.n	4025d0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4025c8:	42b4      	cmp	r4, r6
  4025ca:	d00d      	beq.n	4025e8 <pio_handler_process+0x40>
  4025cc:	3410      	adds	r4, #16
		while (status != 0) {
  4025ce:	b15d      	cbz	r5, 4025e8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4025d0:	6820      	ldr	r0, [r4, #0]
  4025d2:	4540      	cmp	r0, r8
  4025d4:	d1f8      	bne.n	4025c8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4025d6:	6861      	ldr	r1, [r4, #4]
  4025d8:	4229      	tst	r1, r5
  4025da:	d0f5      	beq.n	4025c8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4025dc:	68e3      	ldr	r3, [r4, #12]
  4025de:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4025e0:	6863      	ldr	r3, [r4, #4]
  4025e2:	ea25 0503 	bic.w	r5, r5, r3
  4025e6:	e7ef      	b.n	4025c8 <pio_handler_process+0x20>
  4025e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025ec:	0040259f 	.word	0x0040259f
  4025f0:	004025a3 	.word	0x004025a3
  4025f4:	2040c530 	.word	0x2040c530

004025f8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4025fa:	4c18      	ldr	r4, [pc, #96]	; (40265c <pio_handler_set+0x64>)
  4025fc:	6826      	ldr	r6, [r4, #0]
  4025fe:	2e06      	cmp	r6, #6
  402600:	d82a      	bhi.n	402658 <pio_handler_set+0x60>
  402602:	f04f 0c00 	mov.w	ip, #0
  402606:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402608:	4f15      	ldr	r7, [pc, #84]	; (402660 <pio_handler_set+0x68>)
  40260a:	e004      	b.n	402616 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40260c:	3401      	adds	r4, #1
  40260e:	b2e4      	uxtb	r4, r4
  402610:	46a4      	mov	ip, r4
  402612:	42a6      	cmp	r6, r4
  402614:	d309      	bcc.n	40262a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  402616:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402618:	0125      	lsls	r5, r4, #4
  40261a:	597d      	ldr	r5, [r7, r5]
  40261c:	428d      	cmp	r5, r1
  40261e:	d1f5      	bne.n	40260c <pio_handler_set+0x14>
  402620:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402624:	686d      	ldr	r5, [r5, #4]
  402626:	4295      	cmp	r5, r2
  402628:	d1f0      	bne.n	40260c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40262a:	4d0d      	ldr	r5, [pc, #52]	; (402660 <pio_handler_set+0x68>)
  40262c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402630:	eb05 040e 	add.w	r4, r5, lr
  402634:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  402638:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40263a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40263c:	9906      	ldr	r1, [sp, #24]
  40263e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402640:	3601      	adds	r6, #1
  402642:	4566      	cmp	r6, ip
  402644:	d005      	beq.n	402652 <pio_handler_set+0x5a>
  402646:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402648:	461a      	mov	r2, r3
  40264a:	4b06      	ldr	r3, [pc, #24]	; (402664 <pio_handler_set+0x6c>)
  40264c:	4798      	blx	r3

	return 0;
  40264e:	2000      	movs	r0, #0
  402650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  402652:	4902      	ldr	r1, [pc, #8]	; (40265c <pio_handler_set+0x64>)
  402654:	600e      	str	r6, [r1, #0]
  402656:	e7f6      	b.n	402646 <pio_handler_set+0x4e>
		return 1;
  402658:	2001      	movs	r0, #1
}
  40265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40265c:	2040c5a0 	.word	0x2040c5a0
  402660:	2040c530 	.word	0x2040c530
  402664:	00402569 	.word	0x00402569

00402668 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402668:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40266a:	210a      	movs	r1, #10
  40266c:	4801      	ldr	r0, [pc, #4]	; (402674 <PIOA_Handler+0xc>)
  40266e:	4b02      	ldr	r3, [pc, #8]	; (402678 <PIOA_Handler+0x10>)
  402670:	4798      	blx	r3
  402672:	bd08      	pop	{r3, pc}
  402674:	400e0e00 	.word	0x400e0e00
  402678:	004025a9 	.word	0x004025a9

0040267c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40267c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40267e:	210b      	movs	r1, #11
  402680:	4801      	ldr	r0, [pc, #4]	; (402688 <PIOB_Handler+0xc>)
  402682:	4b02      	ldr	r3, [pc, #8]	; (40268c <PIOB_Handler+0x10>)
  402684:	4798      	blx	r3
  402686:	bd08      	pop	{r3, pc}
  402688:	400e1000 	.word	0x400e1000
  40268c:	004025a9 	.word	0x004025a9

00402690 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402690:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402692:	210c      	movs	r1, #12
  402694:	4801      	ldr	r0, [pc, #4]	; (40269c <PIOC_Handler+0xc>)
  402696:	4b02      	ldr	r3, [pc, #8]	; (4026a0 <PIOC_Handler+0x10>)
  402698:	4798      	blx	r3
  40269a:	bd08      	pop	{r3, pc}
  40269c:	400e1200 	.word	0x400e1200
  4026a0:	004025a9 	.word	0x004025a9

004026a4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4026a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4026a6:	2110      	movs	r1, #16
  4026a8:	4801      	ldr	r0, [pc, #4]	; (4026b0 <PIOD_Handler+0xc>)
  4026aa:	4b02      	ldr	r3, [pc, #8]	; (4026b4 <PIOD_Handler+0x10>)
  4026ac:	4798      	blx	r3
  4026ae:	bd08      	pop	{r3, pc}
  4026b0:	400e1400 	.word	0x400e1400
  4026b4:	004025a9 	.word	0x004025a9

004026b8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4026b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4026ba:	2111      	movs	r1, #17
  4026bc:	4801      	ldr	r0, [pc, #4]	; (4026c4 <PIOE_Handler+0xc>)
  4026be:	4b02      	ldr	r3, [pc, #8]	; (4026c8 <PIOE_Handler+0x10>)
  4026c0:	4798      	blx	r3
  4026c2:	bd08      	pop	{r3, pc}
  4026c4:	400e1600 	.word	0x400e1600
  4026c8:	004025a9 	.word	0x004025a9

004026cc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4026cc:	2803      	cmp	r0, #3
  4026ce:	d011      	beq.n	4026f4 <pmc_mck_set_division+0x28>
  4026d0:	2804      	cmp	r0, #4
  4026d2:	d012      	beq.n	4026fa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4026d4:	2802      	cmp	r0, #2
  4026d6:	bf0c      	ite	eq
  4026d8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4026dc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4026de:	4a08      	ldr	r2, [pc, #32]	; (402700 <pmc_mck_set_division+0x34>)
  4026e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4026e6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4026e8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4026ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4026ec:	f013 0f08 	tst.w	r3, #8
  4026f0:	d0fb      	beq.n	4026ea <pmc_mck_set_division+0x1e>
}
  4026f2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4026f4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4026f8:	e7f1      	b.n	4026de <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4026fa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4026fe:	e7ee      	b.n	4026de <pmc_mck_set_division+0x12>
  402700:	400e0600 	.word	0x400e0600

00402704 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402704:	4a17      	ldr	r2, [pc, #92]	; (402764 <pmc_switch_mck_to_pllack+0x60>)
  402706:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40270c:	4318      	orrs	r0, r3
  40270e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402710:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402712:	f013 0f08 	tst.w	r3, #8
  402716:	d10a      	bne.n	40272e <pmc_switch_mck_to_pllack+0x2a>
  402718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40271c:	4911      	ldr	r1, [pc, #68]	; (402764 <pmc_switch_mck_to_pllack+0x60>)
  40271e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402720:	f012 0f08 	tst.w	r2, #8
  402724:	d103      	bne.n	40272e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402726:	3b01      	subs	r3, #1
  402728:	d1f9      	bne.n	40271e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40272a:	2001      	movs	r0, #1
  40272c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40272e:	4a0d      	ldr	r2, [pc, #52]	; (402764 <pmc_switch_mck_to_pllack+0x60>)
  402730:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402732:	f023 0303 	bic.w	r3, r3, #3
  402736:	f043 0302 	orr.w	r3, r3, #2
  40273a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40273c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40273e:	f013 0f08 	tst.w	r3, #8
  402742:	d10a      	bne.n	40275a <pmc_switch_mck_to_pllack+0x56>
  402744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402748:	4906      	ldr	r1, [pc, #24]	; (402764 <pmc_switch_mck_to_pllack+0x60>)
  40274a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40274c:	f012 0f08 	tst.w	r2, #8
  402750:	d105      	bne.n	40275e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402752:	3b01      	subs	r3, #1
  402754:	d1f9      	bne.n	40274a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402756:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402758:	4770      	bx	lr
	return 0;
  40275a:	2000      	movs	r0, #0
  40275c:	4770      	bx	lr
  40275e:	2000      	movs	r0, #0
  402760:	4770      	bx	lr
  402762:	bf00      	nop
  402764:	400e0600 	.word	0x400e0600

00402768 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402768:	b9a0      	cbnz	r0, 402794 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40276a:	480e      	ldr	r0, [pc, #56]	; (4027a4 <pmc_switch_mainck_to_xtal+0x3c>)
  40276c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40276e:	0209      	lsls	r1, r1, #8
  402770:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402772:	4a0d      	ldr	r2, [pc, #52]	; (4027a8 <pmc_switch_mainck_to_xtal+0x40>)
  402774:	401a      	ands	r2, r3
  402776:	4b0d      	ldr	r3, [pc, #52]	; (4027ac <pmc_switch_mainck_to_xtal+0x44>)
  402778:	4313      	orrs	r3, r2
  40277a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40277c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40277e:	4602      	mov	r2, r0
  402780:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402782:	f013 0f01 	tst.w	r3, #1
  402786:	d0fb      	beq.n	402780 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402788:	4a06      	ldr	r2, [pc, #24]	; (4027a4 <pmc_switch_mainck_to_xtal+0x3c>)
  40278a:	6a11      	ldr	r1, [r2, #32]
  40278c:	4b08      	ldr	r3, [pc, #32]	; (4027b0 <pmc_switch_mainck_to_xtal+0x48>)
  40278e:	430b      	orrs	r3, r1
  402790:	6213      	str	r3, [r2, #32]
  402792:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402794:	4903      	ldr	r1, [pc, #12]	; (4027a4 <pmc_switch_mainck_to_xtal+0x3c>)
  402796:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402798:	4a06      	ldr	r2, [pc, #24]	; (4027b4 <pmc_switch_mainck_to_xtal+0x4c>)
  40279a:	401a      	ands	r2, r3
  40279c:	4b06      	ldr	r3, [pc, #24]	; (4027b8 <pmc_switch_mainck_to_xtal+0x50>)
  40279e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4027a0:	620b      	str	r3, [r1, #32]
  4027a2:	4770      	bx	lr
  4027a4:	400e0600 	.word	0x400e0600
  4027a8:	ffc8fffc 	.word	0xffc8fffc
  4027ac:	00370001 	.word	0x00370001
  4027b0:	01370000 	.word	0x01370000
  4027b4:	fec8fffc 	.word	0xfec8fffc
  4027b8:	01370002 	.word	0x01370002

004027bc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4027bc:	4b02      	ldr	r3, [pc, #8]	; (4027c8 <pmc_osc_is_ready_mainck+0xc>)
  4027be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027c0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4027c4:	4770      	bx	lr
  4027c6:	bf00      	nop
  4027c8:	400e0600 	.word	0x400e0600

004027cc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4027cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4027d0:	4b01      	ldr	r3, [pc, #4]	; (4027d8 <pmc_disable_pllack+0xc>)
  4027d2:	629a      	str	r2, [r3, #40]	; 0x28
  4027d4:	4770      	bx	lr
  4027d6:	bf00      	nop
  4027d8:	400e0600 	.word	0x400e0600

004027dc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4027dc:	4b02      	ldr	r3, [pc, #8]	; (4027e8 <pmc_is_locked_pllack+0xc>)
  4027de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027e0:	f000 0002 	and.w	r0, r0, #2
  4027e4:	4770      	bx	lr
  4027e6:	bf00      	nop
  4027e8:	400e0600 	.word	0x400e0600

004027ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4027ec:	283f      	cmp	r0, #63	; 0x3f
  4027ee:	d81e      	bhi.n	40282e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4027f0:	281f      	cmp	r0, #31
  4027f2:	d80c      	bhi.n	40280e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4027f4:	4b11      	ldr	r3, [pc, #68]	; (40283c <pmc_enable_periph_clk+0x50>)
  4027f6:	699a      	ldr	r2, [r3, #24]
  4027f8:	2301      	movs	r3, #1
  4027fa:	4083      	lsls	r3, r0
  4027fc:	4393      	bics	r3, r2
  4027fe:	d018      	beq.n	402832 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402800:	2301      	movs	r3, #1
  402802:	fa03 f000 	lsl.w	r0, r3, r0
  402806:	4b0d      	ldr	r3, [pc, #52]	; (40283c <pmc_enable_periph_clk+0x50>)
  402808:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40280a:	2000      	movs	r0, #0
  40280c:	4770      	bx	lr
		ul_id -= 32;
  40280e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402810:	4b0a      	ldr	r3, [pc, #40]	; (40283c <pmc_enable_periph_clk+0x50>)
  402812:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402816:	2301      	movs	r3, #1
  402818:	4083      	lsls	r3, r0
  40281a:	4393      	bics	r3, r2
  40281c:	d00b      	beq.n	402836 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40281e:	2301      	movs	r3, #1
  402820:	fa03 f000 	lsl.w	r0, r3, r0
  402824:	4b05      	ldr	r3, [pc, #20]	; (40283c <pmc_enable_periph_clk+0x50>)
  402826:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40282a:	2000      	movs	r0, #0
  40282c:	4770      	bx	lr
		return 1;
  40282e:	2001      	movs	r0, #1
  402830:	4770      	bx	lr
	return 0;
  402832:	2000      	movs	r0, #0
  402834:	4770      	bx	lr
  402836:	2000      	movs	r0, #0
}
  402838:	4770      	bx	lr
  40283a:	bf00      	nop
  40283c:	400e0600 	.word	0x400e0600

00402840 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  402840:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  402842:	4b07      	ldr	r3, [pc, #28]	; (402860 <spi_enable_clock+0x20>)
  402844:	4298      	cmp	r0, r3
  402846:	d003      	beq.n	402850 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  402848:	4b06      	ldr	r3, [pc, #24]	; (402864 <spi_enable_clock+0x24>)
  40284a:	4298      	cmp	r0, r3
  40284c:	d004      	beq.n	402858 <spi_enable_clock+0x18>
  40284e:	bd08      	pop	{r3, pc}
  402850:	2015      	movs	r0, #21
  402852:	4b05      	ldr	r3, [pc, #20]	; (402868 <spi_enable_clock+0x28>)
  402854:	4798      	blx	r3
  402856:	bd08      	pop	{r3, pc}
  402858:	202a      	movs	r0, #42	; 0x2a
  40285a:	4b03      	ldr	r3, [pc, #12]	; (402868 <spi_enable_clock+0x28>)
  40285c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40285e:	e7f6      	b.n	40284e <spi_enable_clock+0xe>
  402860:	40008000 	.word	0x40008000
  402864:	40058000 	.word	0x40058000
  402868:	004027ed 	.word	0x004027ed

0040286c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40286c:	6843      	ldr	r3, [r0, #4]
  40286e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  402872:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  402874:	6843      	ldr	r3, [r0, #4]
  402876:	0409      	lsls	r1, r1, #16
  402878:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40287c:	4319      	orrs	r1, r3
  40287e:	6041      	str	r1, [r0, #4]
  402880:	4770      	bx	lr

00402882 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  402882:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  402884:	f643 2499 	movw	r4, #15001	; 0x3a99
  402888:	6905      	ldr	r5, [r0, #16]
  40288a:	f015 0f02 	tst.w	r5, #2
  40288e:	d103      	bne.n	402898 <spi_write+0x16>
		if (!timeout--) {
  402890:	3c01      	subs	r4, #1
  402892:	d1f9      	bne.n	402888 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  402894:	2001      	movs	r0, #1
  402896:	e00c      	b.n	4028b2 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  402898:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40289a:	f014 0f02 	tst.w	r4, #2
  40289e:	d006      	beq.n	4028ae <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4028a0:	0412      	lsls	r2, r2, #16
  4028a2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4028a6:	4311      	orrs	r1, r2
		if (uc_last) {
  4028a8:	b10b      	cbz	r3, 4028ae <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4028aa:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4028ae:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4028b0:	2000      	movs	r0, #0
}
  4028b2:	bc30      	pop	{r4, r5}
  4028b4:	4770      	bx	lr

004028b6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4028b6:	b932      	cbnz	r2, 4028c6 <spi_set_clock_polarity+0x10>
  4028b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4028bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028be:	f023 0301 	bic.w	r3, r3, #1
  4028c2:	6303      	str	r3, [r0, #48]	; 0x30
  4028c4:	4770      	bx	lr
  4028c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4028ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028cc:	f043 0301 	orr.w	r3, r3, #1
  4028d0:	6303      	str	r3, [r0, #48]	; 0x30
  4028d2:	4770      	bx	lr

004028d4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4028d4:	b932      	cbnz	r2, 4028e4 <spi_set_clock_phase+0x10>
  4028d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4028da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028dc:	f023 0302 	bic.w	r3, r3, #2
  4028e0:	6303      	str	r3, [r0, #48]	; 0x30
  4028e2:	4770      	bx	lr
  4028e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4028e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028ea:	f043 0302 	orr.w	r3, r3, #2
  4028ee:	6303      	str	r3, [r0, #48]	; 0x30
  4028f0:	4770      	bx	lr

004028f2 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4028f2:	2a04      	cmp	r2, #4
  4028f4:	d003      	beq.n	4028fe <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4028f6:	b16a      	cbz	r2, 402914 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4028f8:	2a08      	cmp	r2, #8
  4028fa:	d016      	beq.n	40292a <spi_configure_cs_behavior+0x38>
  4028fc:	4770      	bx	lr
  4028fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  402902:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402904:	f023 0308 	bic.w	r3, r3, #8
  402908:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40290a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40290c:	f043 0304 	orr.w	r3, r3, #4
  402910:	6303      	str	r3, [r0, #48]	; 0x30
  402912:	4770      	bx	lr
  402914:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  402918:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40291a:	f023 0308 	bic.w	r3, r3, #8
  40291e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  402920:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402922:	f023 0304 	bic.w	r3, r3, #4
  402926:	6303      	str	r3, [r0, #48]	; 0x30
  402928:	4770      	bx	lr
  40292a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40292e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402930:	f043 0308 	orr.w	r3, r3, #8
  402934:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  402936:	e7e1      	b.n	4028fc <spi_configure_cs_behavior+0xa>

00402938 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  402938:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40293c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40293e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  402942:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  402944:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402946:	431a      	orrs	r2, r3
  402948:	630a      	str	r2, [r1, #48]	; 0x30
  40294a:	4770      	bx	lr

0040294c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40294c:	1e43      	subs	r3, r0, #1
  40294e:	4419      	add	r1, r3
  402950:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  402954:	1e43      	subs	r3, r0, #1
  402956:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  402958:	bf94      	ite	ls
  40295a:	b200      	sxthls	r0, r0
		return -1;
  40295c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  402960:	4770      	bx	lr

00402962 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  402962:	b17a      	cbz	r2, 402984 <spi_set_baudrate_div+0x22>
{
  402964:	b410      	push	{r4}
  402966:	4614      	mov	r4, r2
  402968:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40296c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40296e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  402972:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  402974:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402976:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40297a:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40297c:	2000      	movs	r0, #0
}
  40297e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402982:	4770      	bx	lr
        return -1;
  402984:	f04f 30ff 	mov.w	r0, #4294967295
  402988:	4770      	bx	lr

0040298a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40298a:	6943      	ldr	r3, [r0, #20]
  40298c:	f013 0f02 	tst.w	r3, #2
  402990:	d002      	beq.n	402998 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402992:	61c1      	str	r1, [r0, #28]
	return 0;
  402994:	2000      	movs	r0, #0
  402996:	4770      	bx	lr
		return 1;
  402998:	2001      	movs	r0, #1
}
  40299a:	4770      	bx	lr

0040299c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40299c:	6943      	ldr	r3, [r0, #20]
  40299e:	f013 0f01 	tst.w	r3, #1
  4029a2:	d003      	beq.n	4029ac <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4029a4:	6983      	ldr	r3, [r0, #24]
  4029a6:	700b      	strb	r3, [r1, #0]
	return 0;
  4029a8:	2000      	movs	r0, #0
  4029aa:	4770      	bx	lr
		return 1;
  4029ac:	2001      	movs	r0, #1
}
  4029ae:	4770      	bx	lr

004029b0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4029b0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4029b2:	010b      	lsls	r3, r1, #4
  4029b4:	4293      	cmp	r3, r2
  4029b6:	d914      	bls.n	4029e2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4029b8:	00c9      	lsls	r1, r1, #3
  4029ba:	084b      	lsrs	r3, r1, #1
  4029bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4029c0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4029c4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4029c6:	1e5c      	subs	r4, r3, #1
  4029c8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4029cc:	428c      	cmp	r4, r1
  4029ce:	d901      	bls.n	4029d4 <usart_set_async_baudrate+0x24>
		return 1;
  4029d0:	2001      	movs	r0, #1
  4029d2:	e017      	b.n	402a04 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4029d4:	6841      	ldr	r1, [r0, #4]
  4029d6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4029da:	6041      	str	r1, [r0, #4]
  4029dc:	e00c      	b.n	4029f8 <usart_set_async_baudrate+0x48>
		return 1;
  4029de:	2001      	movs	r0, #1
  4029e0:	e010      	b.n	402a04 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4029e2:	0859      	lsrs	r1, r3, #1
  4029e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4029e8:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4029ec:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4029ee:	1e5c      	subs	r4, r3, #1
  4029f0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4029f4:	428c      	cmp	r4, r1
  4029f6:	d8f2      	bhi.n	4029de <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4029f8:	0412      	lsls	r2, r2, #16
  4029fa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4029fe:	431a      	orrs	r2, r3
  402a00:	6202      	str	r2, [r0, #32]

	return 0;
  402a02:	2000      	movs	r0, #0
}
  402a04:	f85d 4b04 	ldr.w	r4, [sp], #4
  402a08:	4770      	bx	lr
	...

00402a0c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402a0c:	4b08      	ldr	r3, [pc, #32]	; (402a30 <usart_reset+0x24>)
  402a0e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  402a12:	2300      	movs	r3, #0
  402a14:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  402a16:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402a18:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402a1a:	2388      	movs	r3, #136	; 0x88
  402a1c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402a1e:	2324      	movs	r3, #36	; 0x24
  402a20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  402a22:	f44f 7380 	mov.w	r3, #256	; 0x100
  402a26:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402a28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402a2c:	6003      	str	r3, [r0, #0]
  402a2e:	4770      	bx	lr
  402a30:	55534100 	.word	0x55534100

00402a34 <usart_init_rs232>:
{
  402a34:	b570      	push	{r4, r5, r6, lr}
  402a36:	4605      	mov	r5, r0
  402a38:	460c      	mov	r4, r1
  402a3a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402a3c:	4b0f      	ldr	r3, [pc, #60]	; (402a7c <usart_init_rs232+0x48>)
  402a3e:	4798      	blx	r3
	ul_reg_val = 0;
  402a40:	2200      	movs	r2, #0
  402a42:	4b0f      	ldr	r3, [pc, #60]	; (402a80 <usart_init_rs232+0x4c>)
  402a44:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402a46:	b1a4      	cbz	r4, 402a72 <usart_init_rs232+0x3e>
  402a48:	4632      	mov	r2, r6
  402a4a:	6821      	ldr	r1, [r4, #0]
  402a4c:	4628      	mov	r0, r5
  402a4e:	4b0d      	ldr	r3, [pc, #52]	; (402a84 <usart_init_rs232+0x50>)
  402a50:	4798      	blx	r3
  402a52:	4602      	mov	r2, r0
  402a54:	b978      	cbnz	r0, 402a76 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402a56:	6863      	ldr	r3, [r4, #4]
  402a58:	68a1      	ldr	r1, [r4, #8]
  402a5a:	430b      	orrs	r3, r1
  402a5c:	6921      	ldr	r1, [r4, #16]
  402a5e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402a60:	68e1      	ldr	r1, [r4, #12]
  402a62:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402a64:	4906      	ldr	r1, [pc, #24]	; (402a80 <usart_init_rs232+0x4c>)
  402a66:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402a68:	6869      	ldr	r1, [r5, #4]
  402a6a:	430b      	orrs	r3, r1
  402a6c:	606b      	str	r3, [r5, #4]
}
  402a6e:	4610      	mov	r0, r2
  402a70:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  402a72:	2201      	movs	r2, #1
  402a74:	e7fb      	b.n	402a6e <usart_init_rs232+0x3a>
  402a76:	2201      	movs	r2, #1
  402a78:	e7f9      	b.n	402a6e <usart_init_rs232+0x3a>
  402a7a:	bf00      	nop
  402a7c:	00402a0d 	.word	0x00402a0d
  402a80:	2040c5a4 	.word	0x2040c5a4
  402a84:	004029b1 	.word	0x004029b1

00402a88 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402a88:	2340      	movs	r3, #64	; 0x40
  402a8a:	6003      	str	r3, [r0, #0]
  402a8c:	4770      	bx	lr

00402a8e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402a8e:	2310      	movs	r3, #16
  402a90:	6003      	str	r3, [r0, #0]
  402a92:	4770      	bx	lr

00402a94 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  402a94:	6081      	str	r1, [r0, #8]
  402a96:	4770      	bx	lr

00402a98 <usart_get_status>:
	return p_usart->US_CSR;
  402a98:	6940      	ldr	r0, [r0, #20]
}
  402a9a:	4770      	bx	lr

00402a9c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402a9c:	6943      	ldr	r3, [r0, #20]
  402a9e:	f013 0f02 	tst.w	r3, #2
  402aa2:	d004      	beq.n	402aae <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  402aa4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402aa8:	61c1      	str	r1, [r0, #28]
	return 0;
  402aaa:	2000      	movs	r0, #0
  402aac:	4770      	bx	lr
		return 1;
  402aae:	2001      	movs	r0, #1
}
  402ab0:	4770      	bx	lr

00402ab2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402ab2:	6943      	ldr	r3, [r0, #20]
  402ab4:	f013 0f01 	tst.w	r3, #1
  402ab8:	d005      	beq.n	402ac6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402aba:	6983      	ldr	r3, [r0, #24]
  402abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402ac0:	600b      	str	r3, [r1, #0]
	return 0;
  402ac2:	2000      	movs	r0, #0
  402ac4:	4770      	bx	lr
		return 1;
  402ac6:	2001      	movs	r0, #1
}
  402ac8:	4770      	bx	lr

00402aca <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402aca:	e7fe      	b.n	402aca <Dummy_Handler>

00402acc <Reset_Handler>:
{
  402acc:	b500      	push	{lr}
  402ace:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402ad0:	4b25      	ldr	r3, [pc, #148]	; (402b68 <Reset_Handler+0x9c>)
  402ad2:	4a26      	ldr	r2, [pc, #152]	; (402b6c <Reset_Handler+0xa0>)
  402ad4:	429a      	cmp	r2, r3
  402ad6:	d010      	beq.n	402afa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402ad8:	4b25      	ldr	r3, [pc, #148]	; (402b70 <Reset_Handler+0xa4>)
  402ada:	4a23      	ldr	r2, [pc, #140]	; (402b68 <Reset_Handler+0x9c>)
  402adc:	429a      	cmp	r2, r3
  402ade:	d20c      	bcs.n	402afa <Reset_Handler+0x2e>
  402ae0:	3b01      	subs	r3, #1
  402ae2:	1a9b      	subs	r3, r3, r2
  402ae4:	f023 0303 	bic.w	r3, r3, #3
  402ae8:	3304      	adds	r3, #4
  402aea:	4413      	add	r3, r2
  402aec:	491f      	ldr	r1, [pc, #124]	; (402b6c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402aee:	f851 0b04 	ldr.w	r0, [r1], #4
  402af2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  402af6:	429a      	cmp	r2, r3
  402af8:	d1f9      	bne.n	402aee <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  402afa:	4b1e      	ldr	r3, [pc, #120]	; (402b74 <Reset_Handler+0xa8>)
  402afc:	4a1e      	ldr	r2, [pc, #120]	; (402b78 <Reset_Handler+0xac>)
  402afe:	429a      	cmp	r2, r3
  402b00:	d20a      	bcs.n	402b18 <Reset_Handler+0x4c>
  402b02:	3b01      	subs	r3, #1
  402b04:	1a9b      	subs	r3, r3, r2
  402b06:	f023 0303 	bic.w	r3, r3, #3
  402b0a:	3304      	adds	r3, #4
  402b0c:	4413      	add	r3, r2
                *pDest++ = 0;
  402b0e:	2100      	movs	r1, #0
  402b10:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402b14:	4293      	cmp	r3, r2
  402b16:	d1fb      	bne.n	402b10 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402b18:	4a18      	ldr	r2, [pc, #96]	; (402b7c <Reset_Handler+0xb0>)
  402b1a:	4b19      	ldr	r3, [pc, #100]	; (402b80 <Reset_Handler+0xb4>)
  402b1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402b20:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402b22:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402b26:	fab3 f383 	clz	r3, r3
  402b2a:	095b      	lsrs	r3, r3, #5
  402b2c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402b2e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402b30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402b34:	2200      	movs	r2, #0
  402b36:	4b13      	ldr	r3, [pc, #76]	; (402b84 <Reset_Handler+0xb8>)
  402b38:	701a      	strb	r2, [r3, #0]
	return flags;
  402b3a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402b3c:	4a12      	ldr	r2, [pc, #72]	; (402b88 <Reset_Handler+0xbc>)
  402b3e:	6813      	ldr	r3, [r2, #0]
  402b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402b44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402b4a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402b4e:	b129      	cbz	r1, 402b5c <Reset_Handler+0x90>
		cpu_irq_enable();
  402b50:	2201      	movs	r2, #1
  402b52:	4b0c      	ldr	r3, [pc, #48]	; (402b84 <Reset_Handler+0xb8>)
  402b54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402b56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402b5a:	b662      	cpsie	i
        __libc_init_array();
  402b5c:	4b0b      	ldr	r3, [pc, #44]	; (402b8c <Reset_Handler+0xc0>)
  402b5e:	4798      	blx	r3
        main();
  402b60:	4b0b      	ldr	r3, [pc, #44]	; (402b90 <Reset_Handler+0xc4>)
  402b62:	4798      	blx	r3
  402b64:	e7fe      	b.n	402b64 <Reset_Handler+0x98>
  402b66:	bf00      	nop
  402b68:	20400000 	.word	0x20400000
  402b6c:	00407374 	.word	0x00407374
  402b70:	204009d0 	.word	0x204009d0
  402b74:	2040c660 	.word	0x2040c660
  402b78:	204009d0 	.word	0x204009d0
  402b7c:	e000ed00 	.word	0xe000ed00
  402b80:	00400000 	.word	0x00400000
  402b84:	2040001c 	.word	0x2040001c
  402b88:	e000ed88 	.word	0xe000ed88
  402b8c:	0040345d 	.word	0x0040345d
  402b90:	00403321 	.word	0x00403321

00402b94 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402b94:	4b3b      	ldr	r3, [pc, #236]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b98:	f003 0303 	and.w	r3, r3, #3
  402b9c:	2b01      	cmp	r3, #1
  402b9e:	d01d      	beq.n	402bdc <SystemCoreClockUpdate+0x48>
  402ba0:	b183      	cbz	r3, 402bc4 <SystemCoreClockUpdate+0x30>
  402ba2:	2b02      	cmp	r3, #2
  402ba4:	d036      	beq.n	402c14 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402ba6:	4b37      	ldr	r3, [pc, #220]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402bae:	2b70      	cmp	r3, #112	; 0x70
  402bb0:	d05f      	beq.n	402c72 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402bb2:	4b34      	ldr	r3, [pc, #208]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402bb6:	4934      	ldr	r1, [pc, #208]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402bb8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402bbc:	680b      	ldr	r3, [r1, #0]
  402bbe:	40d3      	lsrs	r3, r2
  402bc0:	600b      	str	r3, [r1, #0]
  402bc2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402bc4:	4b31      	ldr	r3, [pc, #196]	; (402c8c <SystemCoreClockUpdate+0xf8>)
  402bc6:	695b      	ldr	r3, [r3, #20]
  402bc8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402bcc:	bf14      	ite	ne
  402bce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402bd2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402bd6:	4b2c      	ldr	r3, [pc, #176]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402bd8:	601a      	str	r2, [r3, #0]
  402bda:	e7e4      	b.n	402ba6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402bdc:	4b29      	ldr	r3, [pc, #164]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402bde:	6a1b      	ldr	r3, [r3, #32]
  402be0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402be4:	d003      	beq.n	402bee <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402be6:	4a2a      	ldr	r2, [pc, #168]	; (402c90 <SystemCoreClockUpdate+0xfc>)
  402be8:	4b27      	ldr	r3, [pc, #156]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402bea:	601a      	str	r2, [r3, #0]
  402bec:	e7db      	b.n	402ba6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402bee:	4a29      	ldr	r2, [pc, #164]	; (402c94 <SystemCoreClockUpdate+0x100>)
  402bf0:	4b25      	ldr	r3, [pc, #148]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402bf2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402bf4:	4b23      	ldr	r3, [pc, #140]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402bf6:	6a1b      	ldr	r3, [r3, #32]
  402bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402bfc:	2b10      	cmp	r3, #16
  402bfe:	d005      	beq.n	402c0c <SystemCoreClockUpdate+0x78>
  402c00:	2b20      	cmp	r3, #32
  402c02:	d1d0      	bne.n	402ba6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402c04:	4a22      	ldr	r2, [pc, #136]	; (402c90 <SystemCoreClockUpdate+0xfc>)
  402c06:	4b20      	ldr	r3, [pc, #128]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c08:	601a      	str	r2, [r3, #0]
          break;
  402c0a:	e7cc      	b.n	402ba6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402c0c:	4a22      	ldr	r2, [pc, #136]	; (402c98 <SystemCoreClockUpdate+0x104>)
  402c0e:	4b1e      	ldr	r3, [pc, #120]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c10:	601a      	str	r2, [r3, #0]
          break;
  402c12:	e7c8      	b.n	402ba6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402c14:	4b1b      	ldr	r3, [pc, #108]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402c16:	6a1b      	ldr	r3, [r3, #32]
  402c18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c1c:	d016      	beq.n	402c4c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402c1e:	4a1c      	ldr	r2, [pc, #112]	; (402c90 <SystemCoreClockUpdate+0xfc>)
  402c20:	4b19      	ldr	r3, [pc, #100]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c22:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402c24:	4b17      	ldr	r3, [pc, #92]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c28:	f003 0303 	and.w	r3, r3, #3
  402c2c:	2b02      	cmp	r3, #2
  402c2e:	d1ba      	bne.n	402ba6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402c30:	4a14      	ldr	r2, [pc, #80]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402c32:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402c34:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402c36:	4814      	ldr	r0, [pc, #80]	; (402c88 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402c38:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402c3c:	6803      	ldr	r3, [r0, #0]
  402c3e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402c42:	b2d2      	uxtb	r2, r2
  402c44:	fbb3 f3f2 	udiv	r3, r3, r2
  402c48:	6003      	str	r3, [r0, #0]
  402c4a:	e7ac      	b.n	402ba6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c4c:	4a11      	ldr	r2, [pc, #68]	; (402c94 <SystemCoreClockUpdate+0x100>)
  402c4e:	4b0e      	ldr	r3, [pc, #56]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c50:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402c52:	4b0c      	ldr	r3, [pc, #48]	; (402c84 <SystemCoreClockUpdate+0xf0>)
  402c54:	6a1b      	ldr	r3, [r3, #32]
  402c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c5a:	2b10      	cmp	r3, #16
  402c5c:	d005      	beq.n	402c6a <SystemCoreClockUpdate+0xd6>
  402c5e:	2b20      	cmp	r3, #32
  402c60:	d1e0      	bne.n	402c24 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402c62:	4a0b      	ldr	r2, [pc, #44]	; (402c90 <SystemCoreClockUpdate+0xfc>)
  402c64:	4b08      	ldr	r3, [pc, #32]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c66:	601a      	str	r2, [r3, #0]
          break;
  402c68:	e7dc      	b.n	402c24 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402c6a:	4a0b      	ldr	r2, [pc, #44]	; (402c98 <SystemCoreClockUpdate+0x104>)
  402c6c:	4b06      	ldr	r3, [pc, #24]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c6e:	601a      	str	r2, [r3, #0]
          break;
  402c70:	e7d8      	b.n	402c24 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402c72:	4a05      	ldr	r2, [pc, #20]	; (402c88 <SystemCoreClockUpdate+0xf4>)
  402c74:	6813      	ldr	r3, [r2, #0]
  402c76:	4909      	ldr	r1, [pc, #36]	; (402c9c <SystemCoreClockUpdate+0x108>)
  402c78:	fba1 1303 	umull	r1, r3, r1, r3
  402c7c:	085b      	lsrs	r3, r3, #1
  402c7e:	6013      	str	r3, [r2, #0]
  402c80:	4770      	bx	lr
  402c82:	bf00      	nop
  402c84:	400e0600 	.word	0x400e0600
  402c88:	20400020 	.word	0x20400020
  402c8c:	400e1810 	.word	0x400e1810
  402c90:	00b71b00 	.word	0x00b71b00
  402c94:	003d0900 	.word	0x003d0900
  402c98:	007a1200 	.word	0x007a1200
  402c9c:	aaaaaaab 	.word	0xaaaaaaab

00402ca0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402ca0:	4b12      	ldr	r3, [pc, #72]	; (402cec <system_init_flash+0x4c>)
  402ca2:	4298      	cmp	r0, r3
  402ca4:	d911      	bls.n	402cca <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402ca6:	4b12      	ldr	r3, [pc, #72]	; (402cf0 <system_init_flash+0x50>)
  402ca8:	4298      	cmp	r0, r3
  402caa:	d913      	bls.n	402cd4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402cac:	4b11      	ldr	r3, [pc, #68]	; (402cf4 <system_init_flash+0x54>)
  402cae:	4298      	cmp	r0, r3
  402cb0:	d914      	bls.n	402cdc <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402cb2:	4b11      	ldr	r3, [pc, #68]	; (402cf8 <system_init_flash+0x58>)
  402cb4:	4298      	cmp	r0, r3
  402cb6:	d915      	bls.n	402ce4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402cb8:	4b10      	ldr	r3, [pc, #64]	; (402cfc <system_init_flash+0x5c>)
  402cba:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402cbc:	bf94      	ite	ls
  402cbe:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402cc2:	4a0f      	ldrhi	r2, [pc, #60]	; (402d00 <system_init_flash+0x60>)
  402cc4:	4b0f      	ldr	r3, [pc, #60]	; (402d04 <system_init_flash+0x64>)
  402cc6:	601a      	str	r2, [r3, #0]
  402cc8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402cca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402cce:	4b0d      	ldr	r3, [pc, #52]	; (402d04 <system_init_flash+0x64>)
  402cd0:	601a      	str	r2, [r3, #0]
  402cd2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402cd4:	4a0c      	ldr	r2, [pc, #48]	; (402d08 <system_init_flash+0x68>)
  402cd6:	4b0b      	ldr	r3, [pc, #44]	; (402d04 <system_init_flash+0x64>)
  402cd8:	601a      	str	r2, [r3, #0]
  402cda:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402cdc:	4a0b      	ldr	r2, [pc, #44]	; (402d0c <system_init_flash+0x6c>)
  402cde:	4b09      	ldr	r3, [pc, #36]	; (402d04 <system_init_flash+0x64>)
  402ce0:	601a      	str	r2, [r3, #0]
  402ce2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402ce4:	4a0a      	ldr	r2, [pc, #40]	; (402d10 <system_init_flash+0x70>)
  402ce6:	4b07      	ldr	r3, [pc, #28]	; (402d04 <system_init_flash+0x64>)
  402ce8:	601a      	str	r2, [r3, #0]
  402cea:	4770      	bx	lr
  402cec:	01312cff 	.word	0x01312cff
  402cf0:	026259ff 	.word	0x026259ff
  402cf4:	039386ff 	.word	0x039386ff
  402cf8:	04c4b3ff 	.word	0x04c4b3ff
  402cfc:	05f5e0ff 	.word	0x05f5e0ff
  402d00:	04000500 	.word	0x04000500
  402d04:	400e0c00 	.word	0x400e0c00
  402d08:	04000100 	.word	0x04000100
  402d0c:	04000200 	.word	0x04000200
  402d10:	04000300 	.word	0x04000300

00402d14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402d14:	4b0a      	ldr	r3, [pc, #40]	; (402d40 <_sbrk+0x2c>)
  402d16:	681b      	ldr	r3, [r3, #0]
  402d18:	b153      	cbz	r3, 402d30 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402d1a:	4b09      	ldr	r3, [pc, #36]	; (402d40 <_sbrk+0x2c>)
  402d1c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402d1e:	181a      	adds	r2, r3, r0
  402d20:	4908      	ldr	r1, [pc, #32]	; (402d44 <_sbrk+0x30>)
  402d22:	4291      	cmp	r1, r2
  402d24:	db08      	blt.n	402d38 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402d26:	4610      	mov	r0, r2
  402d28:	4a05      	ldr	r2, [pc, #20]	; (402d40 <_sbrk+0x2c>)
  402d2a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402d2c:	4618      	mov	r0, r3
  402d2e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402d30:	4a05      	ldr	r2, [pc, #20]	; (402d48 <_sbrk+0x34>)
  402d32:	4b03      	ldr	r3, [pc, #12]	; (402d40 <_sbrk+0x2c>)
  402d34:	601a      	str	r2, [r3, #0]
  402d36:	e7f0      	b.n	402d1a <_sbrk+0x6>
		return (caddr_t) -1;	
  402d38:	f04f 30ff 	mov.w	r0, #4294967295
}
  402d3c:	4770      	bx	lr
  402d3e:	bf00      	nop
  402d40:	2040c5a8 	.word	0x2040c5a8
  402d44:	2045fffc 	.word	0x2045fffc
  402d48:	2040e860 	.word	0x2040e860

00402d4c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402d4c:	f04f 30ff 	mov.w	r0, #4294967295
  402d50:	4770      	bx	lr

00402d52 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402d56:	604b      	str	r3, [r1, #4]

	return 0;
}
  402d58:	2000      	movs	r0, #0
  402d5a:	4770      	bx	lr

00402d5c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402d5c:	2001      	movs	r0, #1
  402d5e:	4770      	bx	lr

00402d60 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402d60:	2000      	movs	r0, #0
  402d62:	4770      	bx	lr

00402d64 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d66:	b083      	sub	sp, #12
  402d68:	4605      	mov	r5, r0
  402d6a:	460c      	mov	r4, r1
	uint32_t val = 0;
  402d6c:	2300      	movs	r3, #0
  402d6e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402d70:	4b2a      	ldr	r3, [pc, #168]	; (402e1c <usart_serial_getchar+0xb8>)
  402d72:	4298      	cmp	r0, r3
  402d74:	d013      	beq.n	402d9e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402d76:	4b2a      	ldr	r3, [pc, #168]	; (402e20 <usart_serial_getchar+0xbc>)
  402d78:	4298      	cmp	r0, r3
  402d7a:	d018      	beq.n	402dae <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402d7c:	4b29      	ldr	r3, [pc, #164]	; (402e24 <usart_serial_getchar+0xc0>)
  402d7e:	4298      	cmp	r0, r3
  402d80:	d01d      	beq.n	402dbe <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402d82:	4b29      	ldr	r3, [pc, #164]	; (402e28 <usart_serial_getchar+0xc4>)
  402d84:	429d      	cmp	r5, r3
  402d86:	d022      	beq.n	402dce <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402d88:	4b28      	ldr	r3, [pc, #160]	; (402e2c <usart_serial_getchar+0xc8>)
  402d8a:	429d      	cmp	r5, r3
  402d8c:	d027      	beq.n	402dde <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402d8e:	4b28      	ldr	r3, [pc, #160]	; (402e30 <usart_serial_getchar+0xcc>)
  402d90:	429d      	cmp	r5, r3
  402d92:	d02e      	beq.n	402df2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402d94:	4b27      	ldr	r3, [pc, #156]	; (402e34 <usart_serial_getchar+0xd0>)
  402d96:	429d      	cmp	r5, r3
  402d98:	d035      	beq.n	402e06 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402d9a:	b003      	add	sp, #12
  402d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402d9e:	461f      	mov	r7, r3
  402da0:	4e25      	ldr	r6, [pc, #148]	; (402e38 <usart_serial_getchar+0xd4>)
  402da2:	4621      	mov	r1, r4
  402da4:	4638      	mov	r0, r7
  402da6:	47b0      	blx	r6
  402da8:	2800      	cmp	r0, #0
  402daa:	d1fa      	bne.n	402da2 <usart_serial_getchar+0x3e>
  402dac:	e7e9      	b.n	402d82 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402dae:	461f      	mov	r7, r3
  402db0:	4e21      	ldr	r6, [pc, #132]	; (402e38 <usart_serial_getchar+0xd4>)
  402db2:	4621      	mov	r1, r4
  402db4:	4638      	mov	r0, r7
  402db6:	47b0      	blx	r6
  402db8:	2800      	cmp	r0, #0
  402dba:	d1fa      	bne.n	402db2 <usart_serial_getchar+0x4e>
  402dbc:	e7e4      	b.n	402d88 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402dbe:	461f      	mov	r7, r3
  402dc0:	4e1d      	ldr	r6, [pc, #116]	; (402e38 <usart_serial_getchar+0xd4>)
  402dc2:	4621      	mov	r1, r4
  402dc4:	4638      	mov	r0, r7
  402dc6:	47b0      	blx	r6
  402dc8:	2800      	cmp	r0, #0
  402dca:	d1fa      	bne.n	402dc2 <usart_serial_getchar+0x5e>
  402dcc:	e7df      	b.n	402d8e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402dce:	461f      	mov	r7, r3
  402dd0:	4e19      	ldr	r6, [pc, #100]	; (402e38 <usart_serial_getchar+0xd4>)
  402dd2:	4621      	mov	r1, r4
  402dd4:	4638      	mov	r0, r7
  402dd6:	47b0      	blx	r6
  402dd8:	2800      	cmp	r0, #0
  402dda:	d1fa      	bne.n	402dd2 <usart_serial_getchar+0x6e>
  402ddc:	e7da      	b.n	402d94 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402dde:	461e      	mov	r6, r3
  402de0:	4d16      	ldr	r5, [pc, #88]	; (402e3c <usart_serial_getchar+0xd8>)
  402de2:	a901      	add	r1, sp, #4
  402de4:	4630      	mov	r0, r6
  402de6:	47a8      	blx	r5
  402de8:	2800      	cmp	r0, #0
  402dea:	d1fa      	bne.n	402de2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402dec:	9b01      	ldr	r3, [sp, #4]
  402dee:	7023      	strb	r3, [r4, #0]
  402df0:	e7d3      	b.n	402d9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402df2:	461e      	mov	r6, r3
  402df4:	4d11      	ldr	r5, [pc, #68]	; (402e3c <usart_serial_getchar+0xd8>)
  402df6:	a901      	add	r1, sp, #4
  402df8:	4630      	mov	r0, r6
  402dfa:	47a8      	blx	r5
  402dfc:	2800      	cmp	r0, #0
  402dfe:	d1fa      	bne.n	402df6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402e00:	9b01      	ldr	r3, [sp, #4]
  402e02:	7023      	strb	r3, [r4, #0]
  402e04:	e7c9      	b.n	402d9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402e06:	461e      	mov	r6, r3
  402e08:	4d0c      	ldr	r5, [pc, #48]	; (402e3c <usart_serial_getchar+0xd8>)
  402e0a:	a901      	add	r1, sp, #4
  402e0c:	4630      	mov	r0, r6
  402e0e:	47a8      	blx	r5
  402e10:	2800      	cmp	r0, #0
  402e12:	d1fa      	bne.n	402e0a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402e14:	9b01      	ldr	r3, [sp, #4]
  402e16:	7023      	strb	r3, [r4, #0]
}
  402e18:	e7bf      	b.n	402d9a <usart_serial_getchar+0x36>
  402e1a:	bf00      	nop
  402e1c:	400e0800 	.word	0x400e0800
  402e20:	400e0a00 	.word	0x400e0a00
  402e24:	400e1a00 	.word	0x400e1a00
  402e28:	400e1c00 	.word	0x400e1c00
  402e2c:	40024000 	.word	0x40024000
  402e30:	40028000 	.word	0x40028000
  402e34:	4002c000 	.word	0x4002c000
  402e38:	0040299d 	.word	0x0040299d
  402e3c:	00402ab3 	.word	0x00402ab3

00402e40 <button0_callback>:
	  xHigherPriorityTaskWoken = pdFALSE;
	  xQueueSendFromISR(xQueueUART,  &c, &xHigherPriorityTaskWoken);
  } 
}

void button0_callback(void){
  402e40:	b500      	push	{lr}
  402e42:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e44:	a902      	add	r1, sp, #8
  402e46:	2300      	movs	r3, #0
  402e48:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreLED, &xHigherPriorityTaskWoken);
  402e4c:	4b03      	ldr	r3, [pc, #12]	; (402e5c <button0_callback+0x1c>)
  402e4e:	6818      	ldr	r0, [r3, #0]
  402e50:	4b03      	ldr	r3, [pc, #12]	; (402e60 <button0_callback+0x20>)
  402e52:	4798      	blx	r3
}
  402e54:	b003      	add	sp, #12
  402e56:	f85d fb04 	ldr.w	pc, [sp], #4
  402e5a:	bf00      	nop
  402e5c:	2040c62c 	.word	0x2040c62c
  402e60:	00400e89 	.word	0x00400e89

00402e64 <button1_callback>:

void button1_callback(void){
  402e64:	b500      	push	{lr}
  402e66:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e68:	a902      	add	r1, sp, #8
  402e6a:	2300      	movs	r3, #0
  402e6c:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreLED, &xHigherPriorityTaskWoken);
  402e70:	4b03      	ldr	r3, [pc, #12]	; (402e80 <button1_callback+0x1c>)
  402e72:	6818      	ldr	r0, [r3, #0]
  402e74:	4b03      	ldr	r3, [pc, #12]	; (402e84 <button1_callback+0x20>)
  402e76:	4798      	blx	r3
}
  402e78:	b003      	add	sp, #12
  402e7a:	f85d fb04 	ldr.w	pc, [sp], #4
  402e7e:	bf00      	nop
  402e80:	2040c62c 	.word	0x2040c62c
  402e84:	00400e89 	.word	0x00400e89

00402e88 <button2_callback>:

void button2_callback(void){
  402e88:	b500      	push	{lr}
  402e8a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e8c:	a902      	add	r1, sp, #8
  402e8e:	2300      	movs	r3, #0
  402e90:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreLED, &xHigherPriorityTaskWoken);
  402e94:	4b03      	ldr	r3, [pc, #12]	; (402ea4 <button2_callback+0x1c>)
  402e96:	6818      	ldr	r0, [r3, #0]
  402e98:	4b03      	ldr	r3, [pc, #12]	; (402ea8 <button2_callback+0x20>)
  402e9a:	4798      	blx	r3
}
  402e9c:	b003      	add	sp, #12
  402e9e:	f85d fb04 	ldr.w	pc, [sp], #4
  402ea2:	bf00      	nop
  402ea4:	2040c62c 	.word	0x2040c62c
  402ea8:	00400e89 	.word	0x00400e89

00402eac <task_oled1>:
		 blinkiquito = !blinkiquito;
	  }
  }
}

void task_oled1(void *pvParameters){
  402eac:	b580      	push	{r7, lr}
  402eae:	b08e      	sub	sp, #56	; 0x38
	char b[52];
	gfx_mono_ssd1306_init();
  402eb0:	4b0b      	ldr	r3, [pc, #44]	; (402ee0 <task_oled1+0x34>)
  402eb2:	4798      	blx	r3
	
	
 while(1){
	if(xQueueReceive(xQueueOLED, b, 10))
  402eb4:	4d0b      	ldr	r5, [pc, #44]	; (402ee4 <task_oled1+0x38>)
  402eb6:	4c0c      	ldr	r4, [pc, #48]	; (402ee8 <task_oled1+0x3c>)
		gfx_mono_draw_string(b, 50,16, &sysfont);
  402eb8:	4f0c      	ldr	r7, [pc, #48]	; (402eec <task_oled1+0x40>)
  402eba:	e002      	b.n	402ec2 <task_oled1+0x16>
	 vTaskDelay(100);
  402ebc:	2064      	movs	r0, #100	; 0x64
  402ebe:	4b0c      	ldr	r3, [pc, #48]	; (402ef0 <task_oled1+0x44>)
  402ec0:	4798      	blx	r3
	if(xQueueReceive(xQueueOLED, b, 10))
  402ec2:	2300      	movs	r3, #0
  402ec4:	220a      	movs	r2, #10
  402ec6:	a901      	add	r1, sp, #4
  402ec8:	6828      	ldr	r0, [r5, #0]
  402eca:	47a0      	blx	r4
  402ecc:	2800      	cmp	r0, #0
  402ece:	d0f5      	beq.n	402ebc <task_oled1+0x10>
		gfx_mono_draw_string(b, 50,16, &sysfont);
  402ed0:	463b      	mov	r3, r7
  402ed2:	2210      	movs	r2, #16
  402ed4:	2132      	movs	r1, #50	; 0x32
  402ed6:	a801      	add	r0, sp, #4
  402ed8:	4e06      	ldr	r6, [pc, #24]	; (402ef4 <task_oled1+0x48>)
  402eda:	47b0      	blx	r6
  402edc:	e7ee      	b.n	402ebc <task_oled1+0x10>
  402ede:	bf00      	nop
  402ee0:	00400425 	.word	0x00400425
  402ee4:	2040c630 	.word	0x2040c630
  402ee8:	00400f09 	.word	0x00400f09
  402eec:	2040000c 	.word	0x2040000c
  402ef0:	00401659 	.word	0x00401659
  402ef4:	0040038d 	.word	0x0040038d

00402ef8 <usart_serial_putchar>:
{
  402ef8:	b570      	push	{r4, r5, r6, lr}
  402efa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402efc:	4b2a      	ldr	r3, [pc, #168]	; (402fa8 <usart_serial_putchar+0xb0>)
  402efe:	4298      	cmp	r0, r3
  402f00:	d013      	beq.n	402f2a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402f02:	4b2a      	ldr	r3, [pc, #168]	; (402fac <usart_serial_putchar+0xb4>)
  402f04:	4298      	cmp	r0, r3
  402f06:	d019      	beq.n	402f3c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402f08:	4b29      	ldr	r3, [pc, #164]	; (402fb0 <usart_serial_putchar+0xb8>)
  402f0a:	4298      	cmp	r0, r3
  402f0c:	d01f      	beq.n	402f4e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402f0e:	4b29      	ldr	r3, [pc, #164]	; (402fb4 <usart_serial_putchar+0xbc>)
  402f10:	4298      	cmp	r0, r3
  402f12:	d025      	beq.n	402f60 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402f14:	4b28      	ldr	r3, [pc, #160]	; (402fb8 <usart_serial_putchar+0xc0>)
  402f16:	4298      	cmp	r0, r3
  402f18:	d02b      	beq.n	402f72 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402f1a:	4b28      	ldr	r3, [pc, #160]	; (402fbc <usart_serial_putchar+0xc4>)
  402f1c:	4298      	cmp	r0, r3
  402f1e:	d031      	beq.n	402f84 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402f20:	4b27      	ldr	r3, [pc, #156]	; (402fc0 <usart_serial_putchar+0xc8>)
  402f22:	4298      	cmp	r0, r3
  402f24:	d037      	beq.n	402f96 <usart_serial_putchar+0x9e>
	return 0;
  402f26:	2000      	movs	r0, #0
}
  402f28:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f2a:	461e      	mov	r6, r3
  402f2c:	4d25      	ldr	r5, [pc, #148]	; (402fc4 <usart_serial_putchar+0xcc>)
  402f2e:	4621      	mov	r1, r4
  402f30:	4630      	mov	r0, r6
  402f32:	47a8      	blx	r5
  402f34:	2800      	cmp	r0, #0
  402f36:	d1fa      	bne.n	402f2e <usart_serial_putchar+0x36>
		return 1;
  402f38:	2001      	movs	r0, #1
  402f3a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f3c:	461e      	mov	r6, r3
  402f3e:	4d21      	ldr	r5, [pc, #132]	; (402fc4 <usart_serial_putchar+0xcc>)
  402f40:	4621      	mov	r1, r4
  402f42:	4630      	mov	r0, r6
  402f44:	47a8      	blx	r5
  402f46:	2800      	cmp	r0, #0
  402f48:	d1fa      	bne.n	402f40 <usart_serial_putchar+0x48>
		return 1;
  402f4a:	2001      	movs	r0, #1
  402f4c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f4e:	461e      	mov	r6, r3
  402f50:	4d1c      	ldr	r5, [pc, #112]	; (402fc4 <usart_serial_putchar+0xcc>)
  402f52:	4621      	mov	r1, r4
  402f54:	4630      	mov	r0, r6
  402f56:	47a8      	blx	r5
  402f58:	2800      	cmp	r0, #0
  402f5a:	d1fa      	bne.n	402f52 <usart_serial_putchar+0x5a>
		return 1;
  402f5c:	2001      	movs	r0, #1
  402f5e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f60:	461e      	mov	r6, r3
  402f62:	4d18      	ldr	r5, [pc, #96]	; (402fc4 <usart_serial_putchar+0xcc>)
  402f64:	4621      	mov	r1, r4
  402f66:	4630      	mov	r0, r6
  402f68:	47a8      	blx	r5
  402f6a:	2800      	cmp	r0, #0
  402f6c:	d1fa      	bne.n	402f64 <usart_serial_putchar+0x6c>
		return 1;
  402f6e:	2001      	movs	r0, #1
  402f70:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f72:	461e      	mov	r6, r3
  402f74:	4d14      	ldr	r5, [pc, #80]	; (402fc8 <usart_serial_putchar+0xd0>)
  402f76:	4621      	mov	r1, r4
  402f78:	4630      	mov	r0, r6
  402f7a:	47a8      	blx	r5
  402f7c:	2800      	cmp	r0, #0
  402f7e:	d1fa      	bne.n	402f76 <usart_serial_putchar+0x7e>
		return 1;
  402f80:	2001      	movs	r0, #1
  402f82:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f84:	461e      	mov	r6, r3
  402f86:	4d10      	ldr	r5, [pc, #64]	; (402fc8 <usart_serial_putchar+0xd0>)
  402f88:	4621      	mov	r1, r4
  402f8a:	4630      	mov	r0, r6
  402f8c:	47a8      	blx	r5
  402f8e:	2800      	cmp	r0, #0
  402f90:	d1fa      	bne.n	402f88 <usart_serial_putchar+0x90>
		return 1;
  402f92:	2001      	movs	r0, #1
  402f94:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f96:	461e      	mov	r6, r3
  402f98:	4d0b      	ldr	r5, [pc, #44]	; (402fc8 <usart_serial_putchar+0xd0>)
  402f9a:	4621      	mov	r1, r4
  402f9c:	4630      	mov	r0, r6
  402f9e:	47a8      	blx	r5
  402fa0:	2800      	cmp	r0, #0
  402fa2:	d1fa      	bne.n	402f9a <usart_serial_putchar+0xa2>
		return 1;
  402fa4:	2001      	movs	r0, #1
  402fa6:	bd70      	pop	{r4, r5, r6, pc}
  402fa8:	400e0800 	.word	0x400e0800
  402fac:	400e0a00 	.word	0x400e0a00
  402fb0:	400e1a00 	.word	0x400e1a00
  402fb4:	400e1c00 	.word	0x400e1c00
  402fb8:	40024000 	.word	0x40024000
  402fbc:	40028000 	.word	0x40028000
  402fc0:	4002c000 	.word	0x4002c000
  402fc4:	0040298b 	.word	0x0040298b
  402fc8:	00402a9d 	.word	0x00402a9d

00402fcc <vApplicationStackOverflowHook>:
{
  402fcc:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402fce:	460a      	mov	r2, r1
  402fd0:	4601      	mov	r1, r0
  402fd2:	4802      	ldr	r0, [pc, #8]	; (402fdc <vApplicationStackOverflowHook+0x10>)
  402fd4:	4b02      	ldr	r3, [pc, #8]	; (402fe0 <vApplicationStackOverflowHook+0x14>)
  402fd6:	4798      	blx	r3
  402fd8:	e7fe      	b.n	402fd8 <vApplicationStackOverflowHook+0xc>
  402fda:	bf00      	nop
  402fdc:	004071c8 	.word	0x004071c8
  402fe0:	004034ad 	.word	0x004034ad

00402fe4 <vApplicationTickHook>:
{
  402fe4:	4770      	bx	lr

00402fe6 <vApplicationMallocFailedHook>:
{
  402fe6:	4770      	bx	lr

00402fe8 <USART1_Handler>:
void USART1_Handler(void){
  402fe8:	b570      	push	{r4, r5, r6, lr}
  402fea:	b084      	sub	sp, #16
  BaseType_t xHigherPriorityTaskWoken = pdFALSE; // freeRTOs
  402fec:	2300      	movs	r3, #0
  402fee:	9303      	str	r3, [sp, #12]
  uint32_t ret = usart_get_status(CONF_UART);  // ACK IRQ
  402ff0:	4810      	ldr	r0, [pc, #64]	; (403034 <USART1_Handler+0x4c>)
  402ff2:	4b11      	ldr	r3, [pc, #68]	; (403038 <USART1_Handler+0x50>)
  402ff4:	4798      	blx	r3
  if(ret & US_IER_RXRDY){
  402ff6:	f010 0f01 	tst.w	r0, #1
  402ffa:	d101      	bne.n	403000 <USART1_Handler+0x18>
}
  402ffc:	b004      	add	sp, #16
  402ffe:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  403000:	ac04      	add	r4, sp, #16
  403002:	2300      	movs	r3, #0
  403004:	f844 3d0c 	str.w	r3, [r4, #-12]!
		while (usart_read(p_usart, &val));
  403008:	4e0a      	ldr	r6, [pc, #40]	; (403034 <USART1_Handler+0x4c>)
  40300a:	4d0c      	ldr	r5, [pc, #48]	; (40303c <USART1_Handler+0x54>)
  40300c:	4621      	mov	r1, r4
  40300e:	4630      	mov	r0, r6
  403010:	47a8      	blx	r5
  403012:	2800      	cmp	r0, #0
  403014:	d1fa      	bne.n	40300c <USART1_Handler+0x24>
		*data = (uint8_t)(val & 0xFF);
  403016:	9b01      	ldr	r3, [sp, #4]
  403018:	f88d 300b 	strb.w	r3, [sp, #11]
	  xHigherPriorityTaskWoken = pdFALSE;
  40301c:	2300      	movs	r3, #0
  40301e:	aa04      	add	r2, sp, #16
  403020:	f842 3d04 	str.w	r3, [r2, #-4]!
	  xQueueSendFromISR(xQueueUART,  &c, &xHigherPriorityTaskWoken);
  403024:	f10d 010b 	add.w	r1, sp, #11
  403028:	4805      	ldr	r0, [pc, #20]	; (403040 <USART1_Handler+0x58>)
  40302a:	6800      	ldr	r0, [r0, #0]
  40302c:	4c05      	ldr	r4, [pc, #20]	; (403044 <USART1_Handler+0x5c>)
  40302e:	47a0      	blx	r4
}
  403030:	e7e4      	b.n	402ffc <USART1_Handler+0x14>
  403032:	bf00      	nop
  403034:	40028000 	.word	0x40028000
  403038:	00402a99 	.word	0x00402a99
  40303c:	00402ab3 	.word	0x00402ab3
  403040:	2040c634 	.word	0x2040c634
  403044:	00400df9 	.word	0x00400df9

00403048 <io_init>:

/************************************************************************/
/* functions                                                            */
/************************************************************************/

void io_init(void){
  403048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40304c:	b083      	sub	sp, #12
		pmc_enable_periph_clk(EBUT1_PIO_ID);
  40304e:	2010      	movs	r0, #16
  403050:	4c3d      	ldr	r4, [pc, #244]	; (403148 <io_init+0x100>)
  403052:	47a0      	blx	r4
		pmc_enable_periph_clk(EBUT2_PIO_ID);
  403054:	200c      	movs	r0, #12
  403056:	47a0      	blx	r4
		pmc_enable_periph_clk(EBUT3_PIO_ID);
  403058:	200b      	movs	r0, #11
  40305a:	47a0      	blx	r4
		pmc_enable_periph_clk(ELED1_PIO_ID);
  40305c:	200a      	movs	r0, #10
  40305e:	47a0      	blx	r4
		pmc_enable_periph_clk(ELED2_PIO_ID);
  403060:	200c      	movs	r0, #12
  403062:	47a0      	blx	r4
		pmc_enable_periph_clk(ELED3_PIO_ID);
  403064:	200b      	movs	r0, #11
  403066:	47a0      	blx	r4
		
		pio_set_input(EBUT1_PIO, EBUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403068:	4f38      	ldr	r7, [pc, #224]	; (40314c <io_init+0x104>)
  40306a:	2209      	movs	r2, #9
  40306c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403070:	4638      	mov	r0, r7
  403072:	4c37      	ldr	r4, [pc, #220]	; (403150 <io_init+0x108>)
  403074:	47a0      	blx	r4
		pio_set_input(EBUT2_PIO, EBUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403076:	4e37      	ldr	r6, [pc, #220]	; (403154 <io_init+0x10c>)
  403078:	2209      	movs	r2, #9
  40307a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40307e:	4630      	mov	r0, r6
  403080:	47a0      	blx	r4
		pio_set_input(EBUT3_PIO, EBUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403082:	4d35      	ldr	r5, [pc, #212]	; (403158 <io_init+0x110>)
  403084:	2209      	movs	r2, #9
  403086:	2104      	movs	r1, #4
  403088:	4628      	mov	r0, r5
  40308a:	47a0      	blx	r4
		pio_set_output(ELED1_PIO, ELED1_PIO_IDX_MASK, 0, 0, 0);
  40308c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 40317c <io_init+0x134>
  403090:	2400      	movs	r4, #0
  403092:	9400      	str	r4, [sp, #0]
  403094:	4623      	mov	r3, r4
  403096:	4622      	mov	r2, r4
  403098:	2101      	movs	r1, #1
  40309a:	4640      	mov	r0, r8
  40309c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 403180 <io_init+0x138>
  4030a0:	47c8      	blx	r9
		pio_set_output(ELED2_PIO, ELED2_PIO_IDX_MASK, 0, 0, 0);
  4030a2:	9400      	str	r4, [sp, #0]
  4030a4:	4623      	mov	r3, r4
  4030a6:	4622      	mov	r2, r4
  4030a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4030ac:	4630      	mov	r0, r6
  4030ae:	47c8      	blx	r9
		pio_set_output(ELED3_PIO, ELED3_PIO_IDX_MASK, 0, 0, 0);
  4030b0:	9400      	str	r4, [sp, #0]
  4030b2:	4623      	mov	r3, r4
  4030b4:	4622      	mov	r2, r4
  4030b6:	2104      	movs	r1, #4
  4030b8:	4628      	mov	r0, r5
  4030ba:	47c8      	blx	r9
		
		pio_handler_set(EBUT1_PIO, EBUT1_PIO_ID, EBUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, button0_callback);
  4030bc:	4b27      	ldr	r3, [pc, #156]	; (40315c <io_init+0x114>)
  4030be:	9300      	str	r3, [sp, #0]
  4030c0:	2350      	movs	r3, #80	; 0x50
  4030c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4030c6:	2110      	movs	r1, #16
  4030c8:	4638      	mov	r0, r7
  4030ca:	4c25      	ldr	r4, [pc, #148]	; (403160 <io_init+0x118>)
  4030cc:	47a0      	blx	r4
		pio_handler_set(EBUT2_PIO, EBUT2_PIO_ID, EBUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, button1_callback);
  4030ce:	4b25      	ldr	r3, [pc, #148]	; (403164 <io_init+0x11c>)
  4030d0:	9300      	str	r3, [sp, #0]
  4030d2:	2350      	movs	r3, #80	; 0x50
  4030d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4030d8:	210c      	movs	r1, #12
  4030da:	4630      	mov	r0, r6
  4030dc:	47a0      	blx	r4
		pio_handler_set(EBUT3_PIO, EBUT3_PIO_ID, EBUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, button2_callback);
  4030de:	4b22      	ldr	r3, [pc, #136]	; (403168 <io_init+0x120>)
  4030e0:	9300      	str	r3, [sp, #0]
  4030e2:	2350      	movs	r3, #80	; 0x50
  4030e4:	2204      	movs	r2, #4
  4030e6:	210b      	movs	r1, #11
  4030e8:	4628      	mov	r0, r5
  4030ea:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4030ec:	4b1f      	ldr	r3, [pc, #124]	; (40316c <io_init+0x124>)
  4030ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4030f2:	601a      	str	r2, [r3, #0]
  4030f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4030f8:	601a      	str	r2, [r3, #0]
  4030fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4030fe:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403100:	22a0      	movs	r2, #160	; 0xa0
  403102:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  403106:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  40310a:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
		
		NVIC_SetPriority(EBUT1_PIO_ID, 5);
		NVIC_SetPriority(EBUT2_PIO_ID, 5);
		NVIC_SetPriority(EBUT3_PIO_ID, 5);
		
		pio_enable_interrupt(EBUT1_PIO, EBUT1_PIO_IDX_MASK);
  40310e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403112:	4638      	mov	r0, r7
  403114:	4c16      	ldr	r4, [pc, #88]	; (403170 <io_init+0x128>)
  403116:	47a0      	blx	r4
		pio_enable_interrupt(EBUT2_PIO, EBUT2_PIO_IDX_MASK);
  403118:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40311c:	4630      	mov	r0, r6
  40311e:	47a0      	blx	r4
		pio_enable_interrupt(EBUT3_PIO, EBUT2_PIO_IDX_MASK);
  403120:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403124:	4628      	mov	r0, r5
  403126:	47a0      	blx	r4
		
		pio_clear(ELED1_PIO, ELED1_PIO_IDX_MASK);
  403128:	2101      	movs	r1, #1
  40312a:	4640      	mov	r0, r8
  40312c:	4b11      	ldr	r3, [pc, #68]	; (403174 <io_init+0x12c>)
  40312e:	4798      	blx	r3
		pio_set(ELED2_PIO, ELED2_PIO_IDX_MASK);
  403130:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403134:	4630      	mov	r0, r6
  403136:	4c10      	ldr	r4, [pc, #64]	; (403178 <io_init+0x130>)
  403138:	47a0      	blx	r4
		pio_set(ELED3_PIO, ELED3_PIO_IDX_MASK);
  40313a:	2104      	movs	r1, #4
  40313c:	4628      	mov	r0, r5
  40313e:	47a0      	blx	r4
	
}
  403140:	b003      	add	sp, #12
  403142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403146:	bf00      	nop
  403148:	004027ed 	.word	0x004027ed
  40314c:	400e1400 	.word	0x400e1400
  403150:	0040247b 	.word	0x0040247b
  403154:	400e1200 	.word	0x400e1200
  403158:	400e1000 	.word	0x400e1000
  40315c:	00402e41 	.word	0x00402e41
  403160:	004025f9 	.word	0x004025f9
  403164:	00402e65 	.word	0x00402e65
  403168:	00402e89 	.word	0x00402e89
  40316c:	e000e100 	.word	0xe000e100
  403170:	0040259b 	.word	0x0040259b
  403174:	004023e5 	.word	0x004023e5
  403178:	004023e1 	.word	0x004023e1
  40317c:	400e0e00 	.word	0x400e0e00
  403180:	004024b1 	.word	0x004024b1

00403184 <task_io>:
void task_io(void *pvParameters){
  403184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   xSemaphoreLED = xSemaphoreCreateBinary();
  403188:	2203      	movs	r2, #3
  40318a:	2100      	movs	r1, #0
  40318c:	2001      	movs	r0, #1
  40318e:	4b1e      	ldr	r3, [pc, #120]	; (403208 <task_io+0x84>)
  403190:	4798      	blx	r3
  403192:	4c1e      	ldr	r4, [pc, #120]	; (40320c <task_io+0x88>)
  403194:	6020      	str	r0, [r4, #0]
	io_init();
  403196:	4b1e      	ldr	r3, [pc, #120]	; (403210 <task_io+0x8c>)
  403198:	4798      	blx	r3
	if (xSemaphoreLED == NULL)
  40319a:	6823      	ldr	r3, [r4, #0]
  40319c:	b133      	cbz	r3, 4031ac <task_io+0x28>
void task_io(void *pvParameters){
  40319e:	2500      	movs	r5, #0
	  if ((xSemaphoreTake(xSemaphoreLED, ( TickType_t ) 100) == pdTRUE)){
  4031a0:	4e1a      	ldr	r6, [pc, #104]	; (40320c <task_io+0x88>)
		}
	}
	
	else if(on == 1){
		if(id == 1){
			pio_clear(ELED1_PIO, ELED1_PIO_IDX_MASK);
  4031a2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40322c <task_io+0xa8>
		}
		if(id == 2){
			pio_clear(ELED2_PIO, ELED2_PIO_IDX_MASK);
  4031a6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403230 <task_io+0xac>
  4031aa:	e004      	b.n	4031b6 <task_io+0x32>
	printf("falha em criar o semaforo \n");
  4031ac:	4819      	ldr	r0, [pc, #100]	; (403214 <task_io+0x90>)
  4031ae:	4b1a      	ldr	r3, [pc, #104]	; (403218 <task_io+0x94>)
  4031b0:	4798      	blx	r3
  4031b2:	e7f4      	b.n	40319e <task_io+0x1a>
	  if (blinkiquito == 1){
  4031b4:	b955      	cbnz	r5, 4031cc <task_io+0x48>
	  if ((xSemaphoreTake(xSemaphoreLED, ( TickType_t ) 100) == pdTRUE)){
  4031b6:	2300      	movs	r3, #0
  4031b8:	2264      	movs	r2, #100	; 0x64
  4031ba:	4619      	mov	r1, r3
  4031bc:	6830      	ldr	r0, [r6, #0]
  4031be:	4c17      	ldr	r4, [pc, #92]	; (40321c <task_io+0x98>)
  4031c0:	47a0      	blx	r4
  4031c2:	2801      	cmp	r0, #1
  4031c4:	d1f6      	bne.n	4031b4 <task_io+0x30>
		 blinkiquito = !blinkiquito;
  4031c6:	f085 0501 	eor.w	r5, r5, #1
  4031ca:	e7f3      	b.n	4031b4 <task_io+0x30>
			pio_clear(ELED1_PIO, ELED1_PIO_IDX_MASK);
  4031cc:	2101      	movs	r1, #1
  4031ce:	4648      	mov	r0, r9
  4031d0:	4c13      	ldr	r4, [pc, #76]	; (403220 <task_io+0x9c>)
  4031d2:	47a0      	blx	r4
			pio_clear(ELED2_PIO, ELED2_PIO_IDX_MASK);
  4031d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4031d8:	4640      	mov	r0, r8
  4031da:	47a0      	blx	r4
		}
		if(id == 3){
			pio_clear(ELED3_PIO, ELED3_PIO_IDX_MASK);
  4031dc:	f8df a054 	ldr.w	sl, [pc, #84]	; 403234 <task_io+0xb0>
  4031e0:	2104      	movs	r1, #4
  4031e2:	4650      	mov	r0, sl
  4031e4:	47a0      	blx	r4
		  		  vTaskDelay(200);
  4031e6:	20c8      	movs	r0, #200	; 0xc8
  4031e8:	4f0e      	ldr	r7, [pc, #56]	; (403224 <task_io+0xa0>)
  4031ea:	47b8      	blx	r7
			pio_set(ELED1_PIO, ELED1_PIO_IDX_MASK);
  4031ec:	2101      	movs	r1, #1
  4031ee:	4648      	mov	r0, r9
  4031f0:	4c0d      	ldr	r4, [pc, #52]	; (403228 <task_io+0xa4>)
  4031f2:	47a0      	blx	r4
			pio_set(ELED2_PIO, ELED2_PIO_IDX_MASK);
  4031f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4031f8:	4640      	mov	r0, r8
  4031fa:	47a0      	blx	r4
			pio_set(ELED3_PIO, ELED3_PIO_IDX_MASK);
  4031fc:	2104      	movs	r1, #4
  4031fe:	4650      	mov	r0, sl
  403200:	47a0      	blx	r4
		  		  vTaskDelay(200);
  403202:	20c8      	movs	r0, #200	; 0xc8
  403204:	47b8      	blx	r7
  403206:	e7d6      	b.n	4031b6 <task_io+0x32>
  403208:	00400c3d 	.word	0x00400c3d
  40320c:	2040c62c 	.word	0x2040c62c
  403210:	00403049 	.word	0x00403049
  403214:	0040719c 	.word	0x0040719c
  403218:	004034ad 	.word	0x004034ad
  40321c:	00400f09 	.word	0x00400f09
  403220:	004023e5 	.word	0x004023e5
  403224:	00401659 	.word	0x00401659
  403228:	004023e1 	.word	0x004023e1
  40322c:	400e0e00 	.word	0x400e0e00
  403230:	400e1200 	.word	0x400e1200
  403234:	400e1000 	.word	0x400e1000

00403238 <protocol_check_led>:
		}
	}
}

int protocol_check_led(char *string){
  403238:	b508      	push	{r3, lr}
	char led =  "LEDS";
	if(strcmp(string, "LEDS") == 0){
  40323a:	4903      	ldr	r1, [pc, #12]	; (403248 <protocol_check_led+0x10>)
  40323c:	4b03      	ldr	r3, [pc, #12]	; (40324c <protocol_check_led+0x14>)
  40323e:	4798      	blx	r3
		return 1;
	}
	else{
		return 0;
	}
}
  403240:	fab0 f080 	clz	r0, r0
  403244:	0940      	lsrs	r0, r0, #5
  403246:	bd08      	pop	{r3, pc}
  403248:	00407194 	.word	0x00407194
  40324c:	00403869 	.word	0x00403869

00403250 <task_string>:
void task_string(void *pvParameters){
  403250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403254:	b08e      	sub	sp, #56	; 0x38
	xQueueUART = xQueueCreate(52, sizeof(char));
  403256:	2200      	movs	r2, #0
  403258:	2101      	movs	r1, #1
  40325a:	2034      	movs	r0, #52	; 0x34
  40325c:	4c24      	ldr	r4, [pc, #144]	; (4032f0 <task_string+0xa0>)
  40325e:	47a0      	blx	r4
  403260:	4b24      	ldr	r3, [pc, #144]	; (4032f4 <task_string+0xa4>)
  403262:	6018      	str	r0, [r3, #0]
	xQueueOLED = xQueueCreate(2, sizeof(char[52]));
  403264:	2200      	movs	r2, #0
  403266:	2134      	movs	r1, #52	; 0x34
  403268:	2002      	movs	r0, #2
  40326a:	47a0      	blx	r4
  40326c:	4b22      	ldr	r3, [pc, #136]	; (4032f8 <task_string+0xa8>)
  40326e:	6018      	str	r0, [r3, #0]
	usart_enable_interrupt(CONF_UART, US_IER_RXRDY);
  403270:	2101      	movs	r1, #1
  403272:	4822      	ldr	r0, [pc, #136]	; (4032fc <task_string+0xac>)
  403274:	4b22      	ldr	r3, [pc, #136]	; (403300 <task_string+0xb0>)
  403276:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403278:	4b22      	ldr	r3, [pc, #136]	; (403304 <task_string+0xb4>)
  40327a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40327e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403280:	22a0      	movs	r2, #160	; 0xa0
  403282:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
	uint i = 0;
  403286:	2400      	movs	r4, #0
		if (xQueueReceive( xQueueUART, &b[i], ( TickType_t )  10 / portTICK_PERIOD_MS)){	
  403288:	4e1a      	ldr	r6, [pc, #104]	; (4032f4 <task_string+0xa4>)
  40328a:	4d1f      	ldr	r5, [pc, #124]	; (403308 <task_string+0xb8>)
					printf("recebido: %s\n", b);
  40328c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40331c <task_string+0xcc>
  403290:	e015      	b.n	4032be <task_string+0x6e>
					b[i] = NULL;
  403292:	ab0e      	add	r3, sp, #56	; 0x38
  403294:	441c      	add	r4, r3
  403296:	2700      	movs	r7, #0
  403298:	f804 7c34 	strb.w	r7, [r4, #-52]
					printf("recebido: %s\n", b);
  40329c:	a901      	add	r1, sp, #4
  40329e:	4640      	mov	r0, r8
  4032a0:	4b1a      	ldr	r3, [pc, #104]	; (40330c <task_string+0xbc>)
  4032a2:	4798      	blx	r3
					xQueueSend(xQueueOLED, &b, 10);
  4032a4:	463b      	mov	r3, r7
  4032a6:	220a      	movs	r2, #10
  4032a8:	a901      	add	r1, sp, #4
  4032aa:	4813      	ldr	r0, [pc, #76]	; (4032f8 <task_string+0xa8>)
  4032ac:	6800      	ldr	r0, [r0, #0]
  4032ae:	4c18      	ldr	r4, [pc, #96]	; (403310 <task_string+0xc0>)
  4032b0:	47a0      	blx	r4
					if (protocol_check_led(b) == 1){
  4032b2:	a801      	add	r0, sp, #4
  4032b4:	4b17      	ldr	r3, [pc, #92]	; (403314 <task_string+0xc4>)
  4032b6:	4798      	blx	r3
  4032b8:	2801      	cmp	r0, #1
  4032ba:	d010      	beq.n	4032de <task_string+0x8e>
					i=0;
  4032bc:	2400      	movs	r4, #0
		if (xQueueReceive( xQueueUART, &b[i], ( TickType_t )  10 / portTICK_PERIOD_MS)){	
  4032be:	2300      	movs	r3, #0
  4032c0:	220a      	movs	r2, #10
  4032c2:	a901      	add	r1, sp, #4
  4032c4:	4421      	add	r1, r4
  4032c6:	6830      	ldr	r0, [r6, #0]
  4032c8:	47a8      	blx	r5
  4032ca:	2800      	cmp	r0, #0
  4032cc:	d0f7      	beq.n	4032be <task_string+0x6e>
				if(b[i]=='\n'){
  4032ce:	ab0e      	add	r3, sp, #56	; 0x38
  4032d0:	4423      	add	r3, r4
  4032d2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
  4032d6:	2b0a      	cmp	r3, #10
  4032d8:	d0db      	beq.n	403292 <task_string+0x42>
				i++;
  4032da:	3401      	adds	r4, #1
  4032dc:	e7ef      	b.n	4032be <task_string+0x6e>
						xSemaphoreGive(xSemaphoreLED);
  4032de:	463b      	mov	r3, r7
  4032e0:	463a      	mov	r2, r7
  4032e2:	4639      	mov	r1, r7
  4032e4:	480c      	ldr	r0, [pc, #48]	; (403318 <task_string+0xc8>)
  4032e6:	6800      	ldr	r0, [r0, #0]
  4032e8:	47a0      	blx	r4
					i=0;
  4032ea:	463c      	mov	r4, r7
  4032ec:	e7e7      	b.n	4032be <task_string+0x6e>
  4032ee:	bf00      	nop
  4032f0:	00400c3d 	.word	0x00400c3d
  4032f4:	2040c634 	.word	0x2040c634
  4032f8:	2040c630 	.word	0x2040c630
  4032fc:	40028000 	.word	0x40028000
  403300:	00402a95 	.word	0x00402a95
  403304:	e000e100 	.word	0xe000e100
  403308:	00400f09 	.word	0x00400f09
  40330c:	004034ad 	.word	0x004034ad
  403310:	00400c8d 	.word	0x00400c8d
  403314:	00403239 	.word	0x00403239
  403318:	2040c62c 	.word	0x2040c62c
  40331c:	004071b8 	.word	0x004071b8

00403320 <main>:

/************************************************************************/
/* MAIN                                                                 */
/************************************************************************/
int main(void)
{
  403320:	b500      	push	{lr}
  403322:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  403324:	4b32      	ldr	r3, [pc, #200]	; (4033f0 <main+0xd0>)
  403326:	4798      	blx	r3
	board_init();
  403328:	4b32      	ldr	r3, [pc, #200]	; (4033f4 <main+0xd4>)
  40332a:	4798      	blx	r3
  40332c:	200e      	movs	r0, #14
  40332e:	4e32      	ldr	r6, [pc, #200]	; (4033f8 <main+0xd8>)
  403330:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403332:	4d32      	ldr	r5, [pc, #200]	; (4033fc <main+0xdc>)
  403334:	4b32      	ldr	r3, [pc, #200]	; (403400 <main+0xe0>)
  403336:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403338:	4a32      	ldr	r2, [pc, #200]	; (403404 <main+0xe4>)
  40333a:	4b33      	ldr	r3, [pc, #204]	; (403408 <main+0xe8>)
  40333c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40333e:	4a33      	ldr	r2, [pc, #204]	; (40340c <main+0xec>)
  403340:	4b33      	ldr	r3, [pc, #204]	; (403410 <main+0xf0>)
  403342:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403344:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403348:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40334a:	23c0      	movs	r3, #192	; 0xc0
  40334c:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40334e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403352:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403354:	2400      	movs	r4, #0
  403356:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403358:	9408      	str	r4, [sp, #32]
  40335a:	200e      	movs	r0, #14
  40335c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40335e:	4a2d      	ldr	r2, [pc, #180]	; (403414 <main+0xf4>)
  403360:	a904      	add	r1, sp, #16
  403362:	4628      	mov	r0, r5
  403364:	4b2c      	ldr	r3, [pc, #176]	; (403418 <main+0xf8>)
  403366:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403368:	4628      	mov	r0, r5
  40336a:	4b2c      	ldr	r3, [pc, #176]	; (40341c <main+0xfc>)
  40336c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40336e:	4628      	mov	r0, r5
  403370:	4b2b      	ldr	r3, [pc, #172]	; (403420 <main+0x100>)
  403372:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403374:	4e2b      	ldr	r6, [pc, #172]	; (403424 <main+0x104>)
  403376:	6833      	ldr	r3, [r6, #0]
  403378:	4621      	mov	r1, r4
  40337a:	6898      	ldr	r0, [r3, #8]
  40337c:	4d2a      	ldr	r5, [pc, #168]	; (403428 <main+0x108>)
  40337e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403380:	6833      	ldr	r3, [r6, #0]
  403382:	4621      	mov	r1, r4
  403384:	6858      	ldr	r0, [r3, #4]
  403386:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
   
	if (xTaskCreate(task_io, "io", TASK_IO_STACK_SIZE, NULL, TASK_IO_STACK_PRIORITY, NULL) != pdPASS) {
  403388:	9403      	str	r4, [sp, #12]
  40338a:	9402      	str	r4, [sp, #8]
  40338c:	9401      	str	r4, [sp, #4]
  40338e:	9400      	str	r4, [sp, #0]
  403390:	4623      	mov	r3, r4
  403392:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403396:	4925      	ldr	r1, [pc, #148]	; (40342c <main+0x10c>)
  403398:	4825      	ldr	r0, [pc, #148]	; (403430 <main+0x110>)
  40339a:	4c26      	ldr	r4, [pc, #152]	; (403434 <main+0x114>)
  40339c:	47a0      	blx	r4
  40339e:	2801      	cmp	r0, #1
  4033a0:	d002      	beq.n	4033a8 <main+0x88>
		printf("Failed to create io task\r\n");
  4033a2:	4825      	ldr	r0, [pc, #148]	; (403438 <main+0x118>)
  4033a4:	4b25      	ldr	r3, [pc, #148]	; (40343c <main+0x11c>)
  4033a6:	4798      	blx	r3
	}
		
	if (xTaskCreate(task_string, "string", TASK_STRING_STACK_SIZE, NULL, TASK_STRING_STACK_PRIORITY, NULL) != pdPASS) {
  4033a8:	2300      	movs	r3, #0
  4033aa:	9303      	str	r3, [sp, #12]
  4033ac:	9302      	str	r3, [sp, #8]
  4033ae:	9301      	str	r3, [sp, #4]
  4033b0:	9300      	str	r3, [sp, #0]
  4033b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4033b6:	4922      	ldr	r1, [pc, #136]	; (403440 <main+0x120>)
  4033b8:	4822      	ldr	r0, [pc, #136]	; (403444 <main+0x124>)
  4033ba:	4c1e      	ldr	r4, [pc, #120]	; (403434 <main+0x114>)
  4033bc:	47a0      	blx	r4
  4033be:	2801      	cmp	r0, #1
  4033c0:	d002      	beq.n	4033c8 <main+0xa8>
		printf("Failed to create string task\r\n");
  4033c2:	4821      	ldr	r0, [pc, #132]	; (403448 <main+0x128>)
  4033c4:	4b1d      	ldr	r3, [pc, #116]	; (40343c <main+0x11c>)
  4033c6:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_oled1, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4033c8:	2300      	movs	r3, #0
  4033ca:	9303      	str	r3, [sp, #12]
  4033cc:	9302      	str	r3, [sp, #8]
  4033ce:	9301      	str	r3, [sp, #4]
  4033d0:	9300      	str	r3, [sp, #0]
  4033d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4033d6:	491d      	ldr	r1, [pc, #116]	; (40344c <main+0x12c>)
  4033d8:	481d      	ldr	r0, [pc, #116]	; (403450 <main+0x130>)
  4033da:	4c16      	ldr	r4, [pc, #88]	; (403434 <main+0x114>)
  4033dc:	47a0      	blx	r4
  4033de:	2801      	cmp	r0, #1
  4033e0:	d002      	beq.n	4033e8 <main+0xc8>
		printf("Failed to create oled task\r\n");
  4033e2:	481c      	ldr	r0, [pc, #112]	; (403454 <main+0x134>)
  4033e4:	4b15      	ldr	r3, [pc, #84]	; (40343c <main+0x11c>)
  4033e6:	4798      	blx	r3
	}


	vTaskStartScheduler();
  4033e8:	4b1b      	ldr	r3, [pc, #108]	; (403458 <main+0x138>)
  4033ea:	4798      	blx	r3
  4033ec:	e7fe      	b.n	4033ec <main+0xcc>
  4033ee:	bf00      	nop
  4033f0:	00401f19 	.word	0x00401f19
  4033f4:	00402015 	.word	0x00402015
  4033f8:	004027ed 	.word	0x004027ed
  4033fc:	40028000 	.word	0x40028000
  403400:	2040c628 	.word	0x2040c628
  403404:	00402ef9 	.word	0x00402ef9
  403408:	2040c624 	.word	0x2040c624
  40340c:	00402d65 	.word	0x00402d65
  403410:	2040c620 	.word	0x2040c620
  403414:	08f0d180 	.word	0x08f0d180
  403418:	00402a35 	.word	0x00402a35
  40341c:	00402a89 	.word	0x00402a89
  403420:	00402a8f 	.word	0x00402a8f
  403424:	20400024 	.word	0x20400024
  403428:	004036a5 	.word	0x004036a5
  40342c:	00407124 	.word	0x00407124
  403430:	00403185 	.word	0x00403185
  403434:	00401195 	.word	0x00401195
  403438:	00407128 	.word	0x00407128
  40343c:	004034ad 	.word	0x004034ad
  403440:	00407144 	.word	0x00407144
  403444:	00403251 	.word	0x00403251
  403448:	0040714c 	.word	0x0040714c
  40344c:	0040716c 	.word	0x0040716c
  403450:	00402ead 	.word	0x00402ead
  403454:	00407174 	.word	0x00407174
  403458:	00401391 	.word	0x00401391

0040345c <__libc_init_array>:
  40345c:	b570      	push	{r4, r5, r6, lr}
  40345e:	4e0f      	ldr	r6, [pc, #60]	; (40349c <__libc_init_array+0x40>)
  403460:	4d0f      	ldr	r5, [pc, #60]	; (4034a0 <__libc_init_array+0x44>)
  403462:	1b76      	subs	r6, r6, r5
  403464:	10b6      	asrs	r6, r6, #2
  403466:	bf18      	it	ne
  403468:	2400      	movne	r4, #0
  40346a:	d005      	beq.n	403478 <__libc_init_array+0x1c>
  40346c:	3401      	adds	r4, #1
  40346e:	f855 3b04 	ldr.w	r3, [r5], #4
  403472:	4798      	blx	r3
  403474:	42a6      	cmp	r6, r4
  403476:	d1f9      	bne.n	40346c <__libc_init_array+0x10>
  403478:	4e0a      	ldr	r6, [pc, #40]	; (4034a4 <__libc_init_array+0x48>)
  40347a:	4d0b      	ldr	r5, [pc, #44]	; (4034a8 <__libc_init_array+0x4c>)
  40347c:	1b76      	subs	r6, r6, r5
  40347e:	f003 ff63 	bl	407348 <_init>
  403482:	10b6      	asrs	r6, r6, #2
  403484:	bf18      	it	ne
  403486:	2400      	movne	r4, #0
  403488:	d006      	beq.n	403498 <__libc_init_array+0x3c>
  40348a:	3401      	adds	r4, #1
  40348c:	f855 3b04 	ldr.w	r3, [r5], #4
  403490:	4798      	blx	r3
  403492:	42a6      	cmp	r6, r4
  403494:	d1f9      	bne.n	40348a <__libc_init_array+0x2e>
  403496:	bd70      	pop	{r4, r5, r6, pc}
  403498:	bd70      	pop	{r4, r5, r6, pc}
  40349a:	bf00      	nop
  40349c:	00407354 	.word	0x00407354
  4034a0:	00407354 	.word	0x00407354
  4034a4:	0040735c 	.word	0x0040735c
  4034a8:	00407354 	.word	0x00407354

004034ac <iprintf>:
  4034ac:	b40f      	push	{r0, r1, r2, r3}
  4034ae:	b500      	push	{lr}
  4034b0:	4907      	ldr	r1, [pc, #28]	; (4034d0 <iprintf+0x24>)
  4034b2:	b083      	sub	sp, #12
  4034b4:	ab04      	add	r3, sp, #16
  4034b6:	6808      	ldr	r0, [r1, #0]
  4034b8:	f853 2b04 	ldr.w	r2, [r3], #4
  4034bc:	6881      	ldr	r1, [r0, #8]
  4034be:	9301      	str	r3, [sp, #4]
  4034c0:	f000 fbec 	bl	403c9c <_vfiprintf_r>
  4034c4:	b003      	add	sp, #12
  4034c6:	f85d eb04 	ldr.w	lr, [sp], #4
  4034ca:	b004      	add	sp, #16
  4034cc:	4770      	bx	lr
  4034ce:	bf00      	nop
  4034d0:	20400024 	.word	0x20400024

004034d4 <memcpy>:
  4034d4:	4684      	mov	ip, r0
  4034d6:	ea41 0300 	orr.w	r3, r1, r0
  4034da:	f013 0303 	ands.w	r3, r3, #3
  4034de:	d16d      	bne.n	4035bc <memcpy+0xe8>
  4034e0:	3a40      	subs	r2, #64	; 0x40
  4034e2:	d341      	bcc.n	403568 <memcpy+0x94>
  4034e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e8:	f840 3b04 	str.w	r3, [r0], #4
  4034ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f0:	f840 3b04 	str.w	r3, [r0], #4
  4034f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f8:	f840 3b04 	str.w	r3, [r0], #4
  4034fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403500:	f840 3b04 	str.w	r3, [r0], #4
  403504:	f851 3b04 	ldr.w	r3, [r1], #4
  403508:	f840 3b04 	str.w	r3, [r0], #4
  40350c:	f851 3b04 	ldr.w	r3, [r1], #4
  403510:	f840 3b04 	str.w	r3, [r0], #4
  403514:	f851 3b04 	ldr.w	r3, [r1], #4
  403518:	f840 3b04 	str.w	r3, [r0], #4
  40351c:	f851 3b04 	ldr.w	r3, [r1], #4
  403520:	f840 3b04 	str.w	r3, [r0], #4
  403524:	f851 3b04 	ldr.w	r3, [r1], #4
  403528:	f840 3b04 	str.w	r3, [r0], #4
  40352c:	f851 3b04 	ldr.w	r3, [r1], #4
  403530:	f840 3b04 	str.w	r3, [r0], #4
  403534:	f851 3b04 	ldr.w	r3, [r1], #4
  403538:	f840 3b04 	str.w	r3, [r0], #4
  40353c:	f851 3b04 	ldr.w	r3, [r1], #4
  403540:	f840 3b04 	str.w	r3, [r0], #4
  403544:	f851 3b04 	ldr.w	r3, [r1], #4
  403548:	f840 3b04 	str.w	r3, [r0], #4
  40354c:	f851 3b04 	ldr.w	r3, [r1], #4
  403550:	f840 3b04 	str.w	r3, [r0], #4
  403554:	f851 3b04 	ldr.w	r3, [r1], #4
  403558:	f840 3b04 	str.w	r3, [r0], #4
  40355c:	f851 3b04 	ldr.w	r3, [r1], #4
  403560:	f840 3b04 	str.w	r3, [r0], #4
  403564:	3a40      	subs	r2, #64	; 0x40
  403566:	d2bd      	bcs.n	4034e4 <memcpy+0x10>
  403568:	3230      	adds	r2, #48	; 0x30
  40356a:	d311      	bcc.n	403590 <memcpy+0xbc>
  40356c:	f851 3b04 	ldr.w	r3, [r1], #4
  403570:	f840 3b04 	str.w	r3, [r0], #4
  403574:	f851 3b04 	ldr.w	r3, [r1], #4
  403578:	f840 3b04 	str.w	r3, [r0], #4
  40357c:	f851 3b04 	ldr.w	r3, [r1], #4
  403580:	f840 3b04 	str.w	r3, [r0], #4
  403584:	f851 3b04 	ldr.w	r3, [r1], #4
  403588:	f840 3b04 	str.w	r3, [r0], #4
  40358c:	3a10      	subs	r2, #16
  40358e:	d2ed      	bcs.n	40356c <memcpy+0x98>
  403590:	320c      	adds	r2, #12
  403592:	d305      	bcc.n	4035a0 <memcpy+0xcc>
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f840 3b04 	str.w	r3, [r0], #4
  40359c:	3a04      	subs	r2, #4
  40359e:	d2f9      	bcs.n	403594 <memcpy+0xc0>
  4035a0:	3204      	adds	r2, #4
  4035a2:	d008      	beq.n	4035b6 <memcpy+0xe2>
  4035a4:	07d2      	lsls	r2, r2, #31
  4035a6:	bf1c      	itt	ne
  4035a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4035b0:	d301      	bcc.n	4035b6 <memcpy+0xe2>
  4035b2:	880b      	ldrh	r3, [r1, #0]
  4035b4:	8003      	strh	r3, [r0, #0]
  4035b6:	4660      	mov	r0, ip
  4035b8:	4770      	bx	lr
  4035ba:	bf00      	nop
  4035bc:	2a08      	cmp	r2, #8
  4035be:	d313      	bcc.n	4035e8 <memcpy+0x114>
  4035c0:	078b      	lsls	r3, r1, #30
  4035c2:	d08d      	beq.n	4034e0 <memcpy+0xc>
  4035c4:	f010 0303 	ands.w	r3, r0, #3
  4035c8:	d08a      	beq.n	4034e0 <memcpy+0xc>
  4035ca:	f1c3 0304 	rsb	r3, r3, #4
  4035ce:	1ad2      	subs	r2, r2, r3
  4035d0:	07db      	lsls	r3, r3, #31
  4035d2:	bf1c      	itt	ne
  4035d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4035dc:	d380      	bcc.n	4034e0 <memcpy+0xc>
  4035de:	f831 3b02 	ldrh.w	r3, [r1], #2
  4035e2:	f820 3b02 	strh.w	r3, [r0], #2
  4035e6:	e77b      	b.n	4034e0 <memcpy+0xc>
  4035e8:	3a04      	subs	r2, #4
  4035ea:	d3d9      	bcc.n	4035a0 <memcpy+0xcc>
  4035ec:	3a01      	subs	r2, #1
  4035ee:	f811 3b01 	ldrb.w	r3, [r1], #1
  4035f2:	f800 3b01 	strb.w	r3, [r0], #1
  4035f6:	d2f9      	bcs.n	4035ec <memcpy+0x118>
  4035f8:	780b      	ldrb	r3, [r1, #0]
  4035fa:	7003      	strb	r3, [r0, #0]
  4035fc:	784b      	ldrb	r3, [r1, #1]
  4035fe:	7043      	strb	r3, [r0, #1]
  403600:	788b      	ldrb	r3, [r1, #2]
  403602:	7083      	strb	r3, [r0, #2]
  403604:	4660      	mov	r0, ip
  403606:	4770      	bx	lr

00403608 <memset>:
  403608:	b470      	push	{r4, r5, r6}
  40360a:	0786      	lsls	r6, r0, #30
  40360c:	d046      	beq.n	40369c <memset+0x94>
  40360e:	1e54      	subs	r4, r2, #1
  403610:	2a00      	cmp	r2, #0
  403612:	d041      	beq.n	403698 <memset+0x90>
  403614:	b2ca      	uxtb	r2, r1
  403616:	4603      	mov	r3, r0
  403618:	e002      	b.n	403620 <memset+0x18>
  40361a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40361e:	d33b      	bcc.n	403698 <memset+0x90>
  403620:	f803 2b01 	strb.w	r2, [r3], #1
  403624:	079d      	lsls	r5, r3, #30
  403626:	d1f8      	bne.n	40361a <memset+0x12>
  403628:	2c03      	cmp	r4, #3
  40362a:	d92e      	bls.n	40368a <memset+0x82>
  40362c:	b2cd      	uxtb	r5, r1
  40362e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403632:	2c0f      	cmp	r4, #15
  403634:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403638:	d919      	bls.n	40366e <memset+0x66>
  40363a:	f103 0210 	add.w	r2, r3, #16
  40363e:	4626      	mov	r6, r4
  403640:	3e10      	subs	r6, #16
  403642:	2e0f      	cmp	r6, #15
  403644:	f842 5c10 	str.w	r5, [r2, #-16]
  403648:	f842 5c0c 	str.w	r5, [r2, #-12]
  40364c:	f842 5c08 	str.w	r5, [r2, #-8]
  403650:	f842 5c04 	str.w	r5, [r2, #-4]
  403654:	f102 0210 	add.w	r2, r2, #16
  403658:	d8f2      	bhi.n	403640 <memset+0x38>
  40365a:	f1a4 0210 	sub.w	r2, r4, #16
  40365e:	f022 020f 	bic.w	r2, r2, #15
  403662:	f004 040f 	and.w	r4, r4, #15
  403666:	3210      	adds	r2, #16
  403668:	2c03      	cmp	r4, #3
  40366a:	4413      	add	r3, r2
  40366c:	d90d      	bls.n	40368a <memset+0x82>
  40366e:	461e      	mov	r6, r3
  403670:	4622      	mov	r2, r4
  403672:	3a04      	subs	r2, #4
  403674:	2a03      	cmp	r2, #3
  403676:	f846 5b04 	str.w	r5, [r6], #4
  40367a:	d8fa      	bhi.n	403672 <memset+0x6a>
  40367c:	1f22      	subs	r2, r4, #4
  40367e:	f022 0203 	bic.w	r2, r2, #3
  403682:	3204      	adds	r2, #4
  403684:	4413      	add	r3, r2
  403686:	f004 0403 	and.w	r4, r4, #3
  40368a:	b12c      	cbz	r4, 403698 <memset+0x90>
  40368c:	b2c9      	uxtb	r1, r1
  40368e:	441c      	add	r4, r3
  403690:	f803 1b01 	strb.w	r1, [r3], #1
  403694:	429c      	cmp	r4, r3
  403696:	d1fb      	bne.n	403690 <memset+0x88>
  403698:	bc70      	pop	{r4, r5, r6}
  40369a:	4770      	bx	lr
  40369c:	4614      	mov	r4, r2
  40369e:	4603      	mov	r3, r0
  4036a0:	e7c2      	b.n	403628 <memset+0x20>
  4036a2:	bf00      	nop

004036a4 <setbuf>:
  4036a4:	2900      	cmp	r1, #0
  4036a6:	bf0c      	ite	eq
  4036a8:	2202      	moveq	r2, #2
  4036aa:	2200      	movne	r2, #0
  4036ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036b0:	f000 b800 	b.w	4036b4 <setvbuf>

004036b4 <setvbuf>:
  4036b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4036b8:	4c61      	ldr	r4, [pc, #388]	; (403840 <setvbuf+0x18c>)
  4036ba:	6825      	ldr	r5, [r4, #0]
  4036bc:	b083      	sub	sp, #12
  4036be:	4604      	mov	r4, r0
  4036c0:	460f      	mov	r7, r1
  4036c2:	4690      	mov	r8, r2
  4036c4:	461e      	mov	r6, r3
  4036c6:	b115      	cbz	r5, 4036ce <setvbuf+0x1a>
  4036c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4036ca:	2b00      	cmp	r3, #0
  4036cc:	d064      	beq.n	403798 <setvbuf+0xe4>
  4036ce:	f1b8 0f02 	cmp.w	r8, #2
  4036d2:	d006      	beq.n	4036e2 <setvbuf+0x2e>
  4036d4:	f1b8 0f01 	cmp.w	r8, #1
  4036d8:	f200 809f 	bhi.w	40381a <setvbuf+0x166>
  4036dc:	2e00      	cmp	r6, #0
  4036de:	f2c0 809c 	blt.w	40381a <setvbuf+0x166>
  4036e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4036e4:	07d8      	lsls	r0, r3, #31
  4036e6:	d534      	bpl.n	403752 <setvbuf+0x9e>
  4036e8:	4621      	mov	r1, r4
  4036ea:	4628      	mov	r0, r5
  4036ec:	f001 fa74 	bl	404bd8 <_fflush_r>
  4036f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4036f2:	b141      	cbz	r1, 403706 <setvbuf+0x52>
  4036f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4036f8:	4299      	cmp	r1, r3
  4036fa:	d002      	beq.n	403702 <setvbuf+0x4e>
  4036fc:	4628      	mov	r0, r5
  4036fe:	f001 fbe9 	bl	404ed4 <_free_r>
  403702:	2300      	movs	r3, #0
  403704:	6323      	str	r3, [r4, #48]	; 0x30
  403706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40370a:	2200      	movs	r2, #0
  40370c:	61a2      	str	r2, [r4, #24]
  40370e:	6062      	str	r2, [r4, #4]
  403710:	061a      	lsls	r2, r3, #24
  403712:	d43a      	bmi.n	40378a <setvbuf+0xd6>
  403714:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403718:	f023 0303 	bic.w	r3, r3, #3
  40371c:	f1b8 0f02 	cmp.w	r8, #2
  403720:	81a3      	strh	r3, [r4, #12]
  403722:	d01d      	beq.n	403760 <setvbuf+0xac>
  403724:	ab01      	add	r3, sp, #4
  403726:	466a      	mov	r2, sp
  403728:	4621      	mov	r1, r4
  40372a:	4628      	mov	r0, r5
  40372c:	f001 fe70 	bl	405410 <__swhatbuf_r>
  403730:	89a3      	ldrh	r3, [r4, #12]
  403732:	4318      	orrs	r0, r3
  403734:	81a0      	strh	r0, [r4, #12]
  403736:	2e00      	cmp	r6, #0
  403738:	d132      	bne.n	4037a0 <setvbuf+0xec>
  40373a:	9e00      	ldr	r6, [sp, #0]
  40373c:	4630      	mov	r0, r6
  40373e:	f001 fedf 	bl	405500 <malloc>
  403742:	4607      	mov	r7, r0
  403744:	2800      	cmp	r0, #0
  403746:	d06b      	beq.n	403820 <setvbuf+0x16c>
  403748:	89a3      	ldrh	r3, [r4, #12]
  40374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40374e:	81a3      	strh	r3, [r4, #12]
  403750:	e028      	b.n	4037a4 <setvbuf+0xf0>
  403752:	89a3      	ldrh	r3, [r4, #12]
  403754:	0599      	lsls	r1, r3, #22
  403756:	d4c7      	bmi.n	4036e8 <setvbuf+0x34>
  403758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40375a:	f001 fe55 	bl	405408 <__retarget_lock_acquire_recursive>
  40375e:	e7c3      	b.n	4036e8 <setvbuf+0x34>
  403760:	2500      	movs	r5, #0
  403762:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403764:	2600      	movs	r6, #0
  403766:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40376a:	f043 0302 	orr.w	r3, r3, #2
  40376e:	2001      	movs	r0, #1
  403770:	60a6      	str	r6, [r4, #8]
  403772:	07ce      	lsls	r6, r1, #31
  403774:	81a3      	strh	r3, [r4, #12]
  403776:	6022      	str	r2, [r4, #0]
  403778:	6122      	str	r2, [r4, #16]
  40377a:	6160      	str	r0, [r4, #20]
  40377c:	d401      	bmi.n	403782 <setvbuf+0xce>
  40377e:	0598      	lsls	r0, r3, #22
  403780:	d53e      	bpl.n	403800 <setvbuf+0x14c>
  403782:	4628      	mov	r0, r5
  403784:	b003      	add	sp, #12
  403786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40378a:	6921      	ldr	r1, [r4, #16]
  40378c:	4628      	mov	r0, r5
  40378e:	f001 fba1 	bl	404ed4 <_free_r>
  403792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403796:	e7bd      	b.n	403714 <setvbuf+0x60>
  403798:	4628      	mov	r0, r5
  40379a:	f001 fa75 	bl	404c88 <__sinit>
  40379e:	e796      	b.n	4036ce <setvbuf+0x1a>
  4037a0:	2f00      	cmp	r7, #0
  4037a2:	d0cb      	beq.n	40373c <setvbuf+0x88>
  4037a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4037a6:	2b00      	cmp	r3, #0
  4037a8:	d033      	beq.n	403812 <setvbuf+0x15e>
  4037aa:	9b00      	ldr	r3, [sp, #0]
  4037ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037b0:	6027      	str	r7, [r4, #0]
  4037b2:	429e      	cmp	r6, r3
  4037b4:	bf1c      	itt	ne
  4037b6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4037ba:	81a2      	strhne	r2, [r4, #12]
  4037bc:	f1b8 0f01 	cmp.w	r8, #1
  4037c0:	bf04      	itt	eq
  4037c2:	f042 0201 	orreq.w	r2, r2, #1
  4037c6:	81a2      	strheq	r2, [r4, #12]
  4037c8:	b292      	uxth	r2, r2
  4037ca:	f012 0308 	ands.w	r3, r2, #8
  4037ce:	6127      	str	r7, [r4, #16]
  4037d0:	6166      	str	r6, [r4, #20]
  4037d2:	d00e      	beq.n	4037f2 <setvbuf+0x13e>
  4037d4:	07d1      	lsls	r1, r2, #31
  4037d6:	d51a      	bpl.n	40380e <setvbuf+0x15a>
  4037d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4037da:	4276      	negs	r6, r6
  4037dc:	2300      	movs	r3, #0
  4037de:	f015 0501 	ands.w	r5, r5, #1
  4037e2:	61a6      	str	r6, [r4, #24]
  4037e4:	60a3      	str	r3, [r4, #8]
  4037e6:	d009      	beq.n	4037fc <setvbuf+0x148>
  4037e8:	2500      	movs	r5, #0
  4037ea:	4628      	mov	r0, r5
  4037ec:	b003      	add	sp, #12
  4037ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4037f2:	60a3      	str	r3, [r4, #8]
  4037f4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4037f6:	f015 0501 	ands.w	r5, r5, #1
  4037fa:	d1f5      	bne.n	4037e8 <setvbuf+0x134>
  4037fc:	0593      	lsls	r3, r2, #22
  4037fe:	d4c0      	bmi.n	403782 <setvbuf+0xce>
  403800:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403802:	f001 fe03 	bl	40540c <__retarget_lock_release_recursive>
  403806:	4628      	mov	r0, r5
  403808:	b003      	add	sp, #12
  40380a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40380e:	60a6      	str	r6, [r4, #8]
  403810:	e7f0      	b.n	4037f4 <setvbuf+0x140>
  403812:	4628      	mov	r0, r5
  403814:	f001 fa38 	bl	404c88 <__sinit>
  403818:	e7c7      	b.n	4037aa <setvbuf+0xf6>
  40381a:	f04f 35ff 	mov.w	r5, #4294967295
  40381e:	e7b0      	b.n	403782 <setvbuf+0xce>
  403820:	f8dd 9000 	ldr.w	r9, [sp]
  403824:	45b1      	cmp	r9, r6
  403826:	d004      	beq.n	403832 <setvbuf+0x17e>
  403828:	4648      	mov	r0, r9
  40382a:	f001 fe69 	bl	405500 <malloc>
  40382e:	4607      	mov	r7, r0
  403830:	b920      	cbnz	r0, 40383c <setvbuf+0x188>
  403832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403836:	f04f 35ff 	mov.w	r5, #4294967295
  40383a:	e792      	b.n	403762 <setvbuf+0xae>
  40383c:	464e      	mov	r6, r9
  40383e:	e783      	b.n	403748 <setvbuf+0x94>
  403840:	20400024 	.word	0x20400024
	...
  403860:	eba2 0003 	sub.w	r0, r2, r3
  403864:	4770      	bx	lr
  403866:	bf00      	nop

00403868 <strcmp>:
  403868:	7802      	ldrb	r2, [r0, #0]
  40386a:	780b      	ldrb	r3, [r1, #0]
  40386c:	2a01      	cmp	r2, #1
  40386e:	bf28      	it	cs
  403870:	429a      	cmpcs	r2, r3
  403872:	d1f5      	bne.n	403860 <setvbuf+0x1ac>
  403874:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  403878:	ea40 0401 	orr.w	r4, r0, r1
  40387c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403880:	f06f 0c00 	mvn.w	ip, #0
  403884:	ea4f 7244 	mov.w	r2, r4, lsl #29
  403888:	b312      	cbz	r2, 4038d0 <strcmp+0x68>
  40388a:	ea80 0401 	eor.w	r4, r0, r1
  40388e:	f014 0f07 	tst.w	r4, #7
  403892:	d16a      	bne.n	40396a <strcmp+0x102>
  403894:	f000 0407 	and.w	r4, r0, #7
  403898:	f020 0007 	bic.w	r0, r0, #7
  40389c:	f004 0503 	and.w	r5, r4, #3
  4038a0:	f021 0107 	bic.w	r1, r1, #7
  4038a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4038a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4038ac:	f014 0f04 	tst.w	r4, #4
  4038b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4038b4:	fa0c f405 	lsl.w	r4, ip, r5
  4038b8:	ea62 0204 	orn	r2, r2, r4
  4038bc:	ea66 0604 	orn	r6, r6, r4
  4038c0:	d00a      	beq.n	4038d8 <strcmp+0x70>
  4038c2:	ea63 0304 	orn	r3, r3, r4
  4038c6:	4662      	mov	r2, ip
  4038c8:	ea67 0704 	orn	r7, r7, r4
  4038cc:	4666      	mov	r6, ip
  4038ce:	e003      	b.n	4038d8 <strcmp+0x70>
  4038d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4038d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4038d8:	fa82 f54c 	uadd8	r5, r2, ip
  4038dc:	ea82 0406 	eor.w	r4, r2, r6
  4038e0:	faa4 f48c 	sel	r4, r4, ip
  4038e4:	bb6c      	cbnz	r4, 403942 <strcmp+0xda>
  4038e6:	fa83 f54c 	uadd8	r5, r3, ip
  4038ea:	ea83 0507 	eor.w	r5, r3, r7
  4038ee:	faa5 f58c 	sel	r5, r5, ip
  4038f2:	b995      	cbnz	r5, 40391a <strcmp+0xb2>
  4038f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4038f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4038fc:	fa82 f54c 	uadd8	r5, r2, ip
  403900:	ea82 0406 	eor.w	r4, r2, r6
  403904:	faa4 f48c 	sel	r4, r4, ip
  403908:	fa83 f54c 	uadd8	r5, r3, ip
  40390c:	ea83 0507 	eor.w	r5, r3, r7
  403910:	faa5 f58c 	sel	r5, r5, ip
  403914:	4325      	orrs	r5, r4
  403916:	d0db      	beq.n	4038d0 <strcmp+0x68>
  403918:	b99c      	cbnz	r4, 403942 <strcmp+0xda>
  40391a:	ba2d      	rev	r5, r5
  40391c:	fab5 f485 	clz	r4, r5
  403920:	f024 0407 	bic.w	r4, r4, #7
  403924:	fa27 f104 	lsr.w	r1, r7, r4
  403928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40392c:	fa23 f304 	lsr.w	r3, r3, r4
  403930:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  403934:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403938:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40393c:	eba0 0001 	sub.w	r0, r0, r1
  403940:	4770      	bx	lr
  403942:	ba24      	rev	r4, r4
  403944:	fab4 f484 	clz	r4, r4
  403948:	f024 0407 	bic.w	r4, r4, #7
  40394c:	fa26 f104 	lsr.w	r1, r6, r4
  403950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403954:	fa22 f204 	lsr.w	r2, r2, r4
  403958:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40395c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403960:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403964:	eba0 0001 	sub.w	r0, r0, r1
  403968:	4770      	bx	lr
  40396a:	f014 0f03 	tst.w	r4, #3
  40396e:	d13c      	bne.n	4039ea <strcmp+0x182>
  403970:	f010 0403 	ands.w	r4, r0, #3
  403974:	d128      	bne.n	4039c8 <strcmp+0x160>
  403976:	f850 2b08 	ldr.w	r2, [r0], #8
  40397a:	f851 3b08 	ldr.w	r3, [r1], #8
  40397e:	fa82 f54c 	uadd8	r5, r2, ip
  403982:	ea82 0503 	eor.w	r5, r2, r3
  403986:	faa5 f58c 	sel	r5, r5, ip
  40398a:	b95d      	cbnz	r5, 4039a4 <strcmp+0x13c>
  40398c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403990:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403994:	fa82 f54c 	uadd8	r5, r2, ip
  403998:	ea82 0503 	eor.w	r5, r2, r3
  40399c:	faa5 f58c 	sel	r5, r5, ip
  4039a0:	2d00      	cmp	r5, #0
  4039a2:	d0e8      	beq.n	403976 <strcmp+0x10e>
  4039a4:	ba2d      	rev	r5, r5
  4039a6:	fab5 f485 	clz	r4, r5
  4039aa:	f024 0407 	bic.w	r4, r4, #7
  4039ae:	fa23 f104 	lsr.w	r1, r3, r4
  4039b2:	fa22 f204 	lsr.w	r2, r2, r4
  4039b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4039ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4039c2:	eba0 0001 	sub.w	r0, r0, r1
  4039c6:	4770      	bx	lr
  4039c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4039cc:	f020 0003 	bic.w	r0, r0, #3
  4039d0:	f850 2b08 	ldr.w	r2, [r0], #8
  4039d4:	f021 0103 	bic.w	r1, r1, #3
  4039d8:	f851 3b08 	ldr.w	r3, [r1], #8
  4039dc:	fa0c f404 	lsl.w	r4, ip, r4
  4039e0:	ea62 0204 	orn	r2, r2, r4
  4039e4:	ea63 0304 	orn	r3, r3, r4
  4039e8:	e7c9      	b.n	40397e <strcmp+0x116>
  4039ea:	f010 0403 	ands.w	r4, r0, #3
  4039ee:	d01a      	beq.n	403a26 <strcmp+0x1be>
  4039f0:	eba1 0104 	sub.w	r1, r1, r4
  4039f4:	f020 0003 	bic.w	r0, r0, #3
  4039f8:	07e4      	lsls	r4, r4, #31
  4039fa:	f850 2b04 	ldr.w	r2, [r0], #4
  4039fe:	d006      	beq.n	403a0e <strcmp+0x1a6>
  403a00:	d20f      	bcs.n	403a22 <strcmp+0x1ba>
  403a02:	788b      	ldrb	r3, [r1, #2]
  403a04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  403a08:	1ae4      	subs	r4, r4, r3
  403a0a:	d106      	bne.n	403a1a <strcmp+0x1b2>
  403a0c:	b12b      	cbz	r3, 403a1a <strcmp+0x1b2>
  403a0e:	78cb      	ldrb	r3, [r1, #3]
  403a10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  403a14:	1ae4      	subs	r4, r4, r3
  403a16:	d100      	bne.n	403a1a <strcmp+0x1b2>
  403a18:	b91b      	cbnz	r3, 403a22 <strcmp+0x1ba>
  403a1a:	4620      	mov	r0, r4
  403a1c:	f85d 4b10 	ldr.w	r4, [sp], #16
  403a20:	4770      	bx	lr
  403a22:	f101 0104 	add.w	r1, r1, #4
  403a26:	f850 2b04 	ldr.w	r2, [r0], #4
  403a2a:	07cc      	lsls	r4, r1, #31
  403a2c:	f021 0103 	bic.w	r1, r1, #3
  403a30:	f851 3b04 	ldr.w	r3, [r1], #4
  403a34:	d848      	bhi.n	403ac8 <strcmp+0x260>
  403a36:	d224      	bcs.n	403a82 <strcmp+0x21a>
  403a38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  403a3c:	fa82 f54c 	uadd8	r5, r2, ip
  403a40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  403a44:	faa5 f58c 	sel	r5, r5, ip
  403a48:	d10a      	bne.n	403a60 <strcmp+0x1f8>
  403a4a:	b965      	cbnz	r5, 403a66 <strcmp+0x1fe>
  403a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a50:	ea84 0402 	eor.w	r4, r4, r2
  403a54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  403a58:	d10e      	bne.n	403a78 <strcmp+0x210>
  403a5a:	f850 2b04 	ldr.w	r2, [r0], #4
  403a5e:	e7eb      	b.n	403a38 <strcmp+0x1d0>
  403a60:	ea4f 2313 	mov.w	r3, r3, lsr #8
  403a64:	e055      	b.n	403b12 <strcmp+0x2aa>
  403a66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  403a6a:	d14d      	bne.n	403b08 <strcmp+0x2a0>
  403a6c:	7808      	ldrb	r0, [r1, #0]
  403a6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403a72:	f1c0 0000 	rsb	r0, r0, #0
  403a76:	4770      	bx	lr
  403a78:	ea4f 6212 	mov.w	r2, r2, lsr #24
  403a7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  403a80:	e047      	b.n	403b12 <strcmp+0x2aa>
  403a82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  403a86:	fa82 f54c 	uadd8	r5, r2, ip
  403a8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  403a8e:	faa5 f58c 	sel	r5, r5, ip
  403a92:	d10a      	bne.n	403aaa <strcmp+0x242>
  403a94:	b965      	cbnz	r5, 403ab0 <strcmp+0x248>
  403a96:	f851 3b04 	ldr.w	r3, [r1], #4
  403a9a:	ea84 0402 	eor.w	r4, r4, r2
  403a9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  403aa2:	d10c      	bne.n	403abe <strcmp+0x256>
  403aa4:	f850 2b04 	ldr.w	r2, [r0], #4
  403aa8:	e7eb      	b.n	403a82 <strcmp+0x21a>
  403aaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
  403aae:	e030      	b.n	403b12 <strcmp+0x2aa>
  403ab0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  403ab4:	d128      	bne.n	403b08 <strcmp+0x2a0>
  403ab6:	880b      	ldrh	r3, [r1, #0]
  403ab8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  403abc:	e029      	b.n	403b12 <strcmp+0x2aa>
  403abe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  403ac2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  403ac6:	e024      	b.n	403b12 <strcmp+0x2aa>
  403ac8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  403acc:	fa82 f54c 	uadd8	r5, r2, ip
  403ad0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  403ad4:	faa5 f58c 	sel	r5, r5, ip
  403ad8:	d10a      	bne.n	403af0 <strcmp+0x288>
  403ada:	b965      	cbnz	r5, 403af6 <strcmp+0x28e>
  403adc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ae0:	ea84 0402 	eor.w	r4, r4, r2
  403ae4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  403ae8:	d109      	bne.n	403afe <strcmp+0x296>
  403aea:	f850 2b04 	ldr.w	r2, [r0], #4
  403aee:	e7eb      	b.n	403ac8 <strcmp+0x260>
  403af0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  403af4:	e00d      	b.n	403b12 <strcmp+0x2aa>
  403af6:	f015 0fff 	tst.w	r5, #255	; 0xff
  403afa:	d105      	bne.n	403b08 <strcmp+0x2a0>
  403afc:	680b      	ldr	r3, [r1, #0]
  403afe:	ea4f 2212 	mov.w	r2, r2, lsr #8
  403b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  403b06:	e004      	b.n	403b12 <strcmp+0x2aa>
  403b08:	f04f 0000 	mov.w	r0, #0
  403b0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403b10:	4770      	bx	lr
  403b12:	ba12      	rev	r2, r2
  403b14:	ba1b      	rev	r3, r3
  403b16:	fa82 f44c 	uadd8	r4, r2, ip
  403b1a:	ea82 0403 	eor.w	r4, r2, r3
  403b1e:	faa4 f58c 	sel	r5, r4, ip
  403b22:	fab5 f485 	clz	r4, r5
  403b26:	fa02 f204 	lsl.w	r2, r2, r4
  403b2a:	fa03 f304 	lsl.w	r3, r3, r4
  403b2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  403b32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403b36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  403b3a:	4770      	bx	lr
  403b3c:	0000      	movs	r0, r0
	...

00403b40 <strlen>:
  403b40:	f890 f000 	pld	[r0]
  403b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403b48:	f020 0107 	bic.w	r1, r0, #7
  403b4c:	f06f 0c00 	mvn.w	ip, #0
  403b50:	f010 0407 	ands.w	r4, r0, #7
  403b54:	f891 f020 	pld	[r1, #32]
  403b58:	f040 8049 	bne.w	403bee <strlen+0xae>
  403b5c:	f04f 0400 	mov.w	r4, #0
  403b60:	f06f 0007 	mvn.w	r0, #7
  403b64:	e9d1 2300 	ldrd	r2, r3, [r1]
  403b68:	f891 f040 	pld	[r1, #64]	; 0x40
  403b6c:	f100 0008 	add.w	r0, r0, #8
  403b70:	fa82 f24c 	uadd8	r2, r2, ip
  403b74:	faa4 f28c 	sel	r2, r4, ip
  403b78:	fa83 f34c 	uadd8	r3, r3, ip
  403b7c:	faa2 f38c 	sel	r3, r2, ip
  403b80:	bb4b      	cbnz	r3, 403bd6 <strlen+0x96>
  403b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403b86:	fa82 f24c 	uadd8	r2, r2, ip
  403b8a:	f100 0008 	add.w	r0, r0, #8
  403b8e:	faa4 f28c 	sel	r2, r4, ip
  403b92:	fa83 f34c 	uadd8	r3, r3, ip
  403b96:	faa2 f38c 	sel	r3, r2, ip
  403b9a:	b9e3      	cbnz	r3, 403bd6 <strlen+0x96>
  403b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403ba0:	fa82 f24c 	uadd8	r2, r2, ip
  403ba4:	f100 0008 	add.w	r0, r0, #8
  403ba8:	faa4 f28c 	sel	r2, r4, ip
  403bac:	fa83 f34c 	uadd8	r3, r3, ip
  403bb0:	faa2 f38c 	sel	r3, r2, ip
  403bb4:	b97b      	cbnz	r3, 403bd6 <strlen+0x96>
  403bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403bba:	f101 0120 	add.w	r1, r1, #32
  403bbe:	fa82 f24c 	uadd8	r2, r2, ip
  403bc2:	f100 0008 	add.w	r0, r0, #8
  403bc6:	faa4 f28c 	sel	r2, r4, ip
  403bca:	fa83 f34c 	uadd8	r3, r3, ip
  403bce:	faa2 f38c 	sel	r3, r2, ip
  403bd2:	2b00      	cmp	r3, #0
  403bd4:	d0c6      	beq.n	403b64 <strlen+0x24>
  403bd6:	2a00      	cmp	r2, #0
  403bd8:	bf04      	itt	eq
  403bda:	3004      	addeq	r0, #4
  403bdc:	461a      	moveq	r2, r3
  403bde:	ba12      	rev	r2, r2
  403be0:	fab2 f282 	clz	r2, r2
  403be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403bec:	4770      	bx	lr
  403bee:	e9d1 2300 	ldrd	r2, r3, [r1]
  403bf2:	f004 0503 	and.w	r5, r4, #3
  403bf6:	f1c4 0000 	rsb	r0, r4, #0
  403bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403bfe:	f014 0f04 	tst.w	r4, #4
  403c02:	f891 f040 	pld	[r1, #64]	; 0x40
  403c06:	fa0c f505 	lsl.w	r5, ip, r5
  403c0a:	ea62 0205 	orn	r2, r2, r5
  403c0e:	bf1c      	itt	ne
  403c10:	ea63 0305 	ornne	r3, r3, r5
  403c14:	4662      	movne	r2, ip
  403c16:	f04f 0400 	mov.w	r4, #0
  403c1a:	e7a9      	b.n	403b70 <strlen+0x30>

00403c1c <__sprint_r.part.0>:
  403c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403c22:	049c      	lsls	r4, r3, #18
  403c24:	4693      	mov	fp, r2
  403c26:	d52f      	bpl.n	403c88 <__sprint_r.part.0+0x6c>
  403c28:	6893      	ldr	r3, [r2, #8]
  403c2a:	6812      	ldr	r2, [r2, #0]
  403c2c:	b353      	cbz	r3, 403c84 <__sprint_r.part.0+0x68>
  403c2e:	460e      	mov	r6, r1
  403c30:	4607      	mov	r7, r0
  403c32:	f102 0908 	add.w	r9, r2, #8
  403c36:	e919 0420 	ldmdb	r9, {r5, sl}
  403c3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403c3e:	d017      	beq.n	403c70 <__sprint_r.part.0+0x54>
  403c40:	3d04      	subs	r5, #4
  403c42:	2400      	movs	r4, #0
  403c44:	e001      	b.n	403c4a <__sprint_r.part.0+0x2e>
  403c46:	45a0      	cmp	r8, r4
  403c48:	d010      	beq.n	403c6c <__sprint_r.part.0+0x50>
  403c4a:	4632      	mov	r2, r6
  403c4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403c50:	4638      	mov	r0, r7
  403c52:	f001 f8bb 	bl	404dcc <_fputwc_r>
  403c56:	1c43      	adds	r3, r0, #1
  403c58:	f104 0401 	add.w	r4, r4, #1
  403c5c:	d1f3      	bne.n	403c46 <__sprint_r.part.0+0x2a>
  403c5e:	2300      	movs	r3, #0
  403c60:	f8cb 3008 	str.w	r3, [fp, #8]
  403c64:	f8cb 3004 	str.w	r3, [fp, #4]
  403c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403c70:	f02a 0a03 	bic.w	sl, sl, #3
  403c74:	eba3 030a 	sub.w	r3, r3, sl
  403c78:	f8cb 3008 	str.w	r3, [fp, #8]
  403c7c:	f109 0908 	add.w	r9, r9, #8
  403c80:	2b00      	cmp	r3, #0
  403c82:	d1d8      	bne.n	403c36 <__sprint_r.part.0+0x1a>
  403c84:	2000      	movs	r0, #0
  403c86:	e7ea      	b.n	403c5e <__sprint_r.part.0+0x42>
  403c88:	f001 fa0a 	bl	4050a0 <__sfvwrite_r>
  403c8c:	2300      	movs	r3, #0
  403c8e:	f8cb 3008 	str.w	r3, [fp, #8]
  403c92:	f8cb 3004 	str.w	r3, [fp, #4]
  403c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c9a:	bf00      	nop

00403c9c <_vfiprintf_r>:
  403c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ca0:	b0ad      	sub	sp, #180	; 0xb4
  403ca2:	461d      	mov	r5, r3
  403ca4:	468b      	mov	fp, r1
  403ca6:	4690      	mov	r8, r2
  403ca8:	9307      	str	r3, [sp, #28]
  403caa:	9006      	str	r0, [sp, #24]
  403cac:	b118      	cbz	r0, 403cb6 <_vfiprintf_r+0x1a>
  403cae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403cb0:	2b00      	cmp	r3, #0
  403cb2:	f000 80f3 	beq.w	403e9c <_vfiprintf_r+0x200>
  403cb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403cba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403cbe:	07df      	lsls	r7, r3, #31
  403cc0:	b281      	uxth	r1, r0
  403cc2:	d402      	bmi.n	403cca <_vfiprintf_r+0x2e>
  403cc4:	058e      	lsls	r6, r1, #22
  403cc6:	f140 80fc 	bpl.w	403ec2 <_vfiprintf_r+0x226>
  403cca:	048c      	lsls	r4, r1, #18
  403ccc:	d40a      	bmi.n	403ce4 <_vfiprintf_r+0x48>
  403cce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403cd2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403cda:	f8ab 100c 	strh.w	r1, [fp, #12]
  403cde:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403ce2:	b289      	uxth	r1, r1
  403ce4:	0708      	lsls	r0, r1, #28
  403ce6:	f140 80b3 	bpl.w	403e50 <_vfiprintf_r+0x1b4>
  403cea:	f8db 3010 	ldr.w	r3, [fp, #16]
  403cee:	2b00      	cmp	r3, #0
  403cf0:	f000 80ae 	beq.w	403e50 <_vfiprintf_r+0x1b4>
  403cf4:	f001 031a 	and.w	r3, r1, #26
  403cf8:	2b0a      	cmp	r3, #10
  403cfa:	f000 80b5 	beq.w	403e68 <_vfiprintf_r+0x1cc>
  403cfe:	2300      	movs	r3, #0
  403d00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403d04:	930b      	str	r3, [sp, #44]	; 0x2c
  403d06:	9311      	str	r3, [sp, #68]	; 0x44
  403d08:	9310      	str	r3, [sp, #64]	; 0x40
  403d0a:	9303      	str	r3, [sp, #12]
  403d0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403d10:	46ca      	mov	sl, r9
  403d12:	f8cd b010 	str.w	fp, [sp, #16]
  403d16:	f898 3000 	ldrb.w	r3, [r8]
  403d1a:	4644      	mov	r4, r8
  403d1c:	b1fb      	cbz	r3, 403d5e <_vfiprintf_r+0xc2>
  403d1e:	2b25      	cmp	r3, #37	; 0x25
  403d20:	d102      	bne.n	403d28 <_vfiprintf_r+0x8c>
  403d22:	e01c      	b.n	403d5e <_vfiprintf_r+0xc2>
  403d24:	2b25      	cmp	r3, #37	; 0x25
  403d26:	d003      	beq.n	403d30 <_vfiprintf_r+0x94>
  403d28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d1f9      	bne.n	403d24 <_vfiprintf_r+0x88>
  403d30:	eba4 0508 	sub.w	r5, r4, r8
  403d34:	b19d      	cbz	r5, 403d5e <_vfiprintf_r+0xc2>
  403d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d3a:	f8ca 8000 	str.w	r8, [sl]
  403d3e:	3301      	adds	r3, #1
  403d40:	442a      	add	r2, r5
  403d42:	2b07      	cmp	r3, #7
  403d44:	f8ca 5004 	str.w	r5, [sl, #4]
  403d48:	9211      	str	r2, [sp, #68]	; 0x44
  403d4a:	9310      	str	r3, [sp, #64]	; 0x40
  403d4c:	dd7a      	ble.n	403e44 <_vfiprintf_r+0x1a8>
  403d4e:	2a00      	cmp	r2, #0
  403d50:	f040 84b0 	bne.w	4046b4 <_vfiprintf_r+0xa18>
  403d54:	9b03      	ldr	r3, [sp, #12]
  403d56:	9210      	str	r2, [sp, #64]	; 0x40
  403d58:	442b      	add	r3, r5
  403d5a:	46ca      	mov	sl, r9
  403d5c:	9303      	str	r3, [sp, #12]
  403d5e:	7823      	ldrb	r3, [r4, #0]
  403d60:	2b00      	cmp	r3, #0
  403d62:	f000 83e0 	beq.w	404526 <_vfiprintf_r+0x88a>
  403d66:	2000      	movs	r0, #0
  403d68:	f04f 0300 	mov.w	r3, #0
  403d6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403d70:	f104 0801 	add.w	r8, r4, #1
  403d74:	7862      	ldrb	r2, [r4, #1]
  403d76:	4605      	mov	r5, r0
  403d78:	4606      	mov	r6, r0
  403d7a:	4603      	mov	r3, r0
  403d7c:	f04f 34ff 	mov.w	r4, #4294967295
  403d80:	f108 0801 	add.w	r8, r8, #1
  403d84:	f1a2 0120 	sub.w	r1, r2, #32
  403d88:	2958      	cmp	r1, #88	; 0x58
  403d8a:	f200 82de 	bhi.w	40434a <_vfiprintf_r+0x6ae>
  403d8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403d92:	0221      	.short	0x0221
  403d94:	02dc02dc 	.word	0x02dc02dc
  403d98:	02dc0229 	.word	0x02dc0229
  403d9c:	02dc02dc 	.word	0x02dc02dc
  403da0:	02dc02dc 	.word	0x02dc02dc
  403da4:	028902dc 	.word	0x028902dc
  403da8:	02dc0295 	.word	0x02dc0295
  403dac:	02bd00a2 	.word	0x02bd00a2
  403db0:	019f02dc 	.word	0x019f02dc
  403db4:	01a401a4 	.word	0x01a401a4
  403db8:	01a401a4 	.word	0x01a401a4
  403dbc:	01a401a4 	.word	0x01a401a4
  403dc0:	01a401a4 	.word	0x01a401a4
  403dc4:	02dc01a4 	.word	0x02dc01a4
  403dc8:	02dc02dc 	.word	0x02dc02dc
  403dcc:	02dc02dc 	.word	0x02dc02dc
  403dd0:	02dc02dc 	.word	0x02dc02dc
  403dd4:	02dc02dc 	.word	0x02dc02dc
  403dd8:	01b202dc 	.word	0x01b202dc
  403ddc:	02dc02dc 	.word	0x02dc02dc
  403de0:	02dc02dc 	.word	0x02dc02dc
  403de4:	02dc02dc 	.word	0x02dc02dc
  403de8:	02dc02dc 	.word	0x02dc02dc
  403dec:	02dc02dc 	.word	0x02dc02dc
  403df0:	02dc0197 	.word	0x02dc0197
  403df4:	02dc02dc 	.word	0x02dc02dc
  403df8:	02dc02dc 	.word	0x02dc02dc
  403dfc:	02dc019b 	.word	0x02dc019b
  403e00:	025302dc 	.word	0x025302dc
  403e04:	02dc02dc 	.word	0x02dc02dc
  403e08:	02dc02dc 	.word	0x02dc02dc
  403e0c:	02dc02dc 	.word	0x02dc02dc
  403e10:	02dc02dc 	.word	0x02dc02dc
  403e14:	02dc02dc 	.word	0x02dc02dc
  403e18:	021b025a 	.word	0x021b025a
  403e1c:	02dc02dc 	.word	0x02dc02dc
  403e20:	026e02dc 	.word	0x026e02dc
  403e24:	02dc021b 	.word	0x02dc021b
  403e28:	027302dc 	.word	0x027302dc
  403e2c:	01f502dc 	.word	0x01f502dc
  403e30:	02090182 	.word	0x02090182
  403e34:	02dc02d7 	.word	0x02dc02d7
  403e38:	02dc029a 	.word	0x02dc029a
  403e3c:	02dc00a7 	.word	0x02dc00a7
  403e40:	022e02dc 	.word	0x022e02dc
  403e44:	f10a 0a08 	add.w	sl, sl, #8
  403e48:	9b03      	ldr	r3, [sp, #12]
  403e4a:	442b      	add	r3, r5
  403e4c:	9303      	str	r3, [sp, #12]
  403e4e:	e786      	b.n	403d5e <_vfiprintf_r+0xc2>
  403e50:	4659      	mov	r1, fp
  403e52:	9806      	ldr	r0, [sp, #24]
  403e54:	f000 fdac 	bl	4049b0 <__swsetup_r>
  403e58:	bb18      	cbnz	r0, 403ea2 <_vfiprintf_r+0x206>
  403e5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403e5e:	f001 031a 	and.w	r3, r1, #26
  403e62:	2b0a      	cmp	r3, #10
  403e64:	f47f af4b 	bne.w	403cfe <_vfiprintf_r+0x62>
  403e68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	f6ff af46 	blt.w	403cfe <_vfiprintf_r+0x62>
  403e72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403e76:	07db      	lsls	r3, r3, #31
  403e78:	d405      	bmi.n	403e86 <_vfiprintf_r+0x1ea>
  403e7a:	058f      	lsls	r7, r1, #22
  403e7c:	d403      	bmi.n	403e86 <_vfiprintf_r+0x1ea>
  403e7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403e82:	f001 fac3 	bl	40540c <__retarget_lock_release_recursive>
  403e86:	462b      	mov	r3, r5
  403e88:	4642      	mov	r2, r8
  403e8a:	4659      	mov	r1, fp
  403e8c:	9806      	ldr	r0, [sp, #24]
  403e8e:	f000 fd4d 	bl	40492c <__sbprintf>
  403e92:	9003      	str	r0, [sp, #12]
  403e94:	9803      	ldr	r0, [sp, #12]
  403e96:	b02d      	add	sp, #180	; 0xb4
  403e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e9c:	f000 fef4 	bl	404c88 <__sinit>
  403ea0:	e709      	b.n	403cb6 <_vfiprintf_r+0x1a>
  403ea2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403ea6:	07d9      	lsls	r1, r3, #31
  403ea8:	d404      	bmi.n	403eb4 <_vfiprintf_r+0x218>
  403eaa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403eae:	059a      	lsls	r2, r3, #22
  403eb0:	f140 84aa 	bpl.w	404808 <_vfiprintf_r+0xb6c>
  403eb4:	f04f 33ff 	mov.w	r3, #4294967295
  403eb8:	9303      	str	r3, [sp, #12]
  403eba:	9803      	ldr	r0, [sp, #12]
  403ebc:	b02d      	add	sp, #180	; 0xb4
  403ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ec2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403ec6:	f001 fa9f 	bl	405408 <__retarget_lock_acquire_recursive>
  403eca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403ece:	b281      	uxth	r1, r0
  403ed0:	e6fb      	b.n	403cca <_vfiprintf_r+0x2e>
  403ed2:	4276      	negs	r6, r6
  403ed4:	9207      	str	r2, [sp, #28]
  403ed6:	f043 0304 	orr.w	r3, r3, #4
  403eda:	f898 2000 	ldrb.w	r2, [r8]
  403ede:	e74f      	b.n	403d80 <_vfiprintf_r+0xe4>
  403ee0:	9608      	str	r6, [sp, #32]
  403ee2:	069e      	lsls	r6, r3, #26
  403ee4:	f100 8450 	bmi.w	404788 <_vfiprintf_r+0xaec>
  403ee8:	9907      	ldr	r1, [sp, #28]
  403eea:	06dd      	lsls	r5, r3, #27
  403eec:	460a      	mov	r2, r1
  403eee:	f100 83ef 	bmi.w	4046d0 <_vfiprintf_r+0xa34>
  403ef2:	0658      	lsls	r0, r3, #25
  403ef4:	f140 83ec 	bpl.w	4046d0 <_vfiprintf_r+0xa34>
  403ef8:	880e      	ldrh	r6, [r1, #0]
  403efa:	3104      	adds	r1, #4
  403efc:	2700      	movs	r7, #0
  403efe:	2201      	movs	r2, #1
  403f00:	9107      	str	r1, [sp, #28]
  403f02:	f04f 0100 	mov.w	r1, #0
  403f06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403f0a:	2500      	movs	r5, #0
  403f0c:	1c61      	adds	r1, r4, #1
  403f0e:	f000 8116 	beq.w	40413e <_vfiprintf_r+0x4a2>
  403f12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403f16:	9102      	str	r1, [sp, #8]
  403f18:	ea56 0107 	orrs.w	r1, r6, r7
  403f1c:	f040 8114 	bne.w	404148 <_vfiprintf_r+0x4ac>
  403f20:	2c00      	cmp	r4, #0
  403f22:	f040 835c 	bne.w	4045de <_vfiprintf_r+0x942>
  403f26:	2a00      	cmp	r2, #0
  403f28:	f040 83b7 	bne.w	40469a <_vfiprintf_r+0x9fe>
  403f2c:	f013 0301 	ands.w	r3, r3, #1
  403f30:	9305      	str	r3, [sp, #20]
  403f32:	f000 8457 	beq.w	4047e4 <_vfiprintf_r+0xb48>
  403f36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403f3a:	2330      	movs	r3, #48	; 0x30
  403f3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403f40:	9b05      	ldr	r3, [sp, #20]
  403f42:	42a3      	cmp	r3, r4
  403f44:	bfb8      	it	lt
  403f46:	4623      	movlt	r3, r4
  403f48:	9301      	str	r3, [sp, #4]
  403f4a:	b10d      	cbz	r5, 403f50 <_vfiprintf_r+0x2b4>
  403f4c:	3301      	adds	r3, #1
  403f4e:	9301      	str	r3, [sp, #4]
  403f50:	9b02      	ldr	r3, [sp, #8]
  403f52:	f013 0302 	ands.w	r3, r3, #2
  403f56:	9309      	str	r3, [sp, #36]	; 0x24
  403f58:	d002      	beq.n	403f60 <_vfiprintf_r+0x2c4>
  403f5a:	9b01      	ldr	r3, [sp, #4]
  403f5c:	3302      	adds	r3, #2
  403f5e:	9301      	str	r3, [sp, #4]
  403f60:	9b02      	ldr	r3, [sp, #8]
  403f62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403f66:	930a      	str	r3, [sp, #40]	; 0x28
  403f68:	f040 8217 	bne.w	40439a <_vfiprintf_r+0x6fe>
  403f6c:	9b08      	ldr	r3, [sp, #32]
  403f6e:	9a01      	ldr	r2, [sp, #4]
  403f70:	1a9d      	subs	r5, r3, r2
  403f72:	2d00      	cmp	r5, #0
  403f74:	f340 8211 	ble.w	40439a <_vfiprintf_r+0x6fe>
  403f78:	2d10      	cmp	r5, #16
  403f7a:	f340 8490 	ble.w	40489e <_vfiprintf_r+0xc02>
  403f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f82:	4ec4      	ldr	r6, [pc, #784]	; (404294 <_vfiprintf_r+0x5f8>)
  403f84:	46d6      	mov	lr, sl
  403f86:	2710      	movs	r7, #16
  403f88:	46a2      	mov	sl, r4
  403f8a:	4619      	mov	r1, r3
  403f8c:	9c06      	ldr	r4, [sp, #24]
  403f8e:	e007      	b.n	403fa0 <_vfiprintf_r+0x304>
  403f90:	f101 0c02 	add.w	ip, r1, #2
  403f94:	f10e 0e08 	add.w	lr, lr, #8
  403f98:	4601      	mov	r1, r0
  403f9a:	3d10      	subs	r5, #16
  403f9c:	2d10      	cmp	r5, #16
  403f9e:	dd11      	ble.n	403fc4 <_vfiprintf_r+0x328>
  403fa0:	1c48      	adds	r0, r1, #1
  403fa2:	3210      	adds	r2, #16
  403fa4:	2807      	cmp	r0, #7
  403fa6:	9211      	str	r2, [sp, #68]	; 0x44
  403fa8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403fac:	9010      	str	r0, [sp, #64]	; 0x40
  403fae:	ddef      	ble.n	403f90 <_vfiprintf_r+0x2f4>
  403fb0:	2a00      	cmp	r2, #0
  403fb2:	f040 81e4 	bne.w	40437e <_vfiprintf_r+0x6e2>
  403fb6:	3d10      	subs	r5, #16
  403fb8:	2d10      	cmp	r5, #16
  403fba:	4611      	mov	r1, r2
  403fbc:	f04f 0c01 	mov.w	ip, #1
  403fc0:	46ce      	mov	lr, r9
  403fc2:	dced      	bgt.n	403fa0 <_vfiprintf_r+0x304>
  403fc4:	4654      	mov	r4, sl
  403fc6:	4661      	mov	r1, ip
  403fc8:	46f2      	mov	sl, lr
  403fca:	442a      	add	r2, r5
  403fcc:	2907      	cmp	r1, #7
  403fce:	9211      	str	r2, [sp, #68]	; 0x44
  403fd0:	f8ca 6000 	str.w	r6, [sl]
  403fd4:	f8ca 5004 	str.w	r5, [sl, #4]
  403fd8:	9110      	str	r1, [sp, #64]	; 0x40
  403fda:	f300 82ec 	bgt.w	4045b6 <_vfiprintf_r+0x91a>
  403fde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403fe2:	f10a 0a08 	add.w	sl, sl, #8
  403fe6:	1c48      	adds	r0, r1, #1
  403fe8:	2d00      	cmp	r5, #0
  403fea:	f040 81de 	bne.w	4043aa <_vfiprintf_r+0x70e>
  403fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ff0:	2b00      	cmp	r3, #0
  403ff2:	f000 81f8 	beq.w	4043e6 <_vfiprintf_r+0x74a>
  403ff6:	3202      	adds	r2, #2
  403ff8:	a90e      	add	r1, sp, #56	; 0x38
  403ffa:	2302      	movs	r3, #2
  403ffc:	2807      	cmp	r0, #7
  403ffe:	9211      	str	r2, [sp, #68]	; 0x44
  404000:	9010      	str	r0, [sp, #64]	; 0x40
  404002:	e88a 000a 	stmia.w	sl, {r1, r3}
  404006:	f340 81ea 	ble.w	4043de <_vfiprintf_r+0x742>
  40400a:	2a00      	cmp	r2, #0
  40400c:	f040 838c 	bne.w	404728 <_vfiprintf_r+0xa8c>
  404010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404012:	2b80      	cmp	r3, #128	; 0x80
  404014:	f04f 0001 	mov.w	r0, #1
  404018:	4611      	mov	r1, r2
  40401a:	46ca      	mov	sl, r9
  40401c:	f040 81e7 	bne.w	4043ee <_vfiprintf_r+0x752>
  404020:	9b08      	ldr	r3, [sp, #32]
  404022:	9d01      	ldr	r5, [sp, #4]
  404024:	1b5e      	subs	r6, r3, r5
  404026:	2e00      	cmp	r6, #0
  404028:	f340 81e1 	ble.w	4043ee <_vfiprintf_r+0x752>
  40402c:	2e10      	cmp	r6, #16
  40402e:	4d9a      	ldr	r5, [pc, #616]	; (404298 <_vfiprintf_r+0x5fc>)
  404030:	f340 8450 	ble.w	4048d4 <_vfiprintf_r+0xc38>
  404034:	46d4      	mov	ip, sl
  404036:	2710      	movs	r7, #16
  404038:	46a2      	mov	sl, r4
  40403a:	9c06      	ldr	r4, [sp, #24]
  40403c:	e007      	b.n	40404e <_vfiprintf_r+0x3b2>
  40403e:	f101 0e02 	add.w	lr, r1, #2
  404042:	f10c 0c08 	add.w	ip, ip, #8
  404046:	4601      	mov	r1, r0
  404048:	3e10      	subs	r6, #16
  40404a:	2e10      	cmp	r6, #16
  40404c:	dd11      	ble.n	404072 <_vfiprintf_r+0x3d6>
  40404e:	1c48      	adds	r0, r1, #1
  404050:	3210      	adds	r2, #16
  404052:	2807      	cmp	r0, #7
  404054:	9211      	str	r2, [sp, #68]	; 0x44
  404056:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40405a:	9010      	str	r0, [sp, #64]	; 0x40
  40405c:	ddef      	ble.n	40403e <_vfiprintf_r+0x3a2>
  40405e:	2a00      	cmp	r2, #0
  404060:	f040 829d 	bne.w	40459e <_vfiprintf_r+0x902>
  404064:	3e10      	subs	r6, #16
  404066:	2e10      	cmp	r6, #16
  404068:	f04f 0e01 	mov.w	lr, #1
  40406c:	4611      	mov	r1, r2
  40406e:	46cc      	mov	ip, r9
  404070:	dced      	bgt.n	40404e <_vfiprintf_r+0x3b2>
  404072:	4654      	mov	r4, sl
  404074:	46e2      	mov	sl, ip
  404076:	4432      	add	r2, r6
  404078:	f1be 0f07 	cmp.w	lr, #7
  40407c:	9211      	str	r2, [sp, #68]	; 0x44
  40407e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404082:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404086:	f300 8369 	bgt.w	40475c <_vfiprintf_r+0xac0>
  40408a:	f10a 0a08 	add.w	sl, sl, #8
  40408e:	f10e 0001 	add.w	r0, lr, #1
  404092:	4671      	mov	r1, lr
  404094:	e1ab      	b.n	4043ee <_vfiprintf_r+0x752>
  404096:	9608      	str	r6, [sp, #32]
  404098:	f013 0220 	ands.w	r2, r3, #32
  40409c:	f040 838c 	bne.w	4047b8 <_vfiprintf_r+0xb1c>
  4040a0:	f013 0110 	ands.w	r1, r3, #16
  4040a4:	f040 831a 	bne.w	4046dc <_vfiprintf_r+0xa40>
  4040a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4040ac:	f000 8316 	beq.w	4046dc <_vfiprintf_r+0xa40>
  4040b0:	9807      	ldr	r0, [sp, #28]
  4040b2:	460a      	mov	r2, r1
  4040b4:	4601      	mov	r1, r0
  4040b6:	3104      	adds	r1, #4
  4040b8:	8806      	ldrh	r6, [r0, #0]
  4040ba:	9107      	str	r1, [sp, #28]
  4040bc:	2700      	movs	r7, #0
  4040be:	e720      	b.n	403f02 <_vfiprintf_r+0x266>
  4040c0:	9608      	str	r6, [sp, #32]
  4040c2:	f043 0310 	orr.w	r3, r3, #16
  4040c6:	e7e7      	b.n	404098 <_vfiprintf_r+0x3fc>
  4040c8:	9608      	str	r6, [sp, #32]
  4040ca:	f043 0310 	orr.w	r3, r3, #16
  4040ce:	e708      	b.n	403ee2 <_vfiprintf_r+0x246>
  4040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040d4:	f898 2000 	ldrb.w	r2, [r8]
  4040d8:	e652      	b.n	403d80 <_vfiprintf_r+0xe4>
  4040da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4040de:	2600      	movs	r6, #0
  4040e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4040e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4040e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4040ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4040f0:	2909      	cmp	r1, #9
  4040f2:	d9f5      	bls.n	4040e0 <_vfiprintf_r+0x444>
  4040f4:	e646      	b.n	403d84 <_vfiprintf_r+0xe8>
  4040f6:	9608      	str	r6, [sp, #32]
  4040f8:	2800      	cmp	r0, #0
  4040fa:	f040 8408 	bne.w	40490e <_vfiprintf_r+0xc72>
  4040fe:	f043 0310 	orr.w	r3, r3, #16
  404102:	069e      	lsls	r6, r3, #26
  404104:	f100 834c 	bmi.w	4047a0 <_vfiprintf_r+0xb04>
  404108:	06dd      	lsls	r5, r3, #27
  40410a:	f100 82f3 	bmi.w	4046f4 <_vfiprintf_r+0xa58>
  40410e:	0658      	lsls	r0, r3, #25
  404110:	f140 82f0 	bpl.w	4046f4 <_vfiprintf_r+0xa58>
  404114:	9d07      	ldr	r5, [sp, #28]
  404116:	f9b5 6000 	ldrsh.w	r6, [r5]
  40411a:	462a      	mov	r2, r5
  40411c:	17f7      	asrs	r7, r6, #31
  40411e:	3204      	adds	r2, #4
  404120:	4630      	mov	r0, r6
  404122:	4639      	mov	r1, r7
  404124:	9207      	str	r2, [sp, #28]
  404126:	2800      	cmp	r0, #0
  404128:	f171 0200 	sbcs.w	r2, r1, #0
  40412c:	f2c0 835d 	blt.w	4047ea <_vfiprintf_r+0xb4e>
  404130:	1c61      	adds	r1, r4, #1
  404132:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404136:	f04f 0201 	mov.w	r2, #1
  40413a:	f47f aeea 	bne.w	403f12 <_vfiprintf_r+0x276>
  40413e:	ea56 0107 	orrs.w	r1, r6, r7
  404142:	f000 824d 	beq.w	4045e0 <_vfiprintf_r+0x944>
  404146:	9302      	str	r3, [sp, #8]
  404148:	2a01      	cmp	r2, #1
  40414a:	f000 828c 	beq.w	404666 <_vfiprintf_r+0x9ca>
  40414e:	2a02      	cmp	r2, #2
  404150:	f040 825c 	bne.w	40460c <_vfiprintf_r+0x970>
  404154:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404156:	46cb      	mov	fp, r9
  404158:	0933      	lsrs	r3, r6, #4
  40415a:	f006 010f 	and.w	r1, r6, #15
  40415e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404162:	093a      	lsrs	r2, r7, #4
  404164:	461e      	mov	r6, r3
  404166:	4617      	mov	r7, r2
  404168:	5c43      	ldrb	r3, [r0, r1]
  40416a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40416e:	ea56 0307 	orrs.w	r3, r6, r7
  404172:	d1f1      	bne.n	404158 <_vfiprintf_r+0x4bc>
  404174:	eba9 030b 	sub.w	r3, r9, fp
  404178:	9305      	str	r3, [sp, #20]
  40417a:	e6e1      	b.n	403f40 <_vfiprintf_r+0x2a4>
  40417c:	2800      	cmp	r0, #0
  40417e:	f040 83c0 	bne.w	404902 <_vfiprintf_r+0xc66>
  404182:	0699      	lsls	r1, r3, #26
  404184:	f100 8367 	bmi.w	404856 <_vfiprintf_r+0xbba>
  404188:	06da      	lsls	r2, r3, #27
  40418a:	f100 80f1 	bmi.w	404370 <_vfiprintf_r+0x6d4>
  40418e:	065b      	lsls	r3, r3, #25
  404190:	f140 80ee 	bpl.w	404370 <_vfiprintf_r+0x6d4>
  404194:	9a07      	ldr	r2, [sp, #28]
  404196:	6813      	ldr	r3, [r2, #0]
  404198:	3204      	adds	r2, #4
  40419a:	9207      	str	r2, [sp, #28]
  40419c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4041a0:	801a      	strh	r2, [r3, #0]
  4041a2:	e5b8      	b.n	403d16 <_vfiprintf_r+0x7a>
  4041a4:	9807      	ldr	r0, [sp, #28]
  4041a6:	4a3d      	ldr	r2, [pc, #244]	; (40429c <_vfiprintf_r+0x600>)
  4041a8:	9608      	str	r6, [sp, #32]
  4041aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4041ac:	6806      	ldr	r6, [r0, #0]
  4041ae:	2278      	movs	r2, #120	; 0x78
  4041b0:	2130      	movs	r1, #48	; 0x30
  4041b2:	3004      	adds	r0, #4
  4041b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4041b8:	f043 0302 	orr.w	r3, r3, #2
  4041bc:	9007      	str	r0, [sp, #28]
  4041be:	2700      	movs	r7, #0
  4041c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4041c4:	2202      	movs	r2, #2
  4041c6:	e69c      	b.n	403f02 <_vfiprintf_r+0x266>
  4041c8:	9608      	str	r6, [sp, #32]
  4041ca:	2800      	cmp	r0, #0
  4041cc:	d099      	beq.n	404102 <_vfiprintf_r+0x466>
  4041ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4041d2:	e796      	b.n	404102 <_vfiprintf_r+0x466>
  4041d4:	f898 2000 	ldrb.w	r2, [r8]
  4041d8:	2d00      	cmp	r5, #0
  4041da:	f47f add1 	bne.w	403d80 <_vfiprintf_r+0xe4>
  4041de:	2001      	movs	r0, #1
  4041e0:	2520      	movs	r5, #32
  4041e2:	e5cd      	b.n	403d80 <_vfiprintf_r+0xe4>
  4041e4:	f043 0301 	orr.w	r3, r3, #1
  4041e8:	f898 2000 	ldrb.w	r2, [r8]
  4041ec:	e5c8      	b.n	403d80 <_vfiprintf_r+0xe4>
  4041ee:	9608      	str	r6, [sp, #32]
  4041f0:	2800      	cmp	r0, #0
  4041f2:	f040 8393 	bne.w	40491c <_vfiprintf_r+0xc80>
  4041f6:	4929      	ldr	r1, [pc, #164]	; (40429c <_vfiprintf_r+0x600>)
  4041f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4041fa:	069f      	lsls	r7, r3, #26
  4041fc:	f100 82e8 	bmi.w	4047d0 <_vfiprintf_r+0xb34>
  404200:	9807      	ldr	r0, [sp, #28]
  404202:	06de      	lsls	r6, r3, #27
  404204:	4601      	mov	r1, r0
  404206:	f100 8270 	bmi.w	4046ea <_vfiprintf_r+0xa4e>
  40420a:	065d      	lsls	r5, r3, #25
  40420c:	f140 826d 	bpl.w	4046ea <_vfiprintf_r+0xa4e>
  404210:	3104      	adds	r1, #4
  404212:	8806      	ldrh	r6, [r0, #0]
  404214:	9107      	str	r1, [sp, #28]
  404216:	2700      	movs	r7, #0
  404218:	07d8      	lsls	r0, r3, #31
  40421a:	f140 8222 	bpl.w	404662 <_vfiprintf_r+0x9c6>
  40421e:	ea56 0107 	orrs.w	r1, r6, r7
  404222:	f000 821e 	beq.w	404662 <_vfiprintf_r+0x9c6>
  404226:	2130      	movs	r1, #48	; 0x30
  404228:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40422c:	f043 0302 	orr.w	r3, r3, #2
  404230:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404234:	2202      	movs	r2, #2
  404236:	e664      	b.n	403f02 <_vfiprintf_r+0x266>
  404238:	9608      	str	r6, [sp, #32]
  40423a:	2800      	cmp	r0, #0
  40423c:	f040 836b 	bne.w	404916 <_vfiprintf_r+0xc7a>
  404240:	4917      	ldr	r1, [pc, #92]	; (4042a0 <_vfiprintf_r+0x604>)
  404242:	910b      	str	r1, [sp, #44]	; 0x2c
  404244:	e7d9      	b.n	4041fa <_vfiprintf_r+0x55e>
  404246:	9907      	ldr	r1, [sp, #28]
  404248:	9608      	str	r6, [sp, #32]
  40424a:	680a      	ldr	r2, [r1, #0]
  40424c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404250:	f04f 0000 	mov.w	r0, #0
  404254:	460a      	mov	r2, r1
  404256:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40425a:	3204      	adds	r2, #4
  40425c:	2001      	movs	r0, #1
  40425e:	9001      	str	r0, [sp, #4]
  404260:	9207      	str	r2, [sp, #28]
  404262:	9005      	str	r0, [sp, #20]
  404264:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404268:	9302      	str	r3, [sp, #8]
  40426a:	2400      	movs	r4, #0
  40426c:	e670      	b.n	403f50 <_vfiprintf_r+0x2b4>
  40426e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404272:	f898 2000 	ldrb.w	r2, [r8]
  404276:	e583      	b.n	403d80 <_vfiprintf_r+0xe4>
  404278:	f898 2000 	ldrb.w	r2, [r8]
  40427c:	2a6c      	cmp	r2, #108	; 0x6c
  40427e:	bf03      	ittte	eq
  404280:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404284:	f043 0320 	orreq.w	r3, r3, #32
  404288:	f108 0801 	addeq.w	r8, r8, #1
  40428c:	f043 0310 	orrne.w	r3, r3, #16
  404290:	e576      	b.n	403d80 <_vfiprintf_r+0xe4>
  404292:	bf00      	nop
  404294:	00407214 	.word	0x00407214
  404298:	00407224 	.word	0x00407224
  40429c:	004071f8 	.word	0x004071f8
  4042a0:	004071e4 	.word	0x004071e4
  4042a4:	9907      	ldr	r1, [sp, #28]
  4042a6:	680e      	ldr	r6, [r1, #0]
  4042a8:	460a      	mov	r2, r1
  4042aa:	2e00      	cmp	r6, #0
  4042ac:	f102 0204 	add.w	r2, r2, #4
  4042b0:	f6ff ae0f 	blt.w	403ed2 <_vfiprintf_r+0x236>
  4042b4:	9207      	str	r2, [sp, #28]
  4042b6:	f898 2000 	ldrb.w	r2, [r8]
  4042ba:	e561      	b.n	403d80 <_vfiprintf_r+0xe4>
  4042bc:	f898 2000 	ldrb.w	r2, [r8]
  4042c0:	2001      	movs	r0, #1
  4042c2:	252b      	movs	r5, #43	; 0x2b
  4042c4:	e55c      	b.n	403d80 <_vfiprintf_r+0xe4>
  4042c6:	9907      	ldr	r1, [sp, #28]
  4042c8:	9608      	str	r6, [sp, #32]
  4042ca:	f8d1 b000 	ldr.w	fp, [r1]
  4042ce:	f04f 0200 	mov.w	r2, #0
  4042d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4042d6:	1d0e      	adds	r6, r1, #4
  4042d8:	f1bb 0f00 	cmp.w	fp, #0
  4042dc:	f000 82e5 	beq.w	4048aa <_vfiprintf_r+0xc0e>
  4042e0:	1c67      	adds	r7, r4, #1
  4042e2:	f000 82c4 	beq.w	40486e <_vfiprintf_r+0xbd2>
  4042e6:	4622      	mov	r2, r4
  4042e8:	2100      	movs	r1, #0
  4042ea:	4658      	mov	r0, fp
  4042ec:	9301      	str	r3, [sp, #4]
  4042ee:	f001 fbd7 	bl	405aa0 <memchr>
  4042f2:	9b01      	ldr	r3, [sp, #4]
  4042f4:	2800      	cmp	r0, #0
  4042f6:	f000 82e5 	beq.w	4048c4 <_vfiprintf_r+0xc28>
  4042fa:	eba0 020b 	sub.w	r2, r0, fp
  4042fe:	9205      	str	r2, [sp, #20]
  404300:	9607      	str	r6, [sp, #28]
  404302:	9302      	str	r3, [sp, #8]
  404304:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404308:	2400      	movs	r4, #0
  40430a:	e619      	b.n	403f40 <_vfiprintf_r+0x2a4>
  40430c:	f898 2000 	ldrb.w	r2, [r8]
  404310:	2a2a      	cmp	r2, #42	; 0x2a
  404312:	f108 0701 	add.w	r7, r8, #1
  404316:	f000 82e9 	beq.w	4048ec <_vfiprintf_r+0xc50>
  40431a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40431e:	2909      	cmp	r1, #9
  404320:	46b8      	mov	r8, r7
  404322:	f04f 0400 	mov.w	r4, #0
  404326:	f63f ad2d 	bhi.w	403d84 <_vfiprintf_r+0xe8>
  40432a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40432e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404332:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404336:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40433a:	2909      	cmp	r1, #9
  40433c:	d9f5      	bls.n	40432a <_vfiprintf_r+0x68e>
  40433e:	e521      	b.n	403d84 <_vfiprintf_r+0xe8>
  404340:	f043 0320 	orr.w	r3, r3, #32
  404344:	f898 2000 	ldrb.w	r2, [r8]
  404348:	e51a      	b.n	403d80 <_vfiprintf_r+0xe4>
  40434a:	9608      	str	r6, [sp, #32]
  40434c:	2800      	cmp	r0, #0
  40434e:	f040 82db 	bne.w	404908 <_vfiprintf_r+0xc6c>
  404352:	2a00      	cmp	r2, #0
  404354:	f000 80e7 	beq.w	404526 <_vfiprintf_r+0x88a>
  404358:	2101      	movs	r1, #1
  40435a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40435e:	f04f 0200 	mov.w	r2, #0
  404362:	9101      	str	r1, [sp, #4]
  404364:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404368:	9105      	str	r1, [sp, #20]
  40436a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40436e:	e77b      	b.n	404268 <_vfiprintf_r+0x5cc>
  404370:	9a07      	ldr	r2, [sp, #28]
  404372:	6813      	ldr	r3, [r2, #0]
  404374:	3204      	adds	r2, #4
  404376:	9207      	str	r2, [sp, #28]
  404378:	9a03      	ldr	r2, [sp, #12]
  40437a:	601a      	str	r2, [r3, #0]
  40437c:	e4cb      	b.n	403d16 <_vfiprintf_r+0x7a>
  40437e:	aa0f      	add	r2, sp, #60	; 0x3c
  404380:	9904      	ldr	r1, [sp, #16]
  404382:	4620      	mov	r0, r4
  404384:	f7ff fc4a 	bl	403c1c <__sprint_r.part.0>
  404388:	2800      	cmp	r0, #0
  40438a:	f040 8139 	bne.w	404600 <_vfiprintf_r+0x964>
  40438e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404390:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404392:	f101 0c01 	add.w	ip, r1, #1
  404396:	46ce      	mov	lr, r9
  404398:	e5ff      	b.n	403f9a <_vfiprintf_r+0x2fe>
  40439a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40439c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40439e:	1c48      	adds	r0, r1, #1
  4043a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4043a4:	2d00      	cmp	r5, #0
  4043a6:	f43f ae22 	beq.w	403fee <_vfiprintf_r+0x352>
  4043aa:	3201      	adds	r2, #1
  4043ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4043b0:	2101      	movs	r1, #1
  4043b2:	2807      	cmp	r0, #7
  4043b4:	9211      	str	r2, [sp, #68]	; 0x44
  4043b6:	9010      	str	r0, [sp, #64]	; 0x40
  4043b8:	f8ca 5000 	str.w	r5, [sl]
  4043bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4043c0:	f340 8108 	ble.w	4045d4 <_vfiprintf_r+0x938>
  4043c4:	2a00      	cmp	r2, #0
  4043c6:	f040 81bc 	bne.w	404742 <_vfiprintf_r+0xaa6>
  4043ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043cc:	2b00      	cmp	r3, #0
  4043ce:	f43f ae1f 	beq.w	404010 <_vfiprintf_r+0x374>
  4043d2:	ab0e      	add	r3, sp, #56	; 0x38
  4043d4:	2202      	movs	r2, #2
  4043d6:	4608      	mov	r0, r1
  4043d8:	931c      	str	r3, [sp, #112]	; 0x70
  4043da:	921d      	str	r2, [sp, #116]	; 0x74
  4043dc:	46ca      	mov	sl, r9
  4043de:	4601      	mov	r1, r0
  4043e0:	f10a 0a08 	add.w	sl, sl, #8
  4043e4:	3001      	adds	r0, #1
  4043e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043e8:	2b80      	cmp	r3, #128	; 0x80
  4043ea:	f43f ae19 	beq.w	404020 <_vfiprintf_r+0x384>
  4043ee:	9b05      	ldr	r3, [sp, #20]
  4043f0:	1ae4      	subs	r4, r4, r3
  4043f2:	2c00      	cmp	r4, #0
  4043f4:	dd2e      	ble.n	404454 <_vfiprintf_r+0x7b8>
  4043f6:	2c10      	cmp	r4, #16
  4043f8:	4db3      	ldr	r5, [pc, #716]	; (4046c8 <_vfiprintf_r+0xa2c>)
  4043fa:	dd1e      	ble.n	40443a <_vfiprintf_r+0x79e>
  4043fc:	46d6      	mov	lr, sl
  4043fe:	2610      	movs	r6, #16
  404400:	9f06      	ldr	r7, [sp, #24]
  404402:	f8dd a010 	ldr.w	sl, [sp, #16]
  404406:	e006      	b.n	404416 <_vfiprintf_r+0x77a>
  404408:	1c88      	adds	r0, r1, #2
  40440a:	f10e 0e08 	add.w	lr, lr, #8
  40440e:	4619      	mov	r1, r3
  404410:	3c10      	subs	r4, #16
  404412:	2c10      	cmp	r4, #16
  404414:	dd10      	ble.n	404438 <_vfiprintf_r+0x79c>
  404416:	1c4b      	adds	r3, r1, #1
  404418:	3210      	adds	r2, #16
  40441a:	2b07      	cmp	r3, #7
  40441c:	9211      	str	r2, [sp, #68]	; 0x44
  40441e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404422:	9310      	str	r3, [sp, #64]	; 0x40
  404424:	ddf0      	ble.n	404408 <_vfiprintf_r+0x76c>
  404426:	2a00      	cmp	r2, #0
  404428:	d165      	bne.n	4044f6 <_vfiprintf_r+0x85a>
  40442a:	3c10      	subs	r4, #16
  40442c:	2c10      	cmp	r4, #16
  40442e:	f04f 0001 	mov.w	r0, #1
  404432:	4611      	mov	r1, r2
  404434:	46ce      	mov	lr, r9
  404436:	dcee      	bgt.n	404416 <_vfiprintf_r+0x77a>
  404438:	46f2      	mov	sl, lr
  40443a:	4422      	add	r2, r4
  40443c:	2807      	cmp	r0, #7
  40443e:	9211      	str	r2, [sp, #68]	; 0x44
  404440:	f8ca 5000 	str.w	r5, [sl]
  404444:	f8ca 4004 	str.w	r4, [sl, #4]
  404448:	9010      	str	r0, [sp, #64]	; 0x40
  40444a:	f300 8085 	bgt.w	404558 <_vfiprintf_r+0x8bc>
  40444e:	f10a 0a08 	add.w	sl, sl, #8
  404452:	3001      	adds	r0, #1
  404454:	9905      	ldr	r1, [sp, #20]
  404456:	f8ca b000 	str.w	fp, [sl]
  40445a:	440a      	add	r2, r1
  40445c:	2807      	cmp	r0, #7
  40445e:	9211      	str	r2, [sp, #68]	; 0x44
  404460:	f8ca 1004 	str.w	r1, [sl, #4]
  404464:	9010      	str	r0, [sp, #64]	; 0x40
  404466:	f340 8082 	ble.w	40456e <_vfiprintf_r+0x8d2>
  40446a:	2a00      	cmp	r2, #0
  40446c:	f040 8118 	bne.w	4046a0 <_vfiprintf_r+0xa04>
  404470:	9b02      	ldr	r3, [sp, #8]
  404472:	9210      	str	r2, [sp, #64]	; 0x40
  404474:	0758      	lsls	r0, r3, #29
  404476:	d535      	bpl.n	4044e4 <_vfiprintf_r+0x848>
  404478:	9b08      	ldr	r3, [sp, #32]
  40447a:	9901      	ldr	r1, [sp, #4]
  40447c:	1a5c      	subs	r4, r3, r1
  40447e:	2c00      	cmp	r4, #0
  404480:	f340 80e7 	ble.w	404652 <_vfiprintf_r+0x9b6>
  404484:	46ca      	mov	sl, r9
  404486:	2c10      	cmp	r4, #16
  404488:	f340 8218 	ble.w	4048bc <_vfiprintf_r+0xc20>
  40448c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40448e:	4e8f      	ldr	r6, [pc, #572]	; (4046cc <_vfiprintf_r+0xa30>)
  404490:	9f06      	ldr	r7, [sp, #24]
  404492:	f8dd b010 	ldr.w	fp, [sp, #16]
  404496:	2510      	movs	r5, #16
  404498:	e006      	b.n	4044a8 <_vfiprintf_r+0x80c>
  40449a:	1c88      	adds	r0, r1, #2
  40449c:	f10a 0a08 	add.w	sl, sl, #8
  4044a0:	4619      	mov	r1, r3
  4044a2:	3c10      	subs	r4, #16
  4044a4:	2c10      	cmp	r4, #16
  4044a6:	dd11      	ble.n	4044cc <_vfiprintf_r+0x830>
  4044a8:	1c4b      	adds	r3, r1, #1
  4044aa:	3210      	adds	r2, #16
  4044ac:	2b07      	cmp	r3, #7
  4044ae:	9211      	str	r2, [sp, #68]	; 0x44
  4044b0:	f8ca 6000 	str.w	r6, [sl]
  4044b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4044b8:	9310      	str	r3, [sp, #64]	; 0x40
  4044ba:	ddee      	ble.n	40449a <_vfiprintf_r+0x7fe>
  4044bc:	bb42      	cbnz	r2, 404510 <_vfiprintf_r+0x874>
  4044be:	3c10      	subs	r4, #16
  4044c0:	2c10      	cmp	r4, #16
  4044c2:	f04f 0001 	mov.w	r0, #1
  4044c6:	4611      	mov	r1, r2
  4044c8:	46ca      	mov	sl, r9
  4044ca:	dced      	bgt.n	4044a8 <_vfiprintf_r+0x80c>
  4044cc:	4422      	add	r2, r4
  4044ce:	2807      	cmp	r0, #7
  4044d0:	9211      	str	r2, [sp, #68]	; 0x44
  4044d2:	f8ca 6000 	str.w	r6, [sl]
  4044d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4044da:	9010      	str	r0, [sp, #64]	; 0x40
  4044dc:	dd51      	ble.n	404582 <_vfiprintf_r+0x8e6>
  4044de:	2a00      	cmp	r2, #0
  4044e0:	f040 819b 	bne.w	40481a <_vfiprintf_r+0xb7e>
  4044e4:	9b03      	ldr	r3, [sp, #12]
  4044e6:	9a08      	ldr	r2, [sp, #32]
  4044e8:	9901      	ldr	r1, [sp, #4]
  4044ea:	428a      	cmp	r2, r1
  4044ec:	bfac      	ite	ge
  4044ee:	189b      	addge	r3, r3, r2
  4044f0:	185b      	addlt	r3, r3, r1
  4044f2:	9303      	str	r3, [sp, #12]
  4044f4:	e04e      	b.n	404594 <_vfiprintf_r+0x8f8>
  4044f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4044f8:	4651      	mov	r1, sl
  4044fa:	4638      	mov	r0, r7
  4044fc:	f7ff fb8e 	bl	403c1c <__sprint_r.part.0>
  404500:	2800      	cmp	r0, #0
  404502:	f040 813f 	bne.w	404784 <_vfiprintf_r+0xae8>
  404506:	9910      	ldr	r1, [sp, #64]	; 0x40
  404508:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40450a:	1c48      	adds	r0, r1, #1
  40450c:	46ce      	mov	lr, r9
  40450e:	e77f      	b.n	404410 <_vfiprintf_r+0x774>
  404510:	aa0f      	add	r2, sp, #60	; 0x3c
  404512:	4659      	mov	r1, fp
  404514:	4638      	mov	r0, r7
  404516:	f7ff fb81 	bl	403c1c <__sprint_r.part.0>
  40451a:	b960      	cbnz	r0, 404536 <_vfiprintf_r+0x89a>
  40451c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40451e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404520:	1c48      	adds	r0, r1, #1
  404522:	46ca      	mov	sl, r9
  404524:	e7bd      	b.n	4044a2 <_vfiprintf_r+0x806>
  404526:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404528:	f8dd b010 	ldr.w	fp, [sp, #16]
  40452c:	2b00      	cmp	r3, #0
  40452e:	f040 81d4 	bne.w	4048da <_vfiprintf_r+0xc3e>
  404532:	2300      	movs	r3, #0
  404534:	9310      	str	r3, [sp, #64]	; 0x40
  404536:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40453a:	f013 0f01 	tst.w	r3, #1
  40453e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404542:	d102      	bne.n	40454a <_vfiprintf_r+0x8ae>
  404544:	059a      	lsls	r2, r3, #22
  404546:	f140 80de 	bpl.w	404706 <_vfiprintf_r+0xa6a>
  40454a:	065b      	lsls	r3, r3, #25
  40454c:	f53f acb2 	bmi.w	403eb4 <_vfiprintf_r+0x218>
  404550:	9803      	ldr	r0, [sp, #12]
  404552:	b02d      	add	sp, #180	; 0xb4
  404554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404558:	2a00      	cmp	r2, #0
  40455a:	f040 8106 	bne.w	40476a <_vfiprintf_r+0xace>
  40455e:	9a05      	ldr	r2, [sp, #20]
  404560:	921d      	str	r2, [sp, #116]	; 0x74
  404562:	2301      	movs	r3, #1
  404564:	9211      	str	r2, [sp, #68]	; 0x44
  404566:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40456a:	9310      	str	r3, [sp, #64]	; 0x40
  40456c:	46ca      	mov	sl, r9
  40456e:	f10a 0a08 	add.w	sl, sl, #8
  404572:	9b02      	ldr	r3, [sp, #8]
  404574:	0759      	lsls	r1, r3, #29
  404576:	d504      	bpl.n	404582 <_vfiprintf_r+0x8e6>
  404578:	9b08      	ldr	r3, [sp, #32]
  40457a:	9901      	ldr	r1, [sp, #4]
  40457c:	1a5c      	subs	r4, r3, r1
  40457e:	2c00      	cmp	r4, #0
  404580:	dc81      	bgt.n	404486 <_vfiprintf_r+0x7ea>
  404582:	9b03      	ldr	r3, [sp, #12]
  404584:	9908      	ldr	r1, [sp, #32]
  404586:	9801      	ldr	r0, [sp, #4]
  404588:	4281      	cmp	r1, r0
  40458a:	bfac      	ite	ge
  40458c:	185b      	addge	r3, r3, r1
  40458e:	181b      	addlt	r3, r3, r0
  404590:	9303      	str	r3, [sp, #12]
  404592:	bb72      	cbnz	r2, 4045f2 <_vfiprintf_r+0x956>
  404594:	2300      	movs	r3, #0
  404596:	9310      	str	r3, [sp, #64]	; 0x40
  404598:	46ca      	mov	sl, r9
  40459a:	f7ff bbbc 	b.w	403d16 <_vfiprintf_r+0x7a>
  40459e:	aa0f      	add	r2, sp, #60	; 0x3c
  4045a0:	9904      	ldr	r1, [sp, #16]
  4045a2:	4620      	mov	r0, r4
  4045a4:	f7ff fb3a 	bl	403c1c <__sprint_r.part.0>
  4045a8:	bb50      	cbnz	r0, 404600 <_vfiprintf_r+0x964>
  4045aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4045ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045ae:	f101 0e01 	add.w	lr, r1, #1
  4045b2:	46cc      	mov	ip, r9
  4045b4:	e548      	b.n	404048 <_vfiprintf_r+0x3ac>
  4045b6:	2a00      	cmp	r2, #0
  4045b8:	f040 8140 	bne.w	40483c <_vfiprintf_r+0xba0>
  4045bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4045c0:	2900      	cmp	r1, #0
  4045c2:	f000 811b 	beq.w	4047fc <_vfiprintf_r+0xb60>
  4045c6:	2201      	movs	r2, #1
  4045c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4045cc:	4610      	mov	r0, r2
  4045ce:	921d      	str	r2, [sp, #116]	; 0x74
  4045d0:	911c      	str	r1, [sp, #112]	; 0x70
  4045d2:	46ca      	mov	sl, r9
  4045d4:	4601      	mov	r1, r0
  4045d6:	f10a 0a08 	add.w	sl, sl, #8
  4045da:	3001      	adds	r0, #1
  4045dc:	e507      	b.n	403fee <_vfiprintf_r+0x352>
  4045de:	9b02      	ldr	r3, [sp, #8]
  4045e0:	2a01      	cmp	r2, #1
  4045e2:	f000 8098 	beq.w	404716 <_vfiprintf_r+0xa7a>
  4045e6:	2a02      	cmp	r2, #2
  4045e8:	d10d      	bne.n	404606 <_vfiprintf_r+0x96a>
  4045ea:	9302      	str	r3, [sp, #8]
  4045ec:	2600      	movs	r6, #0
  4045ee:	2700      	movs	r7, #0
  4045f0:	e5b0      	b.n	404154 <_vfiprintf_r+0x4b8>
  4045f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4045f4:	9904      	ldr	r1, [sp, #16]
  4045f6:	9806      	ldr	r0, [sp, #24]
  4045f8:	f7ff fb10 	bl	403c1c <__sprint_r.part.0>
  4045fc:	2800      	cmp	r0, #0
  4045fe:	d0c9      	beq.n	404594 <_vfiprintf_r+0x8f8>
  404600:	f8dd b010 	ldr.w	fp, [sp, #16]
  404604:	e797      	b.n	404536 <_vfiprintf_r+0x89a>
  404606:	9302      	str	r3, [sp, #8]
  404608:	2600      	movs	r6, #0
  40460a:	2700      	movs	r7, #0
  40460c:	4649      	mov	r1, r9
  40460e:	e000      	b.n	404612 <_vfiprintf_r+0x976>
  404610:	4659      	mov	r1, fp
  404612:	08f2      	lsrs	r2, r6, #3
  404614:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404618:	08f8      	lsrs	r0, r7, #3
  40461a:	f006 0307 	and.w	r3, r6, #7
  40461e:	4607      	mov	r7, r0
  404620:	4616      	mov	r6, r2
  404622:	3330      	adds	r3, #48	; 0x30
  404624:	ea56 0207 	orrs.w	r2, r6, r7
  404628:	f801 3c01 	strb.w	r3, [r1, #-1]
  40462c:	f101 3bff 	add.w	fp, r1, #4294967295
  404630:	d1ee      	bne.n	404610 <_vfiprintf_r+0x974>
  404632:	9a02      	ldr	r2, [sp, #8]
  404634:	07d6      	lsls	r6, r2, #31
  404636:	f57f ad9d 	bpl.w	404174 <_vfiprintf_r+0x4d8>
  40463a:	2b30      	cmp	r3, #48	; 0x30
  40463c:	f43f ad9a 	beq.w	404174 <_vfiprintf_r+0x4d8>
  404640:	3902      	subs	r1, #2
  404642:	2330      	movs	r3, #48	; 0x30
  404644:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404648:	eba9 0301 	sub.w	r3, r9, r1
  40464c:	9305      	str	r3, [sp, #20]
  40464e:	468b      	mov	fp, r1
  404650:	e476      	b.n	403f40 <_vfiprintf_r+0x2a4>
  404652:	9b03      	ldr	r3, [sp, #12]
  404654:	9a08      	ldr	r2, [sp, #32]
  404656:	428a      	cmp	r2, r1
  404658:	bfac      	ite	ge
  40465a:	189b      	addge	r3, r3, r2
  40465c:	185b      	addlt	r3, r3, r1
  40465e:	9303      	str	r3, [sp, #12]
  404660:	e798      	b.n	404594 <_vfiprintf_r+0x8f8>
  404662:	2202      	movs	r2, #2
  404664:	e44d      	b.n	403f02 <_vfiprintf_r+0x266>
  404666:	2f00      	cmp	r7, #0
  404668:	bf08      	it	eq
  40466a:	2e0a      	cmpeq	r6, #10
  40466c:	d352      	bcc.n	404714 <_vfiprintf_r+0xa78>
  40466e:	46cb      	mov	fp, r9
  404670:	4630      	mov	r0, r6
  404672:	4639      	mov	r1, r7
  404674:	220a      	movs	r2, #10
  404676:	2300      	movs	r3, #0
  404678:	f001 fe9c 	bl	4063b4 <__aeabi_uldivmod>
  40467c:	3230      	adds	r2, #48	; 0x30
  40467e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404682:	4630      	mov	r0, r6
  404684:	4639      	mov	r1, r7
  404686:	2300      	movs	r3, #0
  404688:	220a      	movs	r2, #10
  40468a:	f001 fe93 	bl	4063b4 <__aeabi_uldivmod>
  40468e:	4606      	mov	r6, r0
  404690:	460f      	mov	r7, r1
  404692:	ea56 0307 	orrs.w	r3, r6, r7
  404696:	d1eb      	bne.n	404670 <_vfiprintf_r+0x9d4>
  404698:	e56c      	b.n	404174 <_vfiprintf_r+0x4d8>
  40469a:	9405      	str	r4, [sp, #20]
  40469c:	46cb      	mov	fp, r9
  40469e:	e44f      	b.n	403f40 <_vfiprintf_r+0x2a4>
  4046a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4046a2:	9904      	ldr	r1, [sp, #16]
  4046a4:	9806      	ldr	r0, [sp, #24]
  4046a6:	f7ff fab9 	bl	403c1c <__sprint_r.part.0>
  4046aa:	2800      	cmp	r0, #0
  4046ac:	d1a8      	bne.n	404600 <_vfiprintf_r+0x964>
  4046ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046b0:	46ca      	mov	sl, r9
  4046b2:	e75e      	b.n	404572 <_vfiprintf_r+0x8d6>
  4046b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4046b6:	9904      	ldr	r1, [sp, #16]
  4046b8:	9806      	ldr	r0, [sp, #24]
  4046ba:	f7ff faaf 	bl	403c1c <__sprint_r.part.0>
  4046be:	2800      	cmp	r0, #0
  4046c0:	d19e      	bne.n	404600 <_vfiprintf_r+0x964>
  4046c2:	46ca      	mov	sl, r9
  4046c4:	f7ff bbc0 	b.w	403e48 <_vfiprintf_r+0x1ac>
  4046c8:	00407224 	.word	0x00407224
  4046cc:	00407214 	.word	0x00407214
  4046d0:	3104      	adds	r1, #4
  4046d2:	6816      	ldr	r6, [r2, #0]
  4046d4:	9107      	str	r1, [sp, #28]
  4046d6:	2201      	movs	r2, #1
  4046d8:	2700      	movs	r7, #0
  4046da:	e412      	b.n	403f02 <_vfiprintf_r+0x266>
  4046dc:	9807      	ldr	r0, [sp, #28]
  4046de:	4601      	mov	r1, r0
  4046e0:	3104      	adds	r1, #4
  4046e2:	6806      	ldr	r6, [r0, #0]
  4046e4:	9107      	str	r1, [sp, #28]
  4046e6:	2700      	movs	r7, #0
  4046e8:	e40b      	b.n	403f02 <_vfiprintf_r+0x266>
  4046ea:	680e      	ldr	r6, [r1, #0]
  4046ec:	3104      	adds	r1, #4
  4046ee:	9107      	str	r1, [sp, #28]
  4046f0:	2700      	movs	r7, #0
  4046f2:	e591      	b.n	404218 <_vfiprintf_r+0x57c>
  4046f4:	9907      	ldr	r1, [sp, #28]
  4046f6:	680e      	ldr	r6, [r1, #0]
  4046f8:	460a      	mov	r2, r1
  4046fa:	17f7      	asrs	r7, r6, #31
  4046fc:	3204      	adds	r2, #4
  4046fe:	9207      	str	r2, [sp, #28]
  404700:	4630      	mov	r0, r6
  404702:	4639      	mov	r1, r7
  404704:	e50f      	b.n	404126 <_vfiprintf_r+0x48a>
  404706:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40470a:	f000 fe7f 	bl	40540c <__retarget_lock_release_recursive>
  40470e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404712:	e71a      	b.n	40454a <_vfiprintf_r+0x8ae>
  404714:	9b02      	ldr	r3, [sp, #8]
  404716:	9302      	str	r3, [sp, #8]
  404718:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40471c:	3630      	adds	r6, #48	; 0x30
  40471e:	2301      	movs	r3, #1
  404720:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404724:	9305      	str	r3, [sp, #20]
  404726:	e40b      	b.n	403f40 <_vfiprintf_r+0x2a4>
  404728:	aa0f      	add	r2, sp, #60	; 0x3c
  40472a:	9904      	ldr	r1, [sp, #16]
  40472c:	9806      	ldr	r0, [sp, #24]
  40472e:	f7ff fa75 	bl	403c1c <__sprint_r.part.0>
  404732:	2800      	cmp	r0, #0
  404734:	f47f af64 	bne.w	404600 <_vfiprintf_r+0x964>
  404738:	9910      	ldr	r1, [sp, #64]	; 0x40
  40473a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40473c:	1c48      	adds	r0, r1, #1
  40473e:	46ca      	mov	sl, r9
  404740:	e651      	b.n	4043e6 <_vfiprintf_r+0x74a>
  404742:	aa0f      	add	r2, sp, #60	; 0x3c
  404744:	9904      	ldr	r1, [sp, #16]
  404746:	9806      	ldr	r0, [sp, #24]
  404748:	f7ff fa68 	bl	403c1c <__sprint_r.part.0>
  40474c:	2800      	cmp	r0, #0
  40474e:	f47f af57 	bne.w	404600 <_vfiprintf_r+0x964>
  404752:	9910      	ldr	r1, [sp, #64]	; 0x40
  404754:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404756:	1c48      	adds	r0, r1, #1
  404758:	46ca      	mov	sl, r9
  40475a:	e448      	b.n	403fee <_vfiprintf_r+0x352>
  40475c:	2a00      	cmp	r2, #0
  40475e:	f040 8091 	bne.w	404884 <_vfiprintf_r+0xbe8>
  404762:	2001      	movs	r0, #1
  404764:	4611      	mov	r1, r2
  404766:	46ca      	mov	sl, r9
  404768:	e641      	b.n	4043ee <_vfiprintf_r+0x752>
  40476a:	aa0f      	add	r2, sp, #60	; 0x3c
  40476c:	9904      	ldr	r1, [sp, #16]
  40476e:	9806      	ldr	r0, [sp, #24]
  404770:	f7ff fa54 	bl	403c1c <__sprint_r.part.0>
  404774:	2800      	cmp	r0, #0
  404776:	f47f af43 	bne.w	404600 <_vfiprintf_r+0x964>
  40477a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40477c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40477e:	3001      	adds	r0, #1
  404780:	46ca      	mov	sl, r9
  404782:	e667      	b.n	404454 <_vfiprintf_r+0x7b8>
  404784:	46d3      	mov	fp, sl
  404786:	e6d6      	b.n	404536 <_vfiprintf_r+0x89a>
  404788:	9e07      	ldr	r6, [sp, #28]
  40478a:	3607      	adds	r6, #7
  40478c:	f026 0207 	bic.w	r2, r6, #7
  404790:	f102 0108 	add.w	r1, r2, #8
  404794:	e9d2 6700 	ldrd	r6, r7, [r2]
  404798:	9107      	str	r1, [sp, #28]
  40479a:	2201      	movs	r2, #1
  40479c:	f7ff bbb1 	b.w	403f02 <_vfiprintf_r+0x266>
  4047a0:	9e07      	ldr	r6, [sp, #28]
  4047a2:	3607      	adds	r6, #7
  4047a4:	f026 0607 	bic.w	r6, r6, #7
  4047a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4047ac:	f106 0208 	add.w	r2, r6, #8
  4047b0:	9207      	str	r2, [sp, #28]
  4047b2:	4606      	mov	r6, r0
  4047b4:	460f      	mov	r7, r1
  4047b6:	e4b6      	b.n	404126 <_vfiprintf_r+0x48a>
  4047b8:	9e07      	ldr	r6, [sp, #28]
  4047ba:	3607      	adds	r6, #7
  4047bc:	f026 0207 	bic.w	r2, r6, #7
  4047c0:	f102 0108 	add.w	r1, r2, #8
  4047c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4047c8:	9107      	str	r1, [sp, #28]
  4047ca:	2200      	movs	r2, #0
  4047cc:	f7ff bb99 	b.w	403f02 <_vfiprintf_r+0x266>
  4047d0:	9e07      	ldr	r6, [sp, #28]
  4047d2:	3607      	adds	r6, #7
  4047d4:	f026 0107 	bic.w	r1, r6, #7
  4047d8:	f101 0008 	add.w	r0, r1, #8
  4047dc:	9007      	str	r0, [sp, #28]
  4047de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4047e2:	e519      	b.n	404218 <_vfiprintf_r+0x57c>
  4047e4:	46cb      	mov	fp, r9
  4047e6:	f7ff bbab 	b.w	403f40 <_vfiprintf_r+0x2a4>
  4047ea:	252d      	movs	r5, #45	; 0x2d
  4047ec:	4276      	negs	r6, r6
  4047ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4047f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4047f6:	2201      	movs	r2, #1
  4047f8:	f7ff bb88 	b.w	403f0c <_vfiprintf_r+0x270>
  4047fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047fe:	b9b3      	cbnz	r3, 40482e <_vfiprintf_r+0xb92>
  404800:	4611      	mov	r1, r2
  404802:	2001      	movs	r0, #1
  404804:	46ca      	mov	sl, r9
  404806:	e5f2      	b.n	4043ee <_vfiprintf_r+0x752>
  404808:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40480c:	f000 fdfe 	bl	40540c <__retarget_lock_release_recursive>
  404810:	f04f 33ff 	mov.w	r3, #4294967295
  404814:	9303      	str	r3, [sp, #12]
  404816:	f7ff bb50 	b.w	403eba <_vfiprintf_r+0x21e>
  40481a:	aa0f      	add	r2, sp, #60	; 0x3c
  40481c:	9904      	ldr	r1, [sp, #16]
  40481e:	9806      	ldr	r0, [sp, #24]
  404820:	f7ff f9fc 	bl	403c1c <__sprint_r.part.0>
  404824:	2800      	cmp	r0, #0
  404826:	f47f aeeb 	bne.w	404600 <_vfiprintf_r+0x964>
  40482a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40482c:	e6a9      	b.n	404582 <_vfiprintf_r+0x8e6>
  40482e:	ab0e      	add	r3, sp, #56	; 0x38
  404830:	2202      	movs	r2, #2
  404832:	931c      	str	r3, [sp, #112]	; 0x70
  404834:	921d      	str	r2, [sp, #116]	; 0x74
  404836:	2001      	movs	r0, #1
  404838:	46ca      	mov	sl, r9
  40483a:	e5d0      	b.n	4043de <_vfiprintf_r+0x742>
  40483c:	aa0f      	add	r2, sp, #60	; 0x3c
  40483e:	9904      	ldr	r1, [sp, #16]
  404840:	9806      	ldr	r0, [sp, #24]
  404842:	f7ff f9eb 	bl	403c1c <__sprint_r.part.0>
  404846:	2800      	cmp	r0, #0
  404848:	f47f aeda 	bne.w	404600 <_vfiprintf_r+0x964>
  40484c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40484e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404850:	1c48      	adds	r0, r1, #1
  404852:	46ca      	mov	sl, r9
  404854:	e5a4      	b.n	4043a0 <_vfiprintf_r+0x704>
  404856:	9a07      	ldr	r2, [sp, #28]
  404858:	9903      	ldr	r1, [sp, #12]
  40485a:	6813      	ldr	r3, [r2, #0]
  40485c:	17cd      	asrs	r5, r1, #31
  40485e:	4608      	mov	r0, r1
  404860:	3204      	adds	r2, #4
  404862:	4629      	mov	r1, r5
  404864:	9207      	str	r2, [sp, #28]
  404866:	e9c3 0100 	strd	r0, r1, [r3]
  40486a:	f7ff ba54 	b.w	403d16 <_vfiprintf_r+0x7a>
  40486e:	4658      	mov	r0, fp
  404870:	9607      	str	r6, [sp, #28]
  404872:	9302      	str	r3, [sp, #8]
  404874:	f7ff f964 	bl	403b40 <strlen>
  404878:	2400      	movs	r4, #0
  40487a:	9005      	str	r0, [sp, #20]
  40487c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404880:	f7ff bb5e 	b.w	403f40 <_vfiprintf_r+0x2a4>
  404884:	aa0f      	add	r2, sp, #60	; 0x3c
  404886:	9904      	ldr	r1, [sp, #16]
  404888:	9806      	ldr	r0, [sp, #24]
  40488a:	f7ff f9c7 	bl	403c1c <__sprint_r.part.0>
  40488e:	2800      	cmp	r0, #0
  404890:	f47f aeb6 	bne.w	404600 <_vfiprintf_r+0x964>
  404894:	9910      	ldr	r1, [sp, #64]	; 0x40
  404896:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404898:	1c48      	adds	r0, r1, #1
  40489a:	46ca      	mov	sl, r9
  40489c:	e5a7      	b.n	4043ee <_vfiprintf_r+0x752>
  40489e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4048a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048a2:	4e20      	ldr	r6, [pc, #128]	; (404924 <_vfiprintf_r+0xc88>)
  4048a4:	3101      	adds	r1, #1
  4048a6:	f7ff bb90 	b.w	403fca <_vfiprintf_r+0x32e>
  4048aa:	2c06      	cmp	r4, #6
  4048ac:	bf28      	it	cs
  4048ae:	2406      	movcs	r4, #6
  4048b0:	9405      	str	r4, [sp, #20]
  4048b2:	9607      	str	r6, [sp, #28]
  4048b4:	9401      	str	r4, [sp, #4]
  4048b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404928 <_vfiprintf_r+0xc8c>
  4048ba:	e4d5      	b.n	404268 <_vfiprintf_r+0x5cc>
  4048bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4048be:	4e19      	ldr	r6, [pc, #100]	; (404924 <_vfiprintf_r+0xc88>)
  4048c0:	3001      	adds	r0, #1
  4048c2:	e603      	b.n	4044cc <_vfiprintf_r+0x830>
  4048c4:	9405      	str	r4, [sp, #20]
  4048c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4048ca:	9607      	str	r6, [sp, #28]
  4048cc:	9302      	str	r3, [sp, #8]
  4048ce:	4604      	mov	r4, r0
  4048d0:	f7ff bb36 	b.w	403f40 <_vfiprintf_r+0x2a4>
  4048d4:	4686      	mov	lr, r0
  4048d6:	f7ff bbce 	b.w	404076 <_vfiprintf_r+0x3da>
  4048da:	9806      	ldr	r0, [sp, #24]
  4048dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4048de:	4659      	mov	r1, fp
  4048e0:	f7ff f99c 	bl	403c1c <__sprint_r.part.0>
  4048e4:	2800      	cmp	r0, #0
  4048e6:	f43f ae24 	beq.w	404532 <_vfiprintf_r+0x896>
  4048ea:	e624      	b.n	404536 <_vfiprintf_r+0x89a>
  4048ec:	9907      	ldr	r1, [sp, #28]
  4048ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4048f2:	680c      	ldr	r4, [r1, #0]
  4048f4:	3104      	adds	r1, #4
  4048f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4048fa:	46b8      	mov	r8, r7
  4048fc:	9107      	str	r1, [sp, #28]
  4048fe:	f7ff ba3f 	b.w	403d80 <_vfiprintf_r+0xe4>
  404902:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404906:	e43c      	b.n	404182 <_vfiprintf_r+0x4e6>
  404908:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40490c:	e521      	b.n	404352 <_vfiprintf_r+0x6b6>
  40490e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404912:	f7ff bbf4 	b.w	4040fe <_vfiprintf_r+0x462>
  404916:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40491a:	e491      	b.n	404240 <_vfiprintf_r+0x5a4>
  40491c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404920:	e469      	b.n	4041f6 <_vfiprintf_r+0x55a>
  404922:	bf00      	nop
  404924:	00407214 	.word	0x00407214
  404928:	0040720c 	.word	0x0040720c

0040492c <__sbprintf>:
  40492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404930:	460c      	mov	r4, r1
  404932:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404936:	8989      	ldrh	r1, [r1, #12]
  404938:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40493a:	89e5      	ldrh	r5, [r4, #14]
  40493c:	9619      	str	r6, [sp, #100]	; 0x64
  40493e:	f021 0102 	bic.w	r1, r1, #2
  404942:	4606      	mov	r6, r0
  404944:	69e0      	ldr	r0, [r4, #28]
  404946:	f8ad 100c 	strh.w	r1, [sp, #12]
  40494a:	4617      	mov	r7, r2
  40494c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404950:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404952:	f8ad 500e 	strh.w	r5, [sp, #14]
  404956:	4698      	mov	r8, r3
  404958:	ad1a      	add	r5, sp, #104	; 0x68
  40495a:	2300      	movs	r3, #0
  40495c:	9007      	str	r0, [sp, #28]
  40495e:	a816      	add	r0, sp, #88	; 0x58
  404960:	9209      	str	r2, [sp, #36]	; 0x24
  404962:	9306      	str	r3, [sp, #24]
  404964:	9500      	str	r5, [sp, #0]
  404966:	9504      	str	r5, [sp, #16]
  404968:	9102      	str	r1, [sp, #8]
  40496a:	9105      	str	r1, [sp, #20]
  40496c:	f000 fd48 	bl	405400 <__retarget_lock_init_recursive>
  404970:	4643      	mov	r3, r8
  404972:	463a      	mov	r2, r7
  404974:	4669      	mov	r1, sp
  404976:	4630      	mov	r0, r6
  404978:	f7ff f990 	bl	403c9c <_vfiprintf_r>
  40497c:	1e05      	subs	r5, r0, #0
  40497e:	db07      	blt.n	404990 <__sbprintf+0x64>
  404980:	4630      	mov	r0, r6
  404982:	4669      	mov	r1, sp
  404984:	f000 f928 	bl	404bd8 <_fflush_r>
  404988:	2800      	cmp	r0, #0
  40498a:	bf18      	it	ne
  40498c:	f04f 35ff 	movne.w	r5, #4294967295
  404990:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404994:	065b      	lsls	r3, r3, #25
  404996:	d503      	bpl.n	4049a0 <__sbprintf+0x74>
  404998:	89a3      	ldrh	r3, [r4, #12]
  40499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40499e:	81a3      	strh	r3, [r4, #12]
  4049a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4049a2:	f000 fd2f 	bl	405404 <__retarget_lock_close_recursive>
  4049a6:	4628      	mov	r0, r5
  4049a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004049b0 <__swsetup_r>:
  4049b0:	b538      	push	{r3, r4, r5, lr}
  4049b2:	4b30      	ldr	r3, [pc, #192]	; (404a74 <__swsetup_r+0xc4>)
  4049b4:	681b      	ldr	r3, [r3, #0]
  4049b6:	4605      	mov	r5, r0
  4049b8:	460c      	mov	r4, r1
  4049ba:	b113      	cbz	r3, 4049c2 <__swsetup_r+0x12>
  4049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4049be:	2a00      	cmp	r2, #0
  4049c0:	d038      	beq.n	404a34 <__swsetup_r+0x84>
  4049c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049c6:	b293      	uxth	r3, r2
  4049c8:	0718      	lsls	r0, r3, #28
  4049ca:	d50c      	bpl.n	4049e6 <__swsetup_r+0x36>
  4049cc:	6920      	ldr	r0, [r4, #16]
  4049ce:	b1a8      	cbz	r0, 4049fc <__swsetup_r+0x4c>
  4049d0:	f013 0201 	ands.w	r2, r3, #1
  4049d4:	d01e      	beq.n	404a14 <__swsetup_r+0x64>
  4049d6:	6963      	ldr	r3, [r4, #20]
  4049d8:	2200      	movs	r2, #0
  4049da:	425b      	negs	r3, r3
  4049dc:	61a3      	str	r3, [r4, #24]
  4049de:	60a2      	str	r2, [r4, #8]
  4049e0:	b1f0      	cbz	r0, 404a20 <__swsetup_r+0x70>
  4049e2:	2000      	movs	r0, #0
  4049e4:	bd38      	pop	{r3, r4, r5, pc}
  4049e6:	06d9      	lsls	r1, r3, #27
  4049e8:	d53c      	bpl.n	404a64 <__swsetup_r+0xb4>
  4049ea:	0758      	lsls	r0, r3, #29
  4049ec:	d426      	bmi.n	404a3c <__swsetup_r+0x8c>
  4049ee:	6920      	ldr	r0, [r4, #16]
  4049f0:	f042 0308 	orr.w	r3, r2, #8
  4049f4:	81a3      	strh	r3, [r4, #12]
  4049f6:	b29b      	uxth	r3, r3
  4049f8:	2800      	cmp	r0, #0
  4049fa:	d1e9      	bne.n	4049d0 <__swsetup_r+0x20>
  4049fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404a00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404a04:	d0e4      	beq.n	4049d0 <__swsetup_r+0x20>
  404a06:	4628      	mov	r0, r5
  404a08:	4621      	mov	r1, r4
  404a0a:	f000 fd2f 	bl	40546c <__smakebuf_r>
  404a0e:	89a3      	ldrh	r3, [r4, #12]
  404a10:	6920      	ldr	r0, [r4, #16]
  404a12:	e7dd      	b.n	4049d0 <__swsetup_r+0x20>
  404a14:	0799      	lsls	r1, r3, #30
  404a16:	bf58      	it	pl
  404a18:	6962      	ldrpl	r2, [r4, #20]
  404a1a:	60a2      	str	r2, [r4, #8]
  404a1c:	2800      	cmp	r0, #0
  404a1e:	d1e0      	bne.n	4049e2 <__swsetup_r+0x32>
  404a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a24:	061a      	lsls	r2, r3, #24
  404a26:	d5dd      	bpl.n	4049e4 <__swsetup_r+0x34>
  404a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a2c:	81a3      	strh	r3, [r4, #12]
  404a2e:	f04f 30ff 	mov.w	r0, #4294967295
  404a32:	bd38      	pop	{r3, r4, r5, pc}
  404a34:	4618      	mov	r0, r3
  404a36:	f000 f927 	bl	404c88 <__sinit>
  404a3a:	e7c2      	b.n	4049c2 <__swsetup_r+0x12>
  404a3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a3e:	b151      	cbz	r1, 404a56 <__swsetup_r+0xa6>
  404a40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a44:	4299      	cmp	r1, r3
  404a46:	d004      	beq.n	404a52 <__swsetup_r+0xa2>
  404a48:	4628      	mov	r0, r5
  404a4a:	f000 fa43 	bl	404ed4 <_free_r>
  404a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a52:	2300      	movs	r3, #0
  404a54:	6323      	str	r3, [r4, #48]	; 0x30
  404a56:	2300      	movs	r3, #0
  404a58:	6920      	ldr	r0, [r4, #16]
  404a5a:	6063      	str	r3, [r4, #4]
  404a5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404a60:	6020      	str	r0, [r4, #0]
  404a62:	e7c5      	b.n	4049f0 <__swsetup_r+0x40>
  404a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404a68:	2309      	movs	r3, #9
  404a6a:	602b      	str	r3, [r5, #0]
  404a6c:	f04f 30ff 	mov.w	r0, #4294967295
  404a70:	81a2      	strh	r2, [r4, #12]
  404a72:	bd38      	pop	{r3, r4, r5, pc}
  404a74:	20400024 	.word	0x20400024

00404a78 <register_fini>:
  404a78:	4b02      	ldr	r3, [pc, #8]	; (404a84 <register_fini+0xc>)
  404a7a:	b113      	cbz	r3, 404a82 <register_fini+0xa>
  404a7c:	4802      	ldr	r0, [pc, #8]	; (404a88 <register_fini+0x10>)
  404a7e:	f000 b805 	b.w	404a8c <atexit>
  404a82:	4770      	bx	lr
  404a84:	00000000 	.word	0x00000000
  404a88:	00404cf9 	.word	0x00404cf9

00404a8c <atexit>:
  404a8c:	2300      	movs	r3, #0
  404a8e:	4601      	mov	r1, r0
  404a90:	461a      	mov	r2, r3
  404a92:	4618      	mov	r0, r3
  404a94:	f001 bb66 	b.w	406164 <__register_exitproc>

00404a98 <__sflush_r>:
  404a98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404a9c:	b29a      	uxth	r2, r3
  404a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404aa2:	460d      	mov	r5, r1
  404aa4:	0711      	lsls	r1, r2, #28
  404aa6:	4680      	mov	r8, r0
  404aa8:	d43a      	bmi.n	404b20 <__sflush_r+0x88>
  404aaa:	686a      	ldr	r2, [r5, #4]
  404aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404ab0:	2a00      	cmp	r2, #0
  404ab2:	81ab      	strh	r3, [r5, #12]
  404ab4:	dd6f      	ble.n	404b96 <__sflush_r+0xfe>
  404ab6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404ab8:	2c00      	cmp	r4, #0
  404aba:	d049      	beq.n	404b50 <__sflush_r+0xb8>
  404abc:	2200      	movs	r2, #0
  404abe:	b29b      	uxth	r3, r3
  404ac0:	f8d8 6000 	ldr.w	r6, [r8]
  404ac4:	f8c8 2000 	str.w	r2, [r8]
  404ac8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404acc:	d067      	beq.n	404b9e <__sflush_r+0x106>
  404ace:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404ad0:	075f      	lsls	r7, r3, #29
  404ad2:	d505      	bpl.n	404ae0 <__sflush_r+0x48>
  404ad4:	6869      	ldr	r1, [r5, #4]
  404ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404ad8:	1a52      	subs	r2, r2, r1
  404ada:	b10b      	cbz	r3, 404ae0 <__sflush_r+0x48>
  404adc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404ade:	1ad2      	subs	r2, r2, r3
  404ae0:	2300      	movs	r3, #0
  404ae2:	69e9      	ldr	r1, [r5, #28]
  404ae4:	4640      	mov	r0, r8
  404ae6:	47a0      	blx	r4
  404ae8:	1c44      	adds	r4, r0, #1
  404aea:	d03c      	beq.n	404b66 <__sflush_r+0xce>
  404aec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404af0:	692a      	ldr	r2, [r5, #16]
  404af2:	602a      	str	r2, [r5, #0]
  404af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404af8:	2200      	movs	r2, #0
  404afa:	81ab      	strh	r3, [r5, #12]
  404afc:	04db      	lsls	r3, r3, #19
  404afe:	606a      	str	r2, [r5, #4]
  404b00:	d447      	bmi.n	404b92 <__sflush_r+0xfa>
  404b02:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404b04:	f8c8 6000 	str.w	r6, [r8]
  404b08:	b311      	cbz	r1, 404b50 <__sflush_r+0xb8>
  404b0a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404b0e:	4299      	cmp	r1, r3
  404b10:	d002      	beq.n	404b18 <__sflush_r+0x80>
  404b12:	4640      	mov	r0, r8
  404b14:	f000 f9de 	bl	404ed4 <_free_r>
  404b18:	2000      	movs	r0, #0
  404b1a:	6328      	str	r0, [r5, #48]	; 0x30
  404b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b20:	692e      	ldr	r6, [r5, #16]
  404b22:	b1ae      	cbz	r6, 404b50 <__sflush_r+0xb8>
  404b24:	682c      	ldr	r4, [r5, #0]
  404b26:	602e      	str	r6, [r5, #0]
  404b28:	0791      	lsls	r1, r2, #30
  404b2a:	bf0c      	ite	eq
  404b2c:	696b      	ldreq	r3, [r5, #20]
  404b2e:	2300      	movne	r3, #0
  404b30:	1ba4      	subs	r4, r4, r6
  404b32:	60ab      	str	r3, [r5, #8]
  404b34:	e00a      	b.n	404b4c <__sflush_r+0xb4>
  404b36:	4623      	mov	r3, r4
  404b38:	4632      	mov	r2, r6
  404b3a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404b3c:	69e9      	ldr	r1, [r5, #28]
  404b3e:	4640      	mov	r0, r8
  404b40:	47b8      	blx	r7
  404b42:	2800      	cmp	r0, #0
  404b44:	eba4 0400 	sub.w	r4, r4, r0
  404b48:	4406      	add	r6, r0
  404b4a:	dd04      	ble.n	404b56 <__sflush_r+0xbe>
  404b4c:	2c00      	cmp	r4, #0
  404b4e:	dcf2      	bgt.n	404b36 <__sflush_r+0x9e>
  404b50:	2000      	movs	r0, #0
  404b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b56:	89ab      	ldrh	r3, [r5, #12]
  404b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b5c:	81ab      	strh	r3, [r5, #12]
  404b5e:	f04f 30ff 	mov.w	r0, #4294967295
  404b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b66:	f8d8 4000 	ldr.w	r4, [r8]
  404b6a:	2c1d      	cmp	r4, #29
  404b6c:	d8f3      	bhi.n	404b56 <__sflush_r+0xbe>
  404b6e:	4b19      	ldr	r3, [pc, #100]	; (404bd4 <__sflush_r+0x13c>)
  404b70:	40e3      	lsrs	r3, r4
  404b72:	43db      	mvns	r3, r3
  404b74:	f013 0301 	ands.w	r3, r3, #1
  404b78:	d1ed      	bne.n	404b56 <__sflush_r+0xbe>
  404b7a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404b7e:	606b      	str	r3, [r5, #4]
  404b80:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404b84:	6929      	ldr	r1, [r5, #16]
  404b86:	81ab      	strh	r3, [r5, #12]
  404b88:	04da      	lsls	r2, r3, #19
  404b8a:	6029      	str	r1, [r5, #0]
  404b8c:	d5b9      	bpl.n	404b02 <__sflush_r+0x6a>
  404b8e:	2c00      	cmp	r4, #0
  404b90:	d1b7      	bne.n	404b02 <__sflush_r+0x6a>
  404b92:	6528      	str	r0, [r5, #80]	; 0x50
  404b94:	e7b5      	b.n	404b02 <__sflush_r+0x6a>
  404b96:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404b98:	2a00      	cmp	r2, #0
  404b9a:	dc8c      	bgt.n	404ab6 <__sflush_r+0x1e>
  404b9c:	e7d8      	b.n	404b50 <__sflush_r+0xb8>
  404b9e:	2301      	movs	r3, #1
  404ba0:	69e9      	ldr	r1, [r5, #28]
  404ba2:	4640      	mov	r0, r8
  404ba4:	47a0      	blx	r4
  404ba6:	1c43      	adds	r3, r0, #1
  404ba8:	4602      	mov	r2, r0
  404baa:	d002      	beq.n	404bb2 <__sflush_r+0x11a>
  404bac:	89ab      	ldrh	r3, [r5, #12]
  404bae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404bb0:	e78e      	b.n	404ad0 <__sflush_r+0x38>
  404bb2:	f8d8 3000 	ldr.w	r3, [r8]
  404bb6:	2b00      	cmp	r3, #0
  404bb8:	d0f8      	beq.n	404bac <__sflush_r+0x114>
  404bba:	2b1d      	cmp	r3, #29
  404bbc:	d001      	beq.n	404bc2 <__sflush_r+0x12a>
  404bbe:	2b16      	cmp	r3, #22
  404bc0:	d102      	bne.n	404bc8 <__sflush_r+0x130>
  404bc2:	f8c8 6000 	str.w	r6, [r8]
  404bc6:	e7c3      	b.n	404b50 <__sflush_r+0xb8>
  404bc8:	89ab      	ldrh	r3, [r5, #12]
  404bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404bce:	81ab      	strh	r3, [r5, #12]
  404bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404bd4:	20400001 	.word	0x20400001

00404bd8 <_fflush_r>:
  404bd8:	b538      	push	{r3, r4, r5, lr}
  404bda:	460d      	mov	r5, r1
  404bdc:	4604      	mov	r4, r0
  404bde:	b108      	cbz	r0, 404be4 <_fflush_r+0xc>
  404be0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404be2:	b1bb      	cbz	r3, 404c14 <_fflush_r+0x3c>
  404be4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404be8:	b188      	cbz	r0, 404c0e <_fflush_r+0x36>
  404bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404bec:	07db      	lsls	r3, r3, #31
  404bee:	d401      	bmi.n	404bf4 <_fflush_r+0x1c>
  404bf0:	0581      	lsls	r1, r0, #22
  404bf2:	d517      	bpl.n	404c24 <_fflush_r+0x4c>
  404bf4:	4620      	mov	r0, r4
  404bf6:	4629      	mov	r1, r5
  404bf8:	f7ff ff4e 	bl	404a98 <__sflush_r>
  404bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404bfe:	07da      	lsls	r2, r3, #31
  404c00:	4604      	mov	r4, r0
  404c02:	d402      	bmi.n	404c0a <_fflush_r+0x32>
  404c04:	89ab      	ldrh	r3, [r5, #12]
  404c06:	059b      	lsls	r3, r3, #22
  404c08:	d507      	bpl.n	404c1a <_fflush_r+0x42>
  404c0a:	4620      	mov	r0, r4
  404c0c:	bd38      	pop	{r3, r4, r5, pc}
  404c0e:	4604      	mov	r4, r0
  404c10:	4620      	mov	r0, r4
  404c12:	bd38      	pop	{r3, r4, r5, pc}
  404c14:	f000 f838 	bl	404c88 <__sinit>
  404c18:	e7e4      	b.n	404be4 <_fflush_r+0xc>
  404c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404c1c:	f000 fbf6 	bl	40540c <__retarget_lock_release_recursive>
  404c20:	4620      	mov	r0, r4
  404c22:	bd38      	pop	{r3, r4, r5, pc}
  404c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404c26:	f000 fbef 	bl	405408 <__retarget_lock_acquire_recursive>
  404c2a:	e7e3      	b.n	404bf4 <_fflush_r+0x1c>

00404c2c <_cleanup_r>:
  404c2c:	4901      	ldr	r1, [pc, #4]	; (404c34 <_cleanup_r+0x8>)
  404c2e:	f000 bbaf 	b.w	405390 <_fwalk_reent>
  404c32:	bf00      	nop
  404c34:	0040624d 	.word	0x0040624d

00404c38 <std.isra.0>:
  404c38:	b510      	push	{r4, lr}
  404c3a:	2300      	movs	r3, #0
  404c3c:	4604      	mov	r4, r0
  404c3e:	8181      	strh	r1, [r0, #12]
  404c40:	81c2      	strh	r2, [r0, #14]
  404c42:	6003      	str	r3, [r0, #0]
  404c44:	6043      	str	r3, [r0, #4]
  404c46:	6083      	str	r3, [r0, #8]
  404c48:	6643      	str	r3, [r0, #100]	; 0x64
  404c4a:	6103      	str	r3, [r0, #16]
  404c4c:	6143      	str	r3, [r0, #20]
  404c4e:	6183      	str	r3, [r0, #24]
  404c50:	4619      	mov	r1, r3
  404c52:	2208      	movs	r2, #8
  404c54:	305c      	adds	r0, #92	; 0x5c
  404c56:	f7fe fcd7 	bl	403608 <memset>
  404c5a:	4807      	ldr	r0, [pc, #28]	; (404c78 <std.isra.0+0x40>)
  404c5c:	4907      	ldr	r1, [pc, #28]	; (404c7c <std.isra.0+0x44>)
  404c5e:	4a08      	ldr	r2, [pc, #32]	; (404c80 <std.isra.0+0x48>)
  404c60:	4b08      	ldr	r3, [pc, #32]	; (404c84 <std.isra.0+0x4c>)
  404c62:	6220      	str	r0, [r4, #32]
  404c64:	61e4      	str	r4, [r4, #28]
  404c66:	6261      	str	r1, [r4, #36]	; 0x24
  404c68:	62a2      	str	r2, [r4, #40]	; 0x28
  404c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  404c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404c74:	f000 bbc4 	b.w	405400 <__retarget_lock_init_recursive>
  404c78:	00405f91 	.word	0x00405f91
  404c7c:	00405fb5 	.word	0x00405fb5
  404c80:	00405ff1 	.word	0x00405ff1
  404c84:	00406011 	.word	0x00406011

00404c88 <__sinit>:
  404c88:	b510      	push	{r4, lr}
  404c8a:	4604      	mov	r4, r0
  404c8c:	4812      	ldr	r0, [pc, #72]	; (404cd8 <__sinit+0x50>)
  404c8e:	f000 fbbb 	bl	405408 <__retarget_lock_acquire_recursive>
  404c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404c94:	b9d2      	cbnz	r2, 404ccc <__sinit+0x44>
  404c96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404c9a:	4810      	ldr	r0, [pc, #64]	; (404cdc <__sinit+0x54>)
  404c9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ca0:	2103      	movs	r1, #3
  404ca2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ca8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404cac:	6860      	ldr	r0, [r4, #4]
  404cae:	2104      	movs	r1, #4
  404cb0:	f7ff ffc2 	bl	404c38 <std.isra.0>
  404cb4:	2201      	movs	r2, #1
  404cb6:	2109      	movs	r1, #9
  404cb8:	68a0      	ldr	r0, [r4, #8]
  404cba:	f7ff ffbd 	bl	404c38 <std.isra.0>
  404cbe:	2202      	movs	r2, #2
  404cc0:	2112      	movs	r1, #18
  404cc2:	68e0      	ldr	r0, [r4, #12]
  404cc4:	f7ff ffb8 	bl	404c38 <std.isra.0>
  404cc8:	2301      	movs	r3, #1
  404cca:	63a3      	str	r3, [r4, #56]	; 0x38
  404ccc:	4802      	ldr	r0, [pc, #8]	; (404cd8 <__sinit+0x50>)
  404cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404cd2:	f000 bb9b 	b.w	40540c <__retarget_lock_release_recursive>
  404cd6:	bf00      	nop
  404cd8:	2040c644 	.word	0x2040c644
  404cdc:	00404c2d 	.word	0x00404c2d

00404ce0 <__sfp_lock_acquire>:
  404ce0:	4801      	ldr	r0, [pc, #4]	; (404ce8 <__sfp_lock_acquire+0x8>)
  404ce2:	f000 bb91 	b.w	405408 <__retarget_lock_acquire_recursive>
  404ce6:	bf00      	nop
  404ce8:	2040c658 	.word	0x2040c658

00404cec <__sfp_lock_release>:
  404cec:	4801      	ldr	r0, [pc, #4]	; (404cf4 <__sfp_lock_release+0x8>)
  404cee:	f000 bb8d 	b.w	40540c <__retarget_lock_release_recursive>
  404cf2:	bf00      	nop
  404cf4:	2040c658 	.word	0x2040c658

00404cf8 <__libc_fini_array>:
  404cf8:	b538      	push	{r3, r4, r5, lr}
  404cfa:	4c0a      	ldr	r4, [pc, #40]	; (404d24 <__libc_fini_array+0x2c>)
  404cfc:	4d0a      	ldr	r5, [pc, #40]	; (404d28 <__libc_fini_array+0x30>)
  404cfe:	1b64      	subs	r4, r4, r5
  404d00:	10a4      	asrs	r4, r4, #2
  404d02:	d00a      	beq.n	404d1a <__libc_fini_array+0x22>
  404d04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404d08:	3b01      	subs	r3, #1
  404d0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404d0e:	3c01      	subs	r4, #1
  404d10:	f855 3904 	ldr.w	r3, [r5], #-4
  404d14:	4798      	blx	r3
  404d16:	2c00      	cmp	r4, #0
  404d18:	d1f9      	bne.n	404d0e <__libc_fini_array+0x16>
  404d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404d1e:	f002 bb1d 	b.w	40735c <_fini>
  404d22:	bf00      	nop
  404d24:	0040736c 	.word	0x0040736c
  404d28:	00407368 	.word	0x00407368

00404d2c <__fputwc>:
  404d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d30:	b082      	sub	sp, #8
  404d32:	4680      	mov	r8, r0
  404d34:	4689      	mov	r9, r1
  404d36:	4614      	mov	r4, r2
  404d38:	f000 fb54 	bl	4053e4 <__locale_mb_cur_max>
  404d3c:	2801      	cmp	r0, #1
  404d3e:	d036      	beq.n	404dae <__fputwc+0x82>
  404d40:	464a      	mov	r2, r9
  404d42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404d46:	a901      	add	r1, sp, #4
  404d48:	4640      	mov	r0, r8
  404d4a:	f001 f9bd 	bl	4060c8 <_wcrtomb_r>
  404d4e:	1c42      	adds	r2, r0, #1
  404d50:	4606      	mov	r6, r0
  404d52:	d025      	beq.n	404da0 <__fputwc+0x74>
  404d54:	b3a8      	cbz	r0, 404dc2 <__fputwc+0x96>
  404d56:	f89d e004 	ldrb.w	lr, [sp, #4]
  404d5a:	2500      	movs	r5, #0
  404d5c:	f10d 0a04 	add.w	sl, sp, #4
  404d60:	e009      	b.n	404d76 <__fputwc+0x4a>
  404d62:	6823      	ldr	r3, [r4, #0]
  404d64:	1c5a      	adds	r2, r3, #1
  404d66:	6022      	str	r2, [r4, #0]
  404d68:	f883 e000 	strb.w	lr, [r3]
  404d6c:	3501      	adds	r5, #1
  404d6e:	42b5      	cmp	r5, r6
  404d70:	d227      	bcs.n	404dc2 <__fputwc+0x96>
  404d72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404d76:	68a3      	ldr	r3, [r4, #8]
  404d78:	3b01      	subs	r3, #1
  404d7a:	2b00      	cmp	r3, #0
  404d7c:	60a3      	str	r3, [r4, #8]
  404d7e:	daf0      	bge.n	404d62 <__fputwc+0x36>
  404d80:	69a7      	ldr	r7, [r4, #24]
  404d82:	42bb      	cmp	r3, r7
  404d84:	4671      	mov	r1, lr
  404d86:	4622      	mov	r2, r4
  404d88:	4640      	mov	r0, r8
  404d8a:	db02      	blt.n	404d92 <__fputwc+0x66>
  404d8c:	f1be 0f0a 	cmp.w	lr, #10
  404d90:	d1e7      	bne.n	404d62 <__fputwc+0x36>
  404d92:	f001 f941 	bl	406018 <__swbuf_r>
  404d96:	1c43      	adds	r3, r0, #1
  404d98:	d1e8      	bne.n	404d6c <__fputwc+0x40>
  404d9a:	b002      	add	sp, #8
  404d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404da0:	89a3      	ldrh	r3, [r4, #12]
  404da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404da6:	81a3      	strh	r3, [r4, #12]
  404da8:	b002      	add	sp, #8
  404daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dae:	f109 33ff 	add.w	r3, r9, #4294967295
  404db2:	2bfe      	cmp	r3, #254	; 0xfe
  404db4:	d8c4      	bhi.n	404d40 <__fputwc+0x14>
  404db6:	fa5f fe89 	uxtb.w	lr, r9
  404dba:	4606      	mov	r6, r0
  404dbc:	f88d e004 	strb.w	lr, [sp, #4]
  404dc0:	e7cb      	b.n	404d5a <__fputwc+0x2e>
  404dc2:	4648      	mov	r0, r9
  404dc4:	b002      	add	sp, #8
  404dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dca:	bf00      	nop

00404dcc <_fputwc_r>:
  404dcc:	b530      	push	{r4, r5, lr}
  404dce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404dd0:	f013 0f01 	tst.w	r3, #1
  404dd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404dd8:	4614      	mov	r4, r2
  404dda:	b083      	sub	sp, #12
  404ddc:	4605      	mov	r5, r0
  404dde:	b29a      	uxth	r2, r3
  404de0:	d101      	bne.n	404de6 <_fputwc_r+0x1a>
  404de2:	0590      	lsls	r0, r2, #22
  404de4:	d51c      	bpl.n	404e20 <_fputwc_r+0x54>
  404de6:	0490      	lsls	r0, r2, #18
  404de8:	d406      	bmi.n	404df8 <_fputwc_r+0x2c>
  404dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404df4:	81a3      	strh	r3, [r4, #12]
  404df6:	6662      	str	r2, [r4, #100]	; 0x64
  404df8:	4628      	mov	r0, r5
  404dfa:	4622      	mov	r2, r4
  404dfc:	f7ff ff96 	bl	404d2c <__fputwc>
  404e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404e02:	07da      	lsls	r2, r3, #31
  404e04:	4605      	mov	r5, r0
  404e06:	d402      	bmi.n	404e0e <_fputwc_r+0x42>
  404e08:	89a3      	ldrh	r3, [r4, #12]
  404e0a:	059b      	lsls	r3, r3, #22
  404e0c:	d502      	bpl.n	404e14 <_fputwc_r+0x48>
  404e0e:	4628      	mov	r0, r5
  404e10:	b003      	add	sp, #12
  404e12:	bd30      	pop	{r4, r5, pc}
  404e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e16:	f000 faf9 	bl	40540c <__retarget_lock_release_recursive>
  404e1a:	4628      	mov	r0, r5
  404e1c:	b003      	add	sp, #12
  404e1e:	bd30      	pop	{r4, r5, pc}
  404e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e22:	9101      	str	r1, [sp, #4]
  404e24:	f000 faf0 	bl	405408 <__retarget_lock_acquire_recursive>
  404e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e2c:	9901      	ldr	r1, [sp, #4]
  404e2e:	b29a      	uxth	r2, r3
  404e30:	e7d9      	b.n	404de6 <_fputwc_r+0x1a>
  404e32:	bf00      	nop

00404e34 <_malloc_trim_r>:
  404e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e36:	4f24      	ldr	r7, [pc, #144]	; (404ec8 <_malloc_trim_r+0x94>)
  404e38:	460c      	mov	r4, r1
  404e3a:	4606      	mov	r6, r0
  404e3c:	f000 fee4 	bl	405c08 <__malloc_lock>
  404e40:	68bb      	ldr	r3, [r7, #8]
  404e42:	685d      	ldr	r5, [r3, #4]
  404e44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404e48:	310f      	adds	r1, #15
  404e4a:	f025 0503 	bic.w	r5, r5, #3
  404e4e:	4429      	add	r1, r5
  404e50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404e54:	f021 010f 	bic.w	r1, r1, #15
  404e58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404e5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404e60:	db07      	blt.n	404e72 <_malloc_trim_r+0x3e>
  404e62:	2100      	movs	r1, #0
  404e64:	4630      	mov	r0, r6
  404e66:	f001 f881 	bl	405f6c <_sbrk_r>
  404e6a:	68bb      	ldr	r3, [r7, #8]
  404e6c:	442b      	add	r3, r5
  404e6e:	4298      	cmp	r0, r3
  404e70:	d004      	beq.n	404e7c <_malloc_trim_r+0x48>
  404e72:	4630      	mov	r0, r6
  404e74:	f000 fece 	bl	405c14 <__malloc_unlock>
  404e78:	2000      	movs	r0, #0
  404e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e7c:	4261      	negs	r1, r4
  404e7e:	4630      	mov	r0, r6
  404e80:	f001 f874 	bl	405f6c <_sbrk_r>
  404e84:	3001      	adds	r0, #1
  404e86:	d00d      	beq.n	404ea4 <_malloc_trim_r+0x70>
  404e88:	4b10      	ldr	r3, [pc, #64]	; (404ecc <_malloc_trim_r+0x98>)
  404e8a:	68ba      	ldr	r2, [r7, #8]
  404e8c:	6819      	ldr	r1, [r3, #0]
  404e8e:	1b2d      	subs	r5, r5, r4
  404e90:	f045 0501 	orr.w	r5, r5, #1
  404e94:	4630      	mov	r0, r6
  404e96:	1b09      	subs	r1, r1, r4
  404e98:	6055      	str	r5, [r2, #4]
  404e9a:	6019      	str	r1, [r3, #0]
  404e9c:	f000 feba 	bl	405c14 <__malloc_unlock>
  404ea0:	2001      	movs	r0, #1
  404ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ea4:	2100      	movs	r1, #0
  404ea6:	4630      	mov	r0, r6
  404ea8:	f001 f860 	bl	405f6c <_sbrk_r>
  404eac:	68ba      	ldr	r2, [r7, #8]
  404eae:	1a83      	subs	r3, r0, r2
  404eb0:	2b0f      	cmp	r3, #15
  404eb2:	ddde      	ble.n	404e72 <_malloc_trim_r+0x3e>
  404eb4:	4c06      	ldr	r4, [pc, #24]	; (404ed0 <_malloc_trim_r+0x9c>)
  404eb6:	4905      	ldr	r1, [pc, #20]	; (404ecc <_malloc_trim_r+0x98>)
  404eb8:	6824      	ldr	r4, [r4, #0]
  404eba:	f043 0301 	orr.w	r3, r3, #1
  404ebe:	1b00      	subs	r0, r0, r4
  404ec0:	6053      	str	r3, [r2, #4]
  404ec2:	6008      	str	r0, [r1, #0]
  404ec4:	e7d5      	b.n	404e72 <_malloc_trim_r+0x3e>
  404ec6:	bf00      	nop
  404ec8:	204005c0 	.word	0x204005c0
  404ecc:	2040c5ac 	.word	0x2040c5ac
  404ed0:	204009c8 	.word	0x204009c8

00404ed4 <_free_r>:
  404ed4:	2900      	cmp	r1, #0
  404ed6:	d044      	beq.n	404f62 <_free_r+0x8e>
  404ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404edc:	460d      	mov	r5, r1
  404ede:	4680      	mov	r8, r0
  404ee0:	f000 fe92 	bl	405c08 <__malloc_lock>
  404ee4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404ee8:	4969      	ldr	r1, [pc, #420]	; (405090 <_free_r+0x1bc>)
  404eea:	f027 0301 	bic.w	r3, r7, #1
  404eee:	f1a5 0408 	sub.w	r4, r5, #8
  404ef2:	18e2      	adds	r2, r4, r3
  404ef4:	688e      	ldr	r6, [r1, #8]
  404ef6:	6850      	ldr	r0, [r2, #4]
  404ef8:	42b2      	cmp	r2, r6
  404efa:	f020 0003 	bic.w	r0, r0, #3
  404efe:	d05e      	beq.n	404fbe <_free_r+0xea>
  404f00:	07fe      	lsls	r6, r7, #31
  404f02:	6050      	str	r0, [r2, #4]
  404f04:	d40b      	bmi.n	404f1e <_free_r+0x4a>
  404f06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404f0a:	1be4      	subs	r4, r4, r7
  404f0c:	f101 0e08 	add.w	lr, r1, #8
  404f10:	68a5      	ldr	r5, [r4, #8]
  404f12:	4575      	cmp	r5, lr
  404f14:	443b      	add	r3, r7
  404f16:	d06d      	beq.n	404ff4 <_free_r+0x120>
  404f18:	68e7      	ldr	r7, [r4, #12]
  404f1a:	60ef      	str	r7, [r5, #12]
  404f1c:	60bd      	str	r5, [r7, #8]
  404f1e:	1815      	adds	r5, r2, r0
  404f20:	686d      	ldr	r5, [r5, #4]
  404f22:	07ed      	lsls	r5, r5, #31
  404f24:	d53e      	bpl.n	404fa4 <_free_r+0xd0>
  404f26:	f043 0201 	orr.w	r2, r3, #1
  404f2a:	6062      	str	r2, [r4, #4]
  404f2c:	50e3      	str	r3, [r4, r3]
  404f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404f32:	d217      	bcs.n	404f64 <_free_r+0x90>
  404f34:	08db      	lsrs	r3, r3, #3
  404f36:	1c58      	adds	r0, r3, #1
  404f38:	109a      	asrs	r2, r3, #2
  404f3a:	684d      	ldr	r5, [r1, #4]
  404f3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404f40:	60a7      	str	r7, [r4, #8]
  404f42:	2301      	movs	r3, #1
  404f44:	4093      	lsls	r3, r2
  404f46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404f4a:	432b      	orrs	r3, r5
  404f4c:	3a08      	subs	r2, #8
  404f4e:	60e2      	str	r2, [r4, #12]
  404f50:	604b      	str	r3, [r1, #4]
  404f52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404f56:	60fc      	str	r4, [r7, #12]
  404f58:	4640      	mov	r0, r8
  404f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f5e:	f000 be59 	b.w	405c14 <__malloc_unlock>
  404f62:	4770      	bx	lr
  404f64:	0a5a      	lsrs	r2, r3, #9
  404f66:	2a04      	cmp	r2, #4
  404f68:	d852      	bhi.n	405010 <_free_r+0x13c>
  404f6a:	099a      	lsrs	r2, r3, #6
  404f6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404f70:	00ff      	lsls	r7, r7, #3
  404f72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404f76:	19c8      	adds	r0, r1, r7
  404f78:	59ca      	ldr	r2, [r1, r7]
  404f7a:	3808      	subs	r0, #8
  404f7c:	4290      	cmp	r0, r2
  404f7e:	d04f      	beq.n	405020 <_free_r+0x14c>
  404f80:	6851      	ldr	r1, [r2, #4]
  404f82:	f021 0103 	bic.w	r1, r1, #3
  404f86:	428b      	cmp	r3, r1
  404f88:	d232      	bcs.n	404ff0 <_free_r+0x11c>
  404f8a:	6892      	ldr	r2, [r2, #8]
  404f8c:	4290      	cmp	r0, r2
  404f8e:	d1f7      	bne.n	404f80 <_free_r+0xac>
  404f90:	68c3      	ldr	r3, [r0, #12]
  404f92:	60a0      	str	r0, [r4, #8]
  404f94:	60e3      	str	r3, [r4, #12]
  404f96:	609c      	str	r4, [r3, #8]
  404f98:	60c4      	str	r4, [r0, #12]
  404f9a:	4640      	mov	r0, r8
  404f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404fa0:	f000 be38 	b.w	405c14 <__malloc_unlock>
  404fa4:	6895      	ldr	r5, [r2, #8]
  404fa6:	4f3b      	ldr	r7, [pc, #236]	; (405094 <_free_r+0x1c0>)
  404fa8:	42bd      	cmp	r5, r7
  404faa:	4403      	add	r3, r0
  404fac:	d040      	beq.n	405030 <_free_r+0x15c>
  404fae:	68d0      	ldr	r0, [r2, #12]
  404fb0:	60e8      	str	r0, [r5, #12]
  404fb2:	f043 0201 	orr.w	r2, r3, #1
  404fb6:	6085      	str	r5, [r0, #8]
  404fb8:	6062      	str	r2, [r4, #4]
  404fba:	50e3      	str	r3, [r4, r3]
  404fbc:	e7b7      	b.n	404f2e <_free_r+0x5a>
  404fbe:	07ff      	lsls	r7, r7, #31
  404fc0:	4403      	add	r3, r0
  404fc2:	d407      	bmi.n	404fd4 <_free_r+0x100>
  404fc4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404fc8:	1aa4      	subs	r4, r4, r2
  404fca:	4413      	add	r3, r2
  404fcc:	68a0      	ldr	r0, [r4, #8]
  404fce:	68e2      	ldr	r2, [r4, #12]
  404fd0:	60c2      	str	r2, [r0, #12]
  404fd2:	6090      	str	r0, [r2, #8]
  404fd4:	4a30      	ldr	r2, [pc, #192]	; (405098 <_free_r+0x1c4>)
  404fd6:	6812      	ldr	r2, [r2, #0]
  404fd8:	f043 0001 	orr.w	r0, r3, #1
  404fdc:	4293      	cmp	r3, r2
  404fde:	6060      	str	r0, [r4, #4]
  404fe0:	608c      	str	r4, [r1, #8]
  404fe2:	d3b9      	bcc.n	404f58 <_free_r+0x84>
  404fe4:	4b2d      	ldr	r3, [pc, #180]	; (40509c <_free_r+0x1c8>)
  404fe6:	4640      	mov	r0, r8
  404fe8:	6819      	ldr	r1, [r3, #0]
  404fea:	f7ff ff23 	bl	404e34 <_malloc_trim_r>
  404fee:	e7b3      	b.n	404f58 <_free_r+0x84>
  404ff0:	4610      	mov	r0, r2
  404ff2:	e7cd      	b.n	404f90 <_free_r+0xbc>
  404ff4:	1811      	adds	r1, r2, r0
  404ff6:	6849      	ldr	r1, [r1, #4]
  404ff8:	07c9      	lsls	r1, r1, #31
  404ffa:	d444      	bmi.n	405086 <_free_r+0x1b2>
  404ffc:	6891      	ldr	r1, [r2, #8]
  404ffe:	68d2      	ldr	r2, [r2, #12]
  405000:	60ca      	str	r2, [r1, #12]
  405002:	4403      	add	r3, r0
  405004:	f043 0001 	orr.w	r0, r3, #1
  405008:	6091      	str	r1, [r2, #8]
  40500a:	6060      	str	r0, [r4, #4]
  40500c:	50e3      	str	r3, [r4, r3]
  40500e:	e7a3      	b.n	404f58 <_free_r+0x84>
  405010:	2a14      	cmp	r2, #20
  405012:	d816      	bhi.n	405042 <_free_r+0x16e>
  405014:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405018:	00ff      	lsls	r7, r7, #3
  40501a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40501e:	e7aa      	b.n	404f76 <_free_r+0xa2>
  405020:	10aa      	asrs	r2, r5, #2
  405022:	2301      	movs	r3, #1
  405024:	684d      	ldr	r5, [r1, #4]
  405026:	4093      	lsls	r3, r2
  405028:	432b      	orrs	r3, r5
  40502a:	604b      	str	r3, [r1, #4]
  40502c:	4603      	mov	r3, r0
  40502e:	e7b0      	b.n	404f92 <_free_r+0xbe>
  405030:	f043 0201 	orr.w	r2, r3, #1
  405034:	614c      	str	r4, [r1, #20]
  405036:	610c      	str	r4, [r1, #16]
  405038:	60e5      	str	r5, [r4, #12]
  40503a:	60a5      	str	r5, [r4, #8]
  40503c:	6062      	str	r2, [r4, #4]
  40503e:	50e3      	str	r3, [r4, r3]
  405040:	e78a      	b.n	404f58 <_free_r+0x84>
  405042:	2a54      	cmp	r2, #84	; 0x54
  405044:	d806      	bhi.n	405054 <_free_r+0x180>
  405046:	0b1a      	lsrs	r2, r3, #12
  405048:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40504c:	00ff      	lsls	r7, r7, #3
  40504e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405052:	e790      	b.n	404f76 <_free_r+0xa2>
  405054:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405058:	d806      	bhi.n	405068 <_free_r+0x194>
  40505a:	0bda      	lsrs	r2, r3, #15
  40505c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405060:	00ff      	lsls	r7, r7, #3
  405062:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405066:	e786      	b.n	404f76 <_free_r+0xa2>
  405068:	f240 5054 	movw	r0, #1364	; 0x554
  40506c:	4282      	cmp	r2, r0
  40506e:	d806      	bhi.n	40507e <_free_r+0x1aa>
  405070:	0c9a      	lsrs	r2, r3, #18
  405072:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405076:	00ff      	lsls	r7, r7, #3
  405078:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40507c:	e77b      	b.n	404f76 <_free_r+0xa2>
  40507e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405082:	257e      	movs	r5, #126	; 0x7e
  405084:	e777      	b.n	404f76 <_free_r+0xa2>
  405086:	f043 0101 	orr.w	r1, r3, #1
  40508a:	6061      	str	r1, [r4, #4]
  40508c:	6013      	str	r3, [r2, #0]
  40508e:	e763      	b.n	404f58 <_free_r+0x84>
  405090:	204005c0 	.word	0x204005c0
  405094:	204005c8 	.word	0x204005c8
  405098:	204009cc 	.word	0x204009cc
  40509c:	2040c5dc 	.word	0x2040c5dc

004050a0 <__sfvwrite_r>:
  4050a0:	6893      	ldr	r3, [r2, #8]
  4050a2:	2b00      	cmp	r3, #0
  4050a4:	d073      	beq.n	40518e <__sfvwrite_r+0xee>
  4050a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050aa:	898b      	ldrh	r3, [r1, #12]
  4050ac:	b083      	sub	sp, #12
  4050ae:	460c      	mov	r4, r1
  4050b0:	0719      	lsls	r1, r3, #28
  4050b2:	9000      	str	r0, [sp, #0]
  4050b4:	4616      	mov	r6, r2
  4050b6:	d526      	bpl.n	405106 <__sfvwrite_r+0x66>
  4050b8:	6922      	ldr	r2, [r4, #16]
  4050ba:	b322      	cbz	r2, 405106 <__sfvwrite_r+0x66>
  4050bc:	f013 0002 	ands.w	r0, r3, #2
  4050c0:	6835      	ldr	r5, [r6, #0]
  4050c2:	d02c      	beq.n	40511e <__sfvwrite_r+0x7e>
  4050c4:	f04f 0900 	mov.w	r9, #0
  4050c8:	4fb0      	ldr	r7, [pc, #704]	; (40538c <__sfvwrite_r+0x2ec>)
  4050ca:	46c8      	mov	r8, r9
  4050cc:	46b2      	mov	sl, r6
  4050ce:	45b8      	cmp	r8, r7
  4050d0:	4643      	mov	r3, r8
  4050d2:	464a      	mov	r2, r9
  4050d4:	bf28      	it	cs
  4050d6:	463b      	movcs	r3, r7
  4050d8:	9800      	ldr	r0, [sp, #0]
  4050da:	f1b8 0f00 	cmp.w	r8, #0
  4050de:	d050      	beq.n	405182 <__sfvwrite_r+0xe2>
  4050e0:	69e1      	ldr	r1, [r4, #28]
  4050e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4050e4:	47b0      	blx	r6
  4050e6:	2800      	cmp	r0, #0
  4050e8:	dd58      	ble.n	40519c <__sfvwrite_r+0xfc>
  4050ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4050ee:	1a1b      	subs	r3, r3, r0
  4050f0:	4481      	add	r9, r0
  4050f2:	eba8 0800 	sub.w	r8, r8, r0
  4050f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4050fa:	2b00      	cmp	r3, #0
  4050fc:	d1e7      	bne.n	4050ce <__sfvwrite_r+0x2e>
  4050fe:	2000      	movs	r0, #0
  405100:	b003      	add	sp, #12
  405102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405106:	4621      	mov	r1, r4
  405108:	9800      	ldr	r0, [sp, #0]
  40510a:	f7ff fc51 	bl	4049b0 <__swsetup_r>
  40510e:	2800      	cmp	r0, #0
  405110:	f040 8133 	bne.w	40537a <__sfvwrite_r+0x2da>
  405114:	89a3      	ldrh	r3, [r4, #12]
  405116:	6835      	ldr	r5, [r6, #0]
  405118:	f013 0002 	ands.w	r0, r3, #2
  40511c:	d1d2      	bne.n	4050c4 <__sfvwrite_r+0x24>
  40511e:	f013 0901 	ands.w	r9, r3, #1
  405122:	d145      	bne.n	4051b0 <__sfvwrite_r+0x110>
  405124:	464f      	mov	r7, r9
  405126:	9601      	str	r6, [sp, #4]
  405128:	b337      	cbz	r7, 405178 <__sfvwrite_r+0xd8>
  40512a:	059a      	lsls	r2, r3, #22
  40512c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405130:	f140 8083 	bpl.w	40523a <__sfvwrite_r+0x19a>
  405134:	4547      	cmp	r7, r8
  405136:	46c3      	mov	fp, r8
  405138:	f0c0 80ab 	bcc.w	405292 <__sfvwrite_r+0x1f2>
  40513c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405140:	f040 80ac 	bne.w	40529c <__sfvwrite_r+0x1fc>
  405144:	6820      	ldr	r0, [r4, #0]
  405146:	46ba      	mov	sl, r7
  405148:	465a      	mov	r2, fp
  40514a:	4649      	mov	r1, r9
  40514c:	f000 fcf8 	bl	405b40 <memmove>
  405150:	68a2      	ldr	r2, [r4, #8]
  405152:	6823      	ldr	r3, [r4, #0]
  405154:	eba2 0208 	sub.w	r2, r2, r8
  405158:	445b      	add	r3, fp
  40515a:	60a2      	str	r2, [r4, #8]
  40515c:	6023      	str	r3, [r4, #0]
  40515e:	9a01      	ldr	r2, [sp, #4]
  405160:	6893      	ldr	r3, [r2, #8]
  405162:	eba3 030a 	sub.w	r3, r3, sl
  405166:	44d1      	add	r9, sl
  405168:	eba7 070a 	sub.w	r7, r7, sl
  40516c:	6093      	str	r3, [r2, #8]
  40516e:	2b00      	cmp	r3, #0
  405170:	d0c5      	beq.n	4050fe <__sfvwrite_r+0x5e>
  405172:	89a3      	ldrh	r3, [r4, #12]
  405174:	2f00      	cmp	r7, #0
  405176:	d1d8      	bne.n	40512a <__sfvwrite_r+0x8a>
  405178:	f8d5 9000 	ldr.w	r9, [r5]
  40517c:	686f      	ldr	r7, [r5, #4]
  40517e:	3508      	adds	r5, #8
  405180:	e7d2      	b.n	405128 <__sfvwrite_r+0x88>
  405182:	f8d5 9000 	ldr.w	r9, [r5]
  405186:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40518a:	3508      	adds	r5, #8
  40518c:	e79f      	b.n	4050ce <__sfvwrite_r+0x2e>
  40518e:	2000      	movs	r0, #0
  405190:	4770      	bx	lr
  405192:	4621      	mov	r1, r4
  405194:	9800      	ldr	r0, [sp, #0]
  405196:	f7ff fd1f 	bl	404bd8 <_fflush_r>
  40519a:	b370      	cbz	r0, 4051fa <__sfvwrite_r+0x15a>
  40519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051a4:	f04f 30ff 	mov.w	r0, #4294967295
  4051a8:	81a3      	strh	r3, [r4, #12]
  4051aa:	b003      	add	sp, #12
  4051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051b0:	4681      	mov	r9, r0
  4051b2:	4633      	mov	r3, r6
  4051b4:	464e      	mov	r6, r9
  4051b6:	46a8      	mov	r8, r5
  4051b8:	469a      	mov	sl, r3
  4051ba:	464d      	mov	r5, r9
  4051bc:	b34e      	cbz	r6, 405212 <__sfvwrite_r+0x172>
  4051be:	b380      	cbz	r0, 405222 <__sfvwrite_r+0x182>
  4051c0:	6820      	ldr	r0, [r4, #0]
  4051c2:	6923      	ldr	r3, [r4, #16]
  4051c4:	6962      	ldr	r2, [r4, #20]
  4051c6:	45b1      	cmp	r9, r6
  4051c8:	46cb      	mov	fp, r9
  4051ca:	bf28      	it	cs
  4051cc:	46b3      	movcs	fp, r6
  4051ce:	4298      	cmp	r0, r3
  4051d0:	465f      	mov	r7, fp
  4051d2:	d904      	bls.n	4051de <__sfvwrite_r+0x13e>
  4051d4:	68a3      	ldr	r3, [r4, #8]
  4051d6:	4413      	add	r3, r2
  4051d8:	459b      	cmp	fp, r3
  4051da:	f300 80a6 	bgt.w	40532a <__sfvwrite_r+0x28a>
  4051de:	4593      	cmp	fp, r2
  4051e0:	db4b      	blt.n	40527a <__sfvwrite_r+0x1da>
  4051e2:	4613      	mov	r3, r2
  4051e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4051e6:	69e1      	ldr	r1, [r4, #28]
  4051e8:	9800      	ldr	r0, [sp, #0]
  4051ea:	462a      	mov	r2, r5
  4051ec:	47b8      	blx	r7
  4051ee:	1e07      	subs	r7, r0, #0
  4051f0:	ddd4      	ble.n	40519c <__sfvwrite_r+0xfc>
  4051f2:	ebb9 0907 	subs.w	r9, r9, r7
  4051f6:	d0cc      	beq.n	405192 <__sfvwrite_r+0xf2>
  4051f8:	2001      	movs	r0, #1
  4051fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4051fe:	1bdb      	subs	r3, r3, r7
  405200:	443d      	add	r5, r7
  405202:	1bf6      	subs	r6, r6, r7
  405204:	f8ca 3008 	str.w	r3, [sl, #8]
  405208:	2b00      	cmp	r3, #0
  40520a:	f43f af78 	beq.w	4050fe <__sfvwrite_r+0x5e>
  40520e:	2e00      	cmp	r6, #0
  405210:	d1d5      	bne.n	4051be <__sfvwrite_r+0x11e>
  405212:	f108 0308 	add.w	r3, r8, #8
  405216:	e913 0060 	ldmdb	r3, {r5, r6}
  40521a:	4698      	mov	r8, r3
  40521c:	3308      	adds	r3, #8
  40521e:	2e00      	cmp	r6, #0
  405220:	d0f9      	beq.n	405216 <__sfvwrite_r+0x176>
  405222:	4632      	mov	r2, r6
  405224:	210a      	movs	r1, #10
  405226:	4628      	mov	r0, r5
  405228:	f000 fc3a 	bl	405aa0 <memchr>
  40522c:	2800      	cmp	r0, #0
  40522e:	f000 80a1 	beq.w	405374 <__sfvwrite_r+0x2d4>
  405232:	3001      	adds	r0, #1
  405234:	eba0 0905 	sub.w	r9, r0, r5
  405238:	e7c2      	b.n	4051c0 <__sfvwrite_r+0x120>
  40523a:	6820      	ldr	r0, [r4, #0]
  40523c:	6923      	ldr	r3, [r4, #16]
  40523e:	4298      	cmp	r0, r3
  405240:	d802      	bhi.n	405248 <__sfvwrite_r+0x1a8>
  405242:	6963      	ldr	r3, [r4, #20]
  405244:	429f      	cmp	r7, r3
  405246:	d25d      	bcs.n	405304 <__sfvwrite_r+0x264>
  405248:	45b8      	cmp	r8, r7
  40524a:	bf28      	it	cs
  40524c:	46b8      	movcs	r8, r7
  40524e:	4642      	mov	r2, r8
  405250:	4649      	mov	r1, r9
  405252:	f000 fc75 	bl	405b40 <memmove>
  405256:	68a3      	ldr	r3, [r4, #8]
  405258:	6822      	ldr	r2, [r4, #0]
  40525a:	eba3 0308 	sub.w	r3, r3, r8
  40525e:	4442      	add	r2, r8
  405260:	60a3      	str	r3, [r4, #8]
  405262:	6022      	str	r2, [r4, #0]
  405264:	b10b      	cbz	r3, 40526a <__sfvwrite_r+0x1ca>
  405266:	46c2      	mov	sl, r8
  405268:	e779      	b.n	40515e <__sfvwrite_r+0xbe>
  40526a:	4621      	mov	r1, r4
  40526c:	9800      	ldr	r0, [sp, #0]
  40526e:	f7ff fcb3 	bl	404bd8 <_fflush_r>
  405272:	2800      	cmp	r0, #0
  405274:	d192      	bne.n	40519c <__sfvwrite_r+0xfc>
  405276:	46c2      	mov	sl, r8
  405278:	e771      	b.n	40515e <__sfvwrite_r+0xbe>
  40527a:	465a      	mov	r2, fp
  40527c:	4629      	mov	r1, r5
  40527e:	f000 fc5f 	bl	405b40 <memmove>
  405282:	68a2      	ldr	r2, [r4, #8]
  405284:	6823      	ldr	r3, [r4, #0]
  405286:	eba2 020b 	sub.w	r2, r2, fp
  40528a:	445b      	add	r3, fp
  40528c:	60a2      	str	r2, [r4, #8]
  40528e:	6023      	str	r3, [r4, #0]
  405290:	e7af      	b.n	4051f2 <__sfvwrite_r+0x152>
  405292:	6820      	ldr	r0, [r4, #0]
  405294:	46b8      	mov	r8, r7
  405296:	46ba      	mov	sl, r7
  405298:	46bb      	mov	fp, r7
  40529a:	e755      	b.n	405148 <__sfvwrite_r+0xa8>
  40529c:	6962      	ldr	r2, [r4, #20]
  40529e:	6820      	ldr	r0, [r4, #0]
  4052a0:	6921      	ldr	r1, [r4, #16]
  4052a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4052a6:	eba0 0a01 	sub.w	sl, r0, r1
  4052aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4052ae:	f10a 0001 	add.w	r0, sl, #1
  4052b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4052b6:	4438      	add	r0, r7
  4052b8:	4540      	cmp	r0, r8
  4052ba:	4642      	mov	r2, r8
  4052bc:	bf84      	itt	hi
  4052be:	4680      	movhi	r8, r0
  4052c0:	4642      	movhi	r2, r8
  4052c2:	055b      	lsls	r3, r3, #21
  4052c4:	d544      	bpl.n	405350 <__sfvwrite_r+0x2b0>
  4052c6:	4611      	mov	r1, r2
  4052c8:	9800      	ldr	r0, [sp, #0]
  4052ca:	f000 f921 	bl	405510 <_malloc_r>
  4052ce:	4683      	mov	fp, r0
  4052d0:	2800      	cmp	r0, #0
  4052d2:	d055      	beq.n	405380 <__sfvwrite_r+0x2e0>
  4052d4:	4652      	mov	r2, sl
  4052d6:	6921      	ldr	r1, [r4, #16]
  4052d8:	f7fe f8fc 	bl	4034d4 <memcpy>
  4052dc:	89a3      	ldrh	r3, [r4, #12]
  4052de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4052e6:	81a3      	strh	r3, [r4, #12]
  4052e8:	eb0b 000a 	add.w	r0, fp, sl
  4052ec:	eba8 030a 	sub.w	r3, r8, sl
  4052f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4052f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4052f8:	6020      	str	r0, [r4, #0]
  4052fa:	60a3      	str	r3, [r4, #8]
  4052fc:	46b8      	mov	r8, r7
  4052fe:	46ba      	mov	sl, r7
  405300:	46bb      	mov	fp, r7
  405302:	e721      	b.n	405148 <__sfvwrite_r+0xa8>
  405304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405308:	42b9      	cmp	r1, r7
  40530a:	bf28      	it	cs
  40530c:	4639      	movcs	r1, r7
  40530e:	464a      	mov	r2, r9
  405310:	fb91 f1f3 	sdiv	r1, r1, r3
  405314:	9800      	ldr	r0, [sp, #0]
  405316:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405318:	fb03 f301 	mul.w	r3, r3, r1
  40531c:	69e1      	ldr	r1, [r4, #28]
  40531e:	47b0      	blx	r6
  405320:	f1b0 0a00 	subs.w	sl, r0, #0
  405324:	f73f af1b 	bgt.w	40515e <__sfvwrite_r+0xbe>
  405328:	e738      	b.n	40519c <__sfvwrite_r+0xfc>
  40532a:	461a      	mov	r2, r3
  40532c:	4629      	mov	r1, r5
  40532e:	9301      	str	r3, [sp, #4]
  405330:	f000 fc06 	bl	405b40 <memmove>
  405334:	6822      	ldr	r2, [r4, #0]
  405336:	9b01      	ldr	r3, [sp, #4]
  405338:	9800      	ldr	r0, [sp, #0]
  40533a:	441a      	add	r2, r3
  40533c:	6022      	str	r2, [r4, #0]
  40533e:	4621      	mov	r1, r4
  405340:	f7ff fc4a 	bl	404bd8 <_fflush_r>
  405344:	9b01      	ldr	r3, [sp, #4]
  405346:	2800      	cmp	r0, #0
  405348:	f47f af28 	bne.w	40519c <__sfvwrite_r+0xfc>
  40534c:	461f      	mov	r7, r3
  40534e:	e750      	b.n	4051f2 <__sfvwrite_r+0x152>
  405350:	9800      	ldr	r0, [sp, #0]
  405352:	f000 fc65 	bl	405c20 <_realloc_r>
  405356:	4683      	mov	fp, r0
  405358:	2800      	cmp	r0, #0
  40535a:	d1c5      	bne.n	4052e8 <__sfvwrite_r+0x248>
  40535c:	9d00      	ldr	r5, [sp, #0]
  40535e:	6921      	ldr	r1, [r4, #16]
  405360:	4628      	mov	r0, r5
  405362:	f7ff fdb7 	bl	404ed4 <_free_r>
  405366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40536a:	220c      	movs	r2, #12
  40536c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405370:	602a      	str	r2, [r5, #0]
  405372:	e715      	b.n	4051a0 <__sfvwrite_r+0x100>
  405374:	f106 0901 	add.w	r9, r6, #1
  405378:	e722      	b.n	4051c0 <__sfvwrite_r+0x120>
  40537a:	f04f 30ff 	mov.w	r0, #4294967295
  40537e:	e6bf      	b.n	405100 <__sfvwrite_r+0x60>
  405380:	9a00      	ldr	r2, [sp, #0]
  405382:	230c      	movs	r3, #12
  405384:	6013      	str	r3, [r2, #0]
  405386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40538a:	e709      	b.n	4051a0 <__sfvwrite_r+0x100>
  40538c:	7ffffc00 	.word	0x7ffffc00

00405390 <_fwalk_reent>:
  405390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405394:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405398:	d01f      	beq.n	4053da <_fwalk_reent+0x4a>
  40539a:	4688      	mov	r8, r1
  40539c:	4606      	mov	r6, r0
  40539e:	f04f 0900 	mov.w	r9, #0
  4053a2:	687d      	ldr	r5, [r7, #4]
  4053a4:	68bc      	ldr	r4, [r7, #8]
  4053a6:	3d01      	subs	r5, #1
  4053a8:	d411      	bmi.n	4053ce <_fwalk_reent+0x3e>
  4053aa:	89a3      	ldrh	r3, [r4, #12]
  4053ac:	2b01      	cmp	r3, #1
  4053ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4053b2:	d908      	bls.n	4053c6 <_fwalk_reent+0x36>
  4053b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4053b8:	3301      	adds	r3, #1
  4053ba:	4621      	mov	r1, r4
  4053bc:	4630      	mov	r0, r6
  4053be:	d002      	beq.n	4053c6 <_fwalk_reent+0x36>
  4053c0:	47c0      	blx	r8
  4053c2:	ea49 0900 	orr.w	r9, r9, r0
  4053c6:	1c6b      	adds	r3, r5, #1
  4053c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4053cc:	d1ed      	bne.n	4053aa <_fwalk_reent+0x1a>
  4053ce:	683f      	ldr	r7, [r7, #0]
  4053d0:	2f00      	cmp	r7, #0
  4053d2:	d1e6      	bne.n	4053a2 <_fwalk_reent+0x12>
  4053d4:	4648      	mov	r0, r9
  4053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053da:	46b9      	mov	r9, r7
  4053dc:	4648      	mov	r0, r9
  4053de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053e2:	bf00      	nop

004053e4 <__locale_mb_cur_max>:
  4053e4:	4b04      	ldr	r3, [pc, #16]	; (4053f8 <__locale_mb_cur_max+0x14>)
  4053e6:	4a05      	ldr	r2, [pc, #20]	; (4053fc <__locale_mb_cur_max+0x18>)
  4053e8:	681b      	ldr	r3, [r3, #0]
  4053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	bf08      	it	eq
  4053f0:	4613      	moveq	r3, r2
  4053f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4053f6:	4770      	bx	lr
  4053f8:	20400024 	.word	0x20400024
  4053fc:	20400454 	.word	0x20400454

00405400 <__retarget_lock_init_recursive>:
  405400:	4770      	bx	lr
  405402:	bf00      	nop

00405404 <__retarget_lock_close_recursive>:
  405404:	4770      	bx	lr
  405406:	bf00      	nop

00405408 <__retarget_lock_acquire_recursive>:
  405408:	4770      	bx	lr
  40540a:	bf00      	nop

0040540c <__retarget_lock_release_recursive>:
  40540c:	4770      	bx	lr
  40540e:	bf00      	nop

00405410 <__swhatbuf_r>:
  405410:	b570      	push	{r4, r5, r6, lr}
  405412:	460c      	mov	r4, r1
  405414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405418:	2900      	cmp	r1, #0
  40541a:	b090      	sub	sp, #64	; 0x40
  40541c:	4615      	mov	r5, r2
  40541e:	461e      	mov	r6, r3
  405420:	db14      	blt.n	40544c <__swhatbuf_r+0x3c>
  405422:	aa01      	add	r2, sp, #4
  405424:	f000 ff74 	bl	406310 <_fstat_r>
  405428:	2800      	cmp	r0, #0
  40542a:	db0f      	blt.n	40544c <__swhatbuf_r+0x3c>
  40542c:	9a02      	ldr	r2, [sp, #8]
  40542e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405432:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405436:	fab2 f282 	clz	r2, r2
  40543a:	0952      	lsrs	r2, r2, #5
  40543c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405440:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405444:	6032      	str	r2, [r6, #0]
  405446:	602b      	str	r3, [r5, #0]
  405448:	b010      	add	sp, #64	; 0x40
  40544a:	bd70      	pop	{r4, r5, r6, pc}
  40544c:	89a2      	ldrh	r2, [r4, #12]
  40544e:	2300      	movs	r3, #0
  405450:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405454:	6033      	str	r3, [r6, #0]
  405456:	d004      	beq.n	405462 <__swhatbuf_r+0x52>
  405458:	2240      	movs	r2, #64	; 0x40
  40545a:	4618      	mov	r0, r3
  40545c:	602a      	str	r2, [r5, #0]
  40545e:	b010      	add	sp, #64	; 0x40
  405460:	bd70      	pop	{r4, r5, r6, pc}
  405462:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405466:	602b      	str	r3, [r5, #0]
  405468:	b010      	add	sp, #64	; 0x40
  40546a:	bd70      	pop	{r4, r5, r6, pc}

0040546c <__smakebuf_r>:
  40546c:	898a      	ldrh	r2, [r1, #12]
  40546e:	0792      	lsls	r2, r2, #30
  405470:	460b      	mov	r3, r1
  405472:	d506      	bpl.n	405482 <__smakebuf_r+0x16>
  405474:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405478:	2101      	movs	r1, #1
  40547a:	601a      	str	r2, [r3, #0]
  40547c:	611a      	str	r2, [r3, #16]
  40547e:	6159      	str	r1, [r3, #20]
  405480:	4770      	bx	lr
  405482:	b5f0      	push	{r4, r5, r6, r7, lr}
  405484:	b083      	sub	sp, #12
  405486:	ab01      	add	r3, sp, #4
  405488:	466a      	mov	r2, sp
  40548a:	460c      	mov	r4, r1
  40548c:	4606      	mov	r6, r0
  40548e:	f7ff ffbf 	bl	405410 <__swhatbuf_r>
  405492:	9900      	ldr	r1, [sp, #0]
  405494:	4605      	mov	r5, r0
  405496:	4630      	mov	r0, r6
  405498:	f000 f83a 	bl	405510 <_malloc_r>
  40549c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054a0:	b1d8      	cbz	r0, 4054da <__smakebuf_r+0x6e>
  4054a2:	9a01      	ldr	r2, [sp, #4]
  4054a4:	4f15      	ldr	r7, [pc, #84]	; (4054fc <__smakebuf_r+0x90>)
  4054a6:	9900      	ldr	r1, [sp, #0]
  4054a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4054ae:	81a3      	strh	r3, [r4, #12]
  4054b0:	6020      	str	r0, [r4, #0]
  4054b2:	6120      	str	r0, [r4, #16]
  4054b4:	6161      	str	r1, [r4, #20]
  4054b6:	b91a      	cbnz	r2, 4054c0 <__smakebuf_r+0x54>
  4054b8:	432b      	orrs	r3, r5
  4054ba:	81a3      	strh	r3, [r4, #12]
  4054bc:	b003      	add	sp, #12
  4054be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4054c0:	4630      	mov	r0, r6
  4054c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4054c6:	f000 ff37 	bl	406338 <_isatty_r>
  4054ca:	b1a0      	cbz	r0, 4054f6 <__smakebuf_r+0x8a>
  4054cc:	89a3      	ldrh	r3, [r4, #12]
  4054ce:	f023 0303 	bic.w	r3, r3, #3
  4054d2:	f043 0301 	orr.w	r3, r3, #1
  4054d6:	b21b      	sxth	r3, r3
  4054d8:	e7ee      	b.n	4054b8 <__smakebuf_r+0x4c>
  4054da:	059a      	lsls	r2, r3, #22
  4054dc:	d4ee      	bmi.n	4054bc <__smakebuf_r+0x50>
  4054de:	f023 0303 	bic.w	r3, r3, #3
  4054e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4054e6:	f043 0302 	orr.w	r3, r3, #2
  4054ea:	2101      	movs	r1, #1
  4054ec:	81a3      	strh	r3, [r4, #12]
  4054ee:	6022      	str	r2, [r4, #0]
  4054f0:	6122      	str	r2, [r4, #16]
  4054f2:	6161      	str	r1, [r4, #20]
  4054f4:	e7e2      	b.n	4054bc <__smakebuf_r+0x50>
  4054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054fa:	e7dd      	b.n	4054b8 <__smakebuf_r+0x4c>
  4054fc:	00404c2d 	.word	0x00404c2d

00405500 <malloc>:
  405500:	4b02      	ldr	r3, [pc, #8]	; (40550c <malloc+0xc>)
  405502:	4601      	mov	r1, r0
  405504:	6818      	ldr	r0, [r3, #0]
  405506:	f000 b803 	b.w	405510 <_malloc_r>
  40550a:	bf00      	nop
  40550c:	20400024 	.word	0x20400024

00405510 <_malloc_r>:
  405510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405514:	f101 060b 	add.w	r6, r1, #11
  405518:	2e16      	cmp	r6, #22
  40551a:	b083      	sub	sp, #12
  40551c:	4605      	mov	r5, r0
  40551e:	f240 809e 	bls.w	40565e <_malloc_r+0x14e>
  405522:	f036 0607 	bics.w	r6, r6, #7
  405526:	f100 80bd 	bmi.w	4056a4 <_malloc_r+0x194>
  40552a:	42b1      	cmp	r1, r6
  40552c:	f200 80ba 	bhi.w	4056a4 <_malloc_r+0x194>
  405530:	f000 fb6a 	bl	405c08 <__malloc_lock>
  405534:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405538:	f0c0 8293 	bcc.w	405a62 <_malloc_r+0x552>
  40553c:	0a73      	lsrs	r3, r6, #9
  40553e:	f000 80b8 	beq.w	4056b2 <_malloc_r+0x1a2>
  405542:	2b04      	cmp	r3, #4
  405544:	f200 8179 	bhi.w	40583a <_malloc_r+0x32a>
  405548:	09b3      	lsrs	r3, r6, #6
  40554a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40554e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405552:	00c3      	lsls	r3, r0, #3
  405554:	4fbf      	ldr	r7, [pc, #764]	; (405854 <_malloc_r+0x344>)
  405556:	443b      	add	r3, r7
  405558:	f1a3 0108 	sub.w	r1, r3, #8
  40555c:	685c      	ldr	r4, [r3, #4]
  40555e:	42a1      	cmp	r1, r4
  405560:	d106      	bne.n	405570 <_malloc_r+0x60>
  405562:	e00c      	b.n	40557e <_malloc_r+0x6e>
  405564:	2a00      	cmp	r2, #0
  405566:	f280 80aa 	bge.w	4056be <_malloc_r+0x1ae>
  40556a:	68e4      	ldr	r4, [r4, #12]
  40556c:	42a1      	cmp	r1, r4
  40556e:	d006      	beq.n	40557e <_malloc_r+0x6e>
  405570:	6863      	ldr	r3, [r4, #4]
  405572:	f023 0303 	bic.w	r3, r3, #3
  405576:	1b9a      	subs	r2, r3, r6
  405578:	2a0f      	cmp	r2, #15
  40557a:	ddf3      	ble.n	405564 <_malloc_r+0x54>
  40557c:	4670      	mov	r0, lr
  40557e:	693c      	ldr	r4, [r7, #16]
  405580:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405868 <_malloc_r+0x358>
  405584:	4574      	cmp	r4, lr
  405586:	f000 81ab 	beq.w	4058e0 <_malloc_r+0x3d0>
  40558a:	6863      	ldr	r3, [r4, #4]
  40558c:	f023 0303 	bic.w	r3, r3, #3
  405590:	1b9a      	subs	r2, r3, r6
  405592:	2a0f      	cmp	r2, #15
  405594:	f300 8190 	bgt.w	4058b8 <_malloc_r+0x3a8>
  405598:	2a00      	cmp	r2, #0
  40559a:	f8c7 e014 	str.w	lr, [r7, #20]
  40559e:	f8c7 e010 	str.w	lr, [r7, #16]
  4055a2:	f280 809d 	bge.w	4056e0 <_malloc_r+0x1d0>
  4055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4055aa:	f080 8161 	bcs.w	405870 <_malloc_r+0x360>
  4055ae:	08db      	lsrs	r3, r3, #3
  4055b0:	f103 0c01 	add.w	ip, r3, #1
  4055b4:	1099      	asrs	r1, r3, #2
  4055b6:	687a      	ldr	r2, [r7, #4]
  4055b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4055bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4055c0:	2301      	movs	r3, #1
  4055c2:	408b      	lsls	r3, r1
  4055c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4055c8:	4313      	orrs	r3, r2
  4055ca:	3908      	subs	r1, #8
  4055cc:	60e1      	str	r1, [r4, #12]
  4055ce:	607b      	str	r3, [r7, #4]
  4055d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4055d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4055d8:	1082      	asrs	r2, r0, #2
  4055da:	2401      	movs	r4, #1
  4055dc:	4094      	lsls	r4, r2
  4055de:	429c      	cmp	r4, r3
  4055e0:	f200 808b 	bhi.w	4056fa <_malloc_r+0x1ea>
  4055e4:	421c      	tst	r4, r3
  4055e6:	d106      	bne.n	4055f6 <_malloc_r+0xe6>
  4055e8:	f020 0003 	bic.w	r0, r0, #3
  4055ec:	0064      	lsls	r4, r4, #1
  4055ee:	421c      	tst	r4, r3
  4055f0:	f100 0004 	add.w	r0, r0, #4
  4055f4:	d0fa      	beq.n	4055ec <_malloc_r+0xdc>
  4055f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4055fa:	46cc      	mov	ip, r9
  4055fc:	4680      	mov	r8, r0
  4055fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405602:	459c      	cmp	ip, r3
  405604:	d107      	bne.n	405616 <_malloc_r+0x106>
  405606:	e16d      	b.n	4058e4 <_malloc_r+0x3d4>
  405608:	2a00      	cmp	r2, #0
  40560a:	f280 817b 	bge.w	405904 <_malloc_r+0x3f4>
  40560e:	68db      	ldr	r3, [r3, #12]
  405610:	459c      	cmp	ip, r3
  405612:	f000 8167 	beq.w	4058e4 <_malloc_r+0x3d4>
  405616:	6859      	ldr	r1, [r3, #4]
  405618:	f021 0103 	bic.w	r1, r1, #3
  40561c:	1b8a      	subs	r2, r1, r6
  40561e:	2a0f      	cmp	r2, #15
  405620:	ddf2      	ble.n	405608 <_malloc_r+0xf8>
  405622:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405626:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40562a:	9300      	str	r3, [sp, #0]
  40562c:	199c      	adds	r4, r3, r6
  40562e:	4628      	mov	r0, r5
  405630:	f046 0601 	orr.w	r6, r6, #1
  405634:	f042 0501 	orr.w	r5, r2, #1
  405638:	605e      	str	r6, [r3, #4]
  40563a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40563e:	f8cc 8008 	str.w	r8, [ip, #8]
  405642:	617c      	str	r4, [r7, #20]
  405644:	613c      	str	r4, [r7, #16]
  405646:	f8c4 e00c 	str.w	lr, [r4, #12]
  40564a:	f8c4 e008 	str.w	lr, [r4, #8]
  40564e:	6065      	str	r5, [r4, #4]
  405650:	505a      	str	r2, [r3, r1]
  405652:	f000 fadf 	bl	405c14 <__malloc_unlock>
  405656:	9b00      	ldr	r3, [sp, #0]
  405658:	f103 0408 	add.w	r4, r3, #8
  40565c:	e01e      	b.n	40569c <_malloc_r+0x18c>
  40565e:	2910      	cmp	r1, #16
  405660:	d820      	bhi.n	4056a4 <_malloc_r+0x194>
  405662:	f000 fad1 	bl	405c08 <__malloc_lock>
  405666:	2610      	movs	r6, #16
  405668:	2318      	movs	r3, #24
  40566a:	2002      	movs	r0, #2
  40566c:	4f79      	ldr	r7, [pc, #484]	; (405854 <_malloc_r+0x344>)
  40566e:	443b      	add	r3, r7
  405670:	f1a3 0208 	sub.w	r2, r3, #8
  405674:	685c      	ldr	r4, [r3, #4]
  405676:	4294      	cmp	r4, r2
  405678:	f000 813d 	beq.w	4058f6 <_malloc_r+0x3e6>
  40567c:	6863      	ldr	r3, [r4, #4]
  40567e:	68e1      	ldr	r1, [r4, #12]
  405680:	68a6      	ldr	r6, [r4, #8]
  405682:	f023 0303 	bic.w	r3, r3, #3
  405686:	4423      	add	r3, r4
  405688:	4628      	mov	r0, r5
  40568a:	685a      	ldr	r2, [r3, #4]
  40568c:	60f1      	str	r1, [r6, #12]
  40568e:	f042 0201 	orr.w	r2, r2, #1
  405692:	608e      	str	r6, [r1, #8]
  405694:	605a      	str	r2, [r3, #4]
  405696:	f000 fabd 	bl	405c14 <__malloc_unlock>
  40569a:	3408      	adds	r4, #8
  40569c:	4620      	mov	r0, r4
  40569e:	b003      	add	sp, #12
  4056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056a4:	2400      	movs	r4, #0
  4056a6:	230c      	movs	r3, #12
  4056a8:	4620      	mov	r0, r4
  4056aa:	602b      	str	r3, [r5, #0]
  4056ac:	b003      	add	sp, #12
  4056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056b2:	2040      	movs	r0, #64	; 0x40
  4056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4056b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4056bc:	e74a      	b.n	405554 <_malloc_r+0x44>
  4056be:	4423      	add	r3, r4
  4056c0:	68e1      	ldr	r1, [r4, #12]
  4056c2:	685a      	ldr	r2, [r3, #4]
  4056c4:	68a6      	ldr	r6, [r4, #8]
  4056c6:	f042 0201 	orr.w	r2, r2, #1
  4056ca:	60f1      	str	r1, [r6, #12]
  4056cc:	4628      	mov	r0, r5
  4056ce:	608e      	str	r6, [r1, #8]
  4056d0:	605a      	str	r2, [r3, #4]
  4056d2:	f000 fa9f 	bl	405c14 <__malloc_unlock>
  4056d6:	3408      	adds	r4, #8
  4056d8:	4620      	mov	r0, r4
  4056da:	b003      	add	sp, #12
  4056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056e0:	4423      	add	r3, r4
  4056e2:	4628      	mov	r0, r5
  4056e4:	685a      	ldr	r2, [r3, #4]
  4056e6:	f042 0201 	orr.w	r2, r2, #1
  4056ea:	605a      	str	r2, [r3, #4]
  4056ec:	f000 fa92 	bl	405c14 <__malloc_unlock>
  4056f0:	3408      	adds	r4, #8
  4056f2:	4620      	mov	r0, r4
  4056f4:	b003      	add	sp, #12
  4056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056fa:	68bc      	ldr	r4, [r7, #8]
  4056fc:	6863      	ldr	r3, [r4, #4]
  4056fe:	f023 0803 	bic.w	r8, r3, #3
  405702:	45b0      	cmp	r8, r6
  405704:	d304      	bcc.n	405710 <_malloc_r+0x200>
  405706:	eba8 0306 	sub.w	r3, r8, r6
  40570a:	2b0f      	cmp	r3, #15
  40570c:	f300 8085 	bgt.w	40581a <_malloc_r+0x30a>
  405710:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40586c <_malloc_r+0x35c>
  405714:	4b50      	ldr	r3, [pc, #320]	; (405858 <_malloc_r+0x348>)
  405716:	f8d9 2000 	ldr.w	r2, [r9]
  40571a:	681b      	ldr	r3, [r3, #0]
  40571c:	3201      	adds	r2, #1
  40571e:	4433      	add	r3, r6
  405720:	eb04 0a08 	add.w	sl, r4, r8
  405724:	f000 8155 	beq.w	4059d2 <_malloc_r+0x4c2>
  405728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40572c:	330f      	adds	r3, #15
  40572e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405732:	f02b 0b0f 	bic.w	fp, fp, #15
  405736:	4659      	mov	r1, fp
  405738:	4628      	mov	r0, r5
  40573a:	f000 fc17 	bl	405f6c <_sbrk_r>
  40573e:	1c41      	adds	r1, r0, #1
  405740:	4602      	mov	r2, r0
  405742:	f000 80fc 	beq.w	40593e <_malloc_r+0x42e>
  405746:	4582      	cmp	sl, r0
  405748:	f200 80f7 	bhi.w	40593a <_malloc_r+0x42a>
  40574c:	4b43      	ldr	r3, [pc, #268]	; (40585c <_malloc_r+0x34c>)
  40574e:	6819      	ldr	r1, [r3, #0]
  405750:	4459      	add	r1, fp
  405752:	6019      	str	r1, [r3, #0]
  405754:	f000 814d 	beq.w	4059f2 <_malloc_r+0x4e2>
  405758:	f8d9 0000 	ldr.w	r0, [r9]
  40575c:	3001      	adds	r0, #1
  40575e:	bf1b      	ittet	ne
  405760:	eba2 0a0a 	subne.w	sl, r2, sl
  405764:	4451      	addne	r1, sl
  405766:	f8c9 2000 	streq.w	r2, [r9]
  40576a:	6019      	strne	r1, [r3, #0]
  40576c:	f012 0107 	ands.w	r1, r2, #7
  405770:	f000 8115 	beq.w	40599e <_malloc_r+0x48e>
  405774:	f1c1 0008 	rsb	r0, r1, #8
  405778:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40577c:	4402      	add	r2, r0
  40577e:	3108      	adds	r1, #8
  405780:	eb02 090b 	add.w	r9, r2, fp
  405784:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405788:	eba1 0909 	sub.w	r9, r1, r9
  40578c:	4649      	mov	r1, r9
  40578e:	4628      	mov	r0, r5
  405790:	9301      	str	r3, [sp, #4]
  405792:	9200      	str	r2, [sp, #0]
  405794:	f000 fbea 	bl	405f6c <_sbrk_r>
  405798:	1c43      	adds	r3, r0, #1
  40579a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40579e:	f000 8143 	beq.w	405a28 <_malloc_r+0x518>
  4057a2:	1a80      	subs	r0, r0, r2
  4057a4:	4448      	add	r0, r9
  4057a6:	f040 0001 	orr.w	r0, r0, #1
  4057aa:	6819      	ldr	r1, [r3, #0]
  4057ac:	60ba      	str	r2, [r7, #8]
  4057ae:	4449      	add	r1, r9
  4057b0:	42bc      	cmp	r4, r7
  4057b2:	6050      	str	r0, [r2, #4]
  4057b4:	6019      	str	r1, [r3, #0]
  4057b6:	d017      	beq.n	4057e8 <_malloc_r+0x2d8>
  4057b8:	f1b8 0f0f 	cmp.w	r8, #15
  4057bc:	f240 80fb 	bls.w	4059b6 <_malloc_r+0x4a6>
  4057c0:	6860      	ldr	r0, [r4, #4]
  4057c2:	f1a8 020c 	sub.w	r2, r8, #12
  4057c6:	f022 0207 	bic.w	r2, r2, #7
  4057ca:	eb04 0e02 	add.w	lr, r4, r2
  4057ce:	f000 0001 	and.w	r0, r0, #1
  4057d2:	f04f 0c05 	mov.w	ip, #5
  4057d6:	4310      	orrs	r0, r2
  4057d8:	2a0f      	cmp	r2, #15
  4057da:	6060      	str	r0, [r4, #4]
  4057dc:	f8ce c004 	str.w	ip, [lr, #4]
  4057e0:	f8ce c008 	str.w	ip, [lr, #8]
  4057e4:	f200 8117 	bhi.w	405a16 <_malloc_r+0x506>
  4057e8:	4b1d      	ldr	r3, [pc, #116]	; (405860 <_malloc_r+0x350>)
  4057ea:	68bc      	ldr	r4, [r7, #8]
  4057ec:	681a      	ldr	r2, [r3, #0]
  4057ee:	4291      	cmp	r1, r2
  4057f0:	bf88      	it	hi
  4057f2:	6019      	strhi	r1, [r3, #0]
  4057f4:	4b1b      	ldr	r3, [pc, #108]	; (405864 <_malloc_r+0x354>)
  4057f6:	681a      	ldr	r2, [r3, #0]
  4057f8:	4291      	cmp	r1, r2
  4057fa:	6862      	ldr	r2, [r4, #4]
  4057fc:	bf88      	it	hi
  4057fe:	6019      	strhi	r1, [r3, #0]
  405800:	f022 0203 	bic.w	r2, r2, #3
  405804:	4296      	cmp	r6, r2
  405806:	eba2 0306 	sub.w	r3, r2, r6
  40580a:	d801      	bhi.n	405810 <_malloc_r+0x300>
  40580c:	2b0f      	cmp	r3, #15
  40580e:	dc04      	bgt.n	40581a <_malloc_r+0x30a>
  405810:	4628      	mov	r0, r5
  405812:	f000 f9ff 	bl	405c14 <__malloc_unlock>
  405816:	2400      	movs	r4, #0
  405818:	e740      	b.n	40569c <_malloc_r+0x18c>
  40581a:	19a2      	adds	r2, r4, r6
  40581c:	f043 0301 	orr.w	r3, r3, #1
  405820:	f046 0601 	orr.w	r6, r6, #1
  405824:	6066      	str	r6, [r4, #4]
  405826:	4628      	mov	r0, r5
  405828:	60ba      	str	r2, [r7, #8]
  40582a:	6053      	str	r3, [r2, #4]
  40582c:	f000 f9f2 	bl	405c14 <__malloc_unlock>
  405830:	3408      	adds	r4, #8
  405832:	4620      	mov	r0, r4
  405834:	b003      	add	sp, #12
  405836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40583a:	2b14      	cmp	r3, #20
  40583c:	d971      	bls.n	405922 <_malloc_r+0x412>
  40583e:	2b54      	cmp	r3, #84	; 0x54
  405840:	f200 80a3 	bhi.w	40598a <_malloc_r+0x47a>
  405844:	0b33      	lsrs	r3, r6, #12
  405846:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40584a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40584e:	00c3      	lsls	r3, r0, #3
  405850:	e680      	b.n	405554 <_malloc_r+0x44>
  405852:	bf00      	nop
  405854:	204005c0 	.word	0x204005c0
  405858:	2040c5dc 	.word	0x2040c5dc
  40585c:	2040c5ac 	.word	0x2040c5ac
  405860:	2040c5d4 	.word	0x2040c5d4
  405864:	2040c5d8 	.word	0x2040c5d8
  405868:	204005c8 	.word	0x204005c8
  40586c:	204009c8 	.word	0x204009c8
  405870:	0a5a      	lsrs	r2, r3, #9
  405872:	2a04      	cmp	r2, #4
  405874:	d95b      	bls.n	40592e <_malloc_r+0x41e>
  405876:	2a14      	cmp	r2, #20
  405878:	f200 80ae 	bhi.w	4059d8 <_malloc_r+0x4c8>
  40587c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405880:	00c9      	lsls	r1, r1, #3
  405882:	325b      	adds	r2, #91	; 0x5b
  405884:	eb07 0c01 	add.w	ip, r7, r1
  405888:	5879      	ldr	r1, [r7, r1]
  40588a:	f1ac 0c08 	sub.w	ip, ip, #8
  40588e:	458c      	cmp	ip, r1
  405890:	f000 8088 	beq.w	4059a4 <_malloc_r+0x494>
  405894:	684a      	ldr	r2, [r1, #4]
  405896:	f022 0203 	bic.w	r2, r2, #3
  40589a:	4293      	cmp	r3, r2
  40589c:	d273      	bcs.n	405986 <_malloc_r+0x476>
  40589e:	6889      	ldr	r1, [r1, #8]
  4058a0:	458c      	cmp	ip, r1
  4058a2:	d1f7      	bne.n	405894 <_malloc_r+0x384>
  4058a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4058a8:	687b      	ldr	r3, [r7, #4]
  4058aa:	60e2      	str	r2, [r4, #12]
  4058ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4058b0:	6094      	str	r4, [r2, #8]
  4058b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4058b6:	e68f      	b.n	4055d8 <_malloc_r+0xc8>
  4058b8:	19a1      	adds	r1, r4, r6
  4058ba:	f046 0c01 	orr.w	ip, r6, #1
  4058be:	f042 0601 	orr.w	r6, r2, #1
  4058c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4058c6:	4628      	mov	r0, r5
  4058c8:	6179      	str	r1, [r7, #20]
  4058ca:	6139      	str	r1, [r7, #16]
  4058cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4058d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4058d4:	604e      	str	r6, [r1, #4]
  4058d6:	50e2      	str	r2, [r4, r3]
  4058d8:	f000 f99c 	bl	405c14 <__malloc_unlock>
  4058dc:	3408      	adds	r4, #8
  4058de:	e6dd      	b.n	40569c <_malloc_r+0x18c>
  4058e0:	687b      	ldr	r3, [r7, #4]
  4058e2:	e679      	b.n	4055d8 <_malloc_r+0xc8>
  4058e4:	f108 0801 	add.w	r8, r8, #1
  4058e8:	f018 0f03 	tst.w	r8, #3
  4058ec:	f10c 0c08 	add.w	ip, ip, #8
  4058f0:	f47f ae85 	bne.w	4055fe <_malloc_r+0xee>
  4058f4:	e02d      	b.n	405952 <_malloc_r+0x442>
  4058f6:	68dc      	ldr	r4, [r3, #12]
  4058f8:	42a3      	cmp	r3, r4
  4058fa:	bf08      	it	eq
  4058fc:	3002      	addeq	r0, #2
  4058fe:	f43f ae3e 	beq.w	40557e <_malloc_r+0x6e>
  405902:	e6bb      	b.n	40567c <_malloc_r+0x16c>
  405904:	4419      	add	r1, r3
  405906:	461c      	mov	r4, r3
  405908:	684a      	ldr	r2, [r1, #4]
  40590a:	68db      	ldr	r3, [r3, #12]
  40590c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405910:	f042 0201 	orr.w	r2, r2, #1
  405914:	604a      	str	r2, [r1, #4]
  405916:	4628      	mov	r0, r5
  405918:	60f3      	str	r3, [r6, #12]
  40591a:	609e      	str	r6, [r3, #8]
  40591c:	f000 f97a 	bl	405c14 <__malloc_unlock>
  405920:	e6bc      	b.n	40569c <_malloc_r+0x18c>
  405922:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405926:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40592a:	00c3      	lsls	r3, r0, #3
  40592c:	e612      	b.n	405554 <_malloc_r+0x44>
  40592e:	099a      	lsrs	r2, r3, #6
  405930:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405934:	00c9      	lsls	r1, r1, #3
  405936:	3238      	adds	r2, #56	; 0x38
  405938:	e7a4      	b.n	405884 <_malloc_r+0x374>
  40593a:	42bc      	cmp	r4, r7
  40593c:	d054      	beq.n	4059e8 <_malloc_r+0x4d8>
  40593e:	68bc      	ldr	r4, [r7, #8]
  405940:	6862      	ldr	r2, [r4, #4]
  405942:	f022 0203 	bic.w	r2, r2, #3
  405946:	e75d      	b.n	405804 <_malloc_r+0x2f4>
  405948:	f859 3908 	ldr.w	r3, [r9], #-8
  40594c:	4599      	cmp	r9, r3
  40594e:	f040 8086 	bne.w	405a5e <_malloc_r+0x54e>
  405952:	f010 0f03 	tst.w	r0, #3
  405956:	f100 30ff 	add.w	r0, r0, #4294967295
  40595a:	d1f5      	bne.n	405948 <_malloc_r+0x438>
  40595c:	687b      	ldr	r3, [r7, #4]
  40595e:	ea23 0304 	bic.w	r3, r3, r4
  405962:	607b      	str	r3, [r7, #4]
  405964:	0064      	lsls	r4, r4, #1
  405966:	429c      	cmp	r4, r3
  405968:	f63f aec7 	bhi.w	4056fa <_malloc_r+0x1ea>
  40596c:	2c00      	cmp	r4, #0
  40596e:	f43f aec4 	beq.w	4056fa <_malloc_r+0x1ea>
  405972:	421c      	tst	r4, r3
  405974:	4640      	mov	r0, r8
  405976:	f47f ae3e 	bne.w	4055f6 <_malloc_r+0xe6>
  40597a:	0064      	lsls	r4, r4, #1
  40597c:	421c      	tst	r4, r3
  40597e:	f100 0004 	add.w	r0, r0, #4
  405982:	d0fa      	beq.n	40597a <_malloc_r+0x46a>
  405984:	e637      	b.n	4055f6 <_malloc_r+0xe6>
  405986:	468c      	mov	ip, r1
  405988:	e78c      	b.n	4058a4 <_malloc_r+0x394>
  40598a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40598e:	d815      	bhi.n	4059bc <_malloc_r+0x4ac>
  405990:	0bf3      	lsrs	r3, r6, #15
  405992:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405996:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40599a:	00c3      	lsls	r3, r0, #3
  40599c:	e5da      	b.n	405554 <_malloc_r+0x44>
  40599e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4059a2:	e6ed      	b.n	405780 <_malloc_r+0x270>
  4059a4:	687b      	ldr	r3, [r7, #4]
  4059a6:	1092      	asrs	r2, r2, #2
  4059a8:	2101      	movs	r1, #1
  4059aa:	fa01 f202 	lsl.w	r2, r1, r2
  4059ae:	4313      	orrs	r3, r2
  4059b0:	607b      	str	r3, [r7, #4]
  4059b2:	4662      	mov	r2, ip
  4059b4:	e779      	b.n	4058aa <_malloc_r+0x39a>
  4059b6:	2301      	movs	r3, #1
  4059b8:	6053      	str	r3, [r2, #4]
  4059ba:	e729      	b.n	405810 <_malloc_r+0x300>
  4059bc:	f240 5254 	movw	r2, #1364	; 0x554
  4059c0:	4293      	cmp	r3, r2
  4059c2:	d822      	bhi.n	405a0a <_malloc_r+0x4fa>
  4059c4:	0cb3      	lsrs	r3, r6, #18
  4059c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4059ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4059ce:	00c3      	lsls	r3, r0, #3
  4059d0:	e5c0      	b.n	405554 <_malloc_r+0x44>
  4059d2:	f103 0b10 	add.w	fp, r3, #16
  4059d6:	e6ae      	b.n	405736 <_malloc_r+0x226>
  4059d8:	2a54      	cmp	r2, #84	; 0x54
  4059da:	d829      	bhi.n	405a30 <_malloc_r+0x520>
  4059dc:	0b1a      	lsrs	r2, r3, #12
  4059de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4059e2:	00c9      	lsls	r1, r1, #3
  4059e4:	326e      	adds	r2, #110	; 0x6e
  4059e6:	e74d      	b.n	405884 <_malloc_r+0x374>
  4059e8:	4b20      	ldr	r3, [pc, #128]	; (405a6c <_malloc_r+0x55c>)
  4059ea:	6819      	ldr	r1, [r3, #0]
  4059ec:	4459      	add	r1, fp
  4059ee:	6019      	str	r1, [r3, #0]
  4059f0:	e6b2      	b.n	405758 <_malloc_r+0x248>
  4059f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4059f6:	2800      	cmp	r0, #0
  4059f8:	f47f aeae 	bne.w	405758 <_malloc_r+0x248>
  4059fc:	eb08 030b 	add.w	r3, r8, fp
  405a00:	68ba      	ldr	r2, [r7, #8]
  405a02:	f043 0301 	orr.w	r3, r3, #1
  405a06:	6053      	str	r3, [r2, #4]
  405a08:	e6ee      	b.n	4057e8 <_malloc_r+0x2d8>
  405a0a:	207f      	movs	r0, #127	; 0x7f
  405a0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405a10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405a14:	e59e      	b.n	405554 <_malloc_r+0x44>
  405a16:	f104 0108 	add.w	r1, r4, #8
  405a1a:	4628      	mov	r0, r5
  405a1c:	9300      	str	r3, [sp, #0]
  405a1e:	f7ff fa59 	bl	404ed4 <_free_r>
  405a22:	9b00      	ldr	r3, [sp, #0]
  405a24:	6819      	ldr	r1, [r3, #0]
  405a26:	e6df      	b.n	4057e8 <_malloc_r+0x2d8>
  405a28:	2001      	movs	r0, #1
  405a2a:	f04f 0900 	mov.w	r9, #0
  405a2e:	e6bc      	b.n	4057aa <_malloc_r+0x29a>
  405a30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a34:	d805      	bhi.n	405a42 <_malloc_r+0x532>
  405a36:	0bda      	lsrs	r2, r3, #15
  405a38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405a3c:	00c9      	lsls	r1, r1, #3
  405a3e:	3277      	adds	r2, #119	; 0x77
  405a40:	e720      	b.n	405884 <_malloc_r+0x374>
  405a42:	f240 5154 	movw	r1, #1364	; 0x554
  405a46:	428a      	cmp	r2, r1
  405a48:	d805      	bhi.n	405a56 <_malloc_r+0x546>
  405a4a:	0c9a      	lsrs	r2, r3, #18
  405a4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405a50:	00c9      	lsls	r1, r1, #3
  405a52:	327c      	adds	r2, #124	; 0x7c
  405a54:	e716      	b.n	405884 <_malloc_r+0x374>
  405a56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405a5a:	227e      	movs	r2, #126	; 0x7e
  405a5c:	e712      	b.n	405884 <_malloc_r+0x374>
  405a5e:	687b      	ldr	r3, [r7, #4]
  405a60:	e780      	b.n	405964 <_malloc_r+0x454>
  405a62:	08f0      	lsrs	r0, r6, #3
  405a64:	f106 0308 	add.w	r3, r6, #8
  405a68:	e600      	b.n	40566c <_malloc_r+0x15c>
  405a6a:	bf00      	nop
  405a6c:	2040c5ac 	.word	0x2040c5ac

00405a70 <__ascii_mbtowc>:
  405a70:	b082      	sub	sp, #8
  405a72:	b149      	cbz	r1, 405a88 <__ascii_mbtowc+0x18>
  405a74:	b15a      	cbz	r2, 405a8e <__ascii_mbtowc+0x1e>
  405a76:	b16b      	cbz	r3, 405a94 <__ascii_mbtowc+0x24>
  405a78:	7813      	ldrb	r3, [r2, #0]
  405a7a:	600b      	str	r3, [r1, #0]
  405a7c:	7812      	ldrb	r2, [r2, #0]
  405a7e:	1c10      	adds	r0, r2, #0
  405a80:	bf18      	it	ne
  405a82:	2001      	movne	r0, #1
  405a84:	b002      	add	sp, #8
  405a86:	4770      	bx	lr
  405a88:	a901      	add	r1, sp, #4
  405a8a:	2a00      	cmp	r2, #0
  405a8c:	d1f3      	bne.n	405a76 <__ascii_mbtowc+0x6>
  405a8e:	4610      	mov	r0, r2
  405a90:	b002      	add	sp, #8
  405a92:	4770      	bx	lr
  405a94:	f06f 0001 	mvn.w	r0, #1
  405a98:	e7f4      	b.n	405a84 <__ascii_mbtowc+0x14>
  405a9a:	bf00      	nop
  405a9c:	0000      	movs	r0, r0
	...

00405aa0 <memchr>:
  405aa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405aa4:	2a10      	cmp	r2, #16
  405aa6:	db2b      	blt.n	405b00 <memchr+0x60>
  405aa8:	f010 0f07 	tst.w	r0, #7
  405aac:	d008      	beq.n	405ac0 <memchr+0x20>
  405aae:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ab2:	3a01      	subs	r2, #1
  405ab4:	428b      	cmp	r3, r1
  405ab6:	d02d      	beq.n	405b14 <memchr+0x74>
  405ab8:	f010 0f07 	tst.w	r0, #7
  405abc:	b342      	cbz	r2, 405b10 <memchr+0x70>
  405abe:	d1f6      	bne.n	405aae <memchr+0xe>
  405ac0:	b4f0      	push	{r4, r5, r6, r7}
  405ac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405ac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405aca:	f022 0407 	bic.w	r4, r2, #7
  405ace:	f07f 0700 	mvns.w	r7, #0
  405ad2:	2300      	movs	r3, #0
  405ad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ad8:	3c08      	subs	r4, #8
  405ada:	ea85 0501 	eor.w	r5, r5, r1
  405ade:	ea86 0601 	eor.w	r6, r6, r1
  405ae2:	fa85 f547 	uadd8	r5, r5, r7
  405ae6:	faa3 f587 	sel	r5, r3, r7
  405aea:	fa86 f647 	uadd8	r6, r6, r7
  405aee:	faa5 f687 	sel	r6, r5, r7
  405af2:	b98e      	cbnz	r6, 405b18 <memchr+0x78>
  405af4:	d1ee      	bne.n	405ad4 <memchr+0x34>
  405af6:	bcf0      	pop	{r4, r5, r6, r7}
  405af8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405afc:	f002 0207 	and.w	r2, r2, #7
  405b00:	b132      	cbz	r2, 405b10 <memchr+0x70>
  405b02:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b06:	3a01      	subs	r2, #1
  405b08:	ea83 0301 	eor.w	r3, r3, r1
  405b0c:	b113      	cbz	r3, 405b14 <memchr+0x74>
  405b0e:	d1f8      	bne.n	405b02 <memchr+0x62>
  405b10:	2000      	movs	r0, #0
  405b12:	4770      	bx	lr
  405b14:	3801      	subs	r0, #1
  405b16:	4770      	bx	lr
  405b18:	2d00      	cmp	r5, #0
  405b1a:	bf06      	itte	eq
  405b1c:	4635      	moveq	r5, r6
  405b1e:	3803      	subeq	r0, #3
  405b20:	3807      	subne	r0, #7
  405b22:	f015 0f01 	tst.w	r5, #1
  405b26:	d107      	bne.n	405b38 <memchr+0x98>
  405b28:	3001      	adds	r0, #1
  405b2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405b2e:	bf02      	ittt	eq
  405b30:	3001      	addeq	r0, #1
  405b32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405b36:	3001      	addeq	r0, #1
  405b38:	bcf0      	pop	{r4, r5, r6, r7}
  405b3a:	3801      	subs	r0, #1
  405b3c:	4770      	bx	lr
  405b3e:	bf00      	nop

00405b40 <memmove>:
  405b40:	4288      	cmp	r0, r1
  405b42:	b5f0      	push	{r4, r5, r6, r7, lr}
  405b44:	d90d      	bls.n	405b62 <memmove+0x22>
  405b46:	188b      	adds	r3, r1, r2
  405b48:	4298      	cmp	r0, r3
  405b4a:	d20a      	bcs.n	405b62 <memmove+0x22>
  405b4c:	1884      	adds	r4, r0, r2
  405b4e:	2a00      	cmp	r2, #0
  405b50:	d051      	beq.n	405bf6 <memmove+0xb6>
  405b52:	4622      	mov	r2, r4
  405b54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405b58:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405b5c:	4299      	cmp	r1, r3
  405b5e:	d1f9      	bne.n	405b54 <memmove+0x14>
  405b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b62:	2a0f      	cmp	r2, #15
  405b64:	d948      	bls.n	405bf8 <memmove+0xb8>
  405b66:	ea41 0300 	orr.w	r3, r1, r0
  405b6a:	079b      	lsls	r3, r3, #30
  405b6c:	d146      	bne.n	405bfc <memmove+0xbc>
  405b6e:	f100 0410 	add.w	r4, r0, #16
  405b72:	f101 0310 	add.w	r3, r1, #16
  405b76:	4615      	mov	r5, r2
  405b78:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405b7c:	f844 6c10 	str.w	r6, [r4, #-16]
  405b80:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405b84:	f844 6c0c 	str.w	r6, [r4, #-12]
  405b88:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405b8c:	f844 6c08 	str.w	r6, [r4, #-8]
  405b90:	3d10      	subs	r5, #16
  405b92:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405b96:	f844 6c04 	str.w	r6, [r4, #-4]
  405b9a:	2d0f      	cmp	r5, #15
  405b9c:	f103 0310 	add.w	r3, r3, #16
  405ba0:	f104 0410 	add.w	r4, r4, #16
  405ba4:	d8e8      	bhi.n	405b78 <memmove+0x38>
  405ba6:	f1a2 0310 	sub.w	r3, r2, #16
  405baa:	f023 030f 	bic.w	r3, r3, #15
  405bae:	f002 0e0f 	and.w	lr, r2, #15
  405bb2:	3310      	adds	r3, #16
  405bb4:	f1be 0f03 	cmp.w	lr, #3
  405bb8:	4419      	add	r1, r3
  405bba:	4403      	add	r3, r0
  405bbc:	d921      	bls.n	405c02 <memmove+0xc2>
  405bbe:	1f1e      	subs	r6, r3, #4
  405bc0:	460d      	mov	r5, r1
  405bc2:	4674      	mov	r4, lr
  405bc4:	3c04      	subs	r4, #4
  405bc6:	f855 7b04 	ldr.w	r7, [r5], #4
  405bca:	f846 7f04 	str.w	r7, [r6, #4]!
  405bce:	2c03      	cmp	r4, #3
  405bd0:	d8f8      	bhi.n	405bc4 <memmove+0x84>
  405bd2:	f1ae 0404 	sub.w	r4, lr, #4
  405bd6:	f024 0403 	bic.w	r4, r4, #3
  405bda:	3404      	adds	r4, #4
  405bdc:	4421      	add	r1, r4
  405bde:	4423      	add	r3, r4
  405be0:	f002 0203 	and.w	r2, r2, #3
  405be4:	b162      	cbz	r2, 405c00 <memmove+0xc0>
  405be6:	3b01      	subs	r3, #1
  405be8:	440a      	add	r2, r1
  405bea:	f811 4b01 	ldrb.w	r4, [r1], #1
  405bee:	f803 4f01 	strb.w	r4, [r3, #1]!
  405bf2:	428a      	cmp	r2, r1
  405bf4:	d1f9      	bne.n	405bea <memmove+0xaa>
  405bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405bf8:	4603      	mov	r3, r0
  405bfa:	e7f3      	b.n	405be4 <memmove+0xa4>
  405bfc:	4603      	mov	r3, r0
  405bfe:	e7f2      	b.n	405be6 <memmove+0xa6>
  405c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c02:	4672      	mov	r2, lr
  405c04:	e7ee      	b.n	405be4 <memmove+0xa4>
  405c06:	bf00      	nop

00405c08 <__malloc_lock>:
  405c08:	4801      	ldr	r0, [pc, #4]	; (405c10 <__malloc_lock+0x8>)
  405c0a:	f7ff bbfd 	b.w	405408 <__retarget_lock_acquire_recursive>
  405c0e:	bf00      	nop
  405c10:	2040c648 	.word	0x2040c648

00405c14 <__malloc_unlock>:
  405c14:	4801      	ldr	r0, [pc, #4]	; (405c1c <__malloc_unlock+0x8>)
  405c16:	f7ff bbf9 	b.w	40540c <__retarget_lock_release_recursive>
  405c1a:	bf00      	nop
  405c1c:	2040c648 	.word	0x2040c648

00405c20 <_realloc_r>:
  405c20:	2900      	cmp	r1, #0
  405c22:	f000 8095 	beq.w	405d50 <_realloc_r+0x130>
  405c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c2a:	460d      	mov	r5, r1
  405c2c:	4616      	mov	r6, r2
  405c2e:	b083      	sub	sp, #12
  405c30:	4680      	mov	r8, r0
  405c32:	f106 070b 	add.w	r7, r6, #11
  405c36:	f7ff ffe7 	bl	405c08 <__malloc_lock>
  405c3a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405c3e:	2f16      	cmp	r7, #22
  405c40:	f02e 0403 	bic.w	r4, lr, #3
  405c44:	f1a5 0908 	sub.w	r9, r5, #8
  405c48:	d83c      	bhi.n	405cc4 <_realloc_r+0xa4>
  405c4a:	2210      	movs	r2, #16
  405c4c:	4617      	mov	r7, r2
  405c4e:	42be      	cmp	r6, r7
  405c50:	d83d      	bhi.n	405cce <_realloc_r+0xae>
  405c52:	4294      	cmp	r4, r2
  405c54:	da43      	bge.n	405cde <_realloc_r+0xbe>
  405c56:	4bc4      	ldr	r3, [pc, #784]	; (405f68 <_realloc_r+0x348>)
  405c58:	6899      	ldr	r1, [r3, #8]
  405c5a:	eb09 0004 	add.w	r0, r9, r4
  405c5e:	4288      	cmp	r0, r1
  405c60:	f000 80b4 	beq.w	405dcc <_realloc_r+0x1ac>
  405c64:	6843      	ldr	r3, [r0, #4]
  405c66:	f023 0101 	bic.w	r1, r3, #1
  405c6a:	4401      	add	r1, r0
  405c6c:	6849      	ldr	r1, [r1, #4]
  405c6e:	07c9      	lsls	r1, r1, #31
  405c70:	d54c      	bpl.n	405d0c <_realloc_r+0xec>
  405c72:	f01e 0f01 	tst.w	lr, #1
  405c76:	f000 809b 	beq.w	405db0 <_realloc_r+0x190>
  405c7a:	4631      	mov	r1, r6
  405c7c:	4640      	mov	r0, r8
  405c7e:	f7ff fc47 	bl	405510 <_malloc_r>
  405c82:	4606      	mov	r6, r0
  405c84:	2800      	cmp	r0, #0
  405c86:	d03a      	beq.n	405cfe <_realloc_r+0xde>
  405c88:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405c8c:	f023 0301 	bic.w	r3, r3, #1
  405c90:	444b      	add	r3, r9
  405c92:	f1a0 0208 	sub.w	r2, r0, #8
  405c96:	429a      	cmp	r2, r3
  405c98:	f000 8121 	beq.w	405ede <_realloc_r+0x2be>
  405c9c:	1f22      	subs	r2, r4, #4
  405c9e:	2a24      	cmp	r2, #36	; 0x24
  405ca0:	f200 8107 	bhi.w	405eb2 <_realloc_r+0x292>
  405ca4:	2a13      	cmp	r2, #19
  405ca6:	f200 80db 	bhi.w	405e60 <_realloc_r+0x240>
  405caa:	4603      	mov	r3, r0
  405cac:	462a      	mov	r2, r5
  405cae:	6811      	ldr	r1, [r2, #0]
  405cb0:	6019      	str	r1, [r3, #0]
  405cb2:	6851      	ldr	r1, [r2, #4]
  405cb4:	6059      	str	r1, [r3, #4]
  405cb6:	6892      	ldr	r2, [r2, #8]
  405cb8:	609a      	str	r2, [r3, #8]
  405cba:	4629      	mov	r1, r5
  405cbc:	4640      	mov	r0, r8
  405cbe:	f7ff f909 	bl	404ed4 <_free_r>
  405cc2:	e01c      	b.n	405cfe <_realloc_r+0xde>
  405cc4:	f027 0707 	bic.w	r7, r7, #7
  405cc8:	2f00      	cmp	r7, #0
  405cca:	463a      	mov	r2, r7
  405ccc:	dabf      	bge.n	405c4e <_realloc_r+0x2e>
  405cce:	2600      	movs	r6, #0
  405cd0:	230c      	movs	r3, #12
  405cd2:	4630      	mov	r0, r6
  405cd4:	f8c8 3000 	str.w	r3, [r8]
  405cd8:	b003      	add	sp, #12
  405cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cde:	462e      	mov	r6, r5
  405ce0:	1be3      	subs	r3, r4, r7
  405ce2:	2b0f      	cmp	r3, #15
  405ce4:	d81e      	bhi.n	405d24 <_realloc_r+0x104>
  405ce6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405cea:	f003 0301 	and.w	r3, r3, #1
  405cee:	4323      	orrs	r3, r4
  405cf0:	444c      	add	r4, r9
  405cf2:	f8c9 3004 	str.w	r3, [r9, #4]
  405cf6:	6863      	ldr	r3, [r4, #4]
  405cf8:	f043 0301 	orr.w	r3, r3, #1
  405cfc:	6063      	str	r3, [r4, #4]
  405cfe:	4640      	mov	r0, r8
  405d00:	f7ff ff88 	bl	405c14 <__malloc_unlock>
  405d04:	4630      	mov	r0, r6
  405d06:	b003      	add	sp, #12
  405d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d0c:	f023 0303 	bic.w	r3, r3, #3
  405d10:	18e1      	adds	r1, r4, r3
  405d12:	4291      	cmp	r1, r2
  405d14:	db1f      	blt.n	405d56 <_realloc_r+0x136>
  405d16:	68c3      	ldr	r3, [r0, #12]
  405d18:	6882      	ldr	r2, [r0, #8]
  405d1a:	462e      	mov	r6, r5
  405d1c:	60d3      	str	r3, [r2, #12]
  405d1e:	460c      	mov	r4, r1
  405d20:	609a      	str	r2, [r3, #8]
  405d22:	e7dd      	b.n	405ce0 <_realloc_r+0xc0>
  405d24:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405d28:	eb09 0107 	add.w	r1, r9, r7
  405d2c:	f002 0201 	and.w	r2, r2, #1
  405d30:	444c      	add	r4, r9
  405d32:	f043 0301 	orr.w	r3, r3, #1
  405d36:	4317      	orrs	r7, r2
  405d38:	f8c9 7004 	str.w	r7, [r9, #4]
  405d3c:	604b      	str	r3, [r1, #4]
  405d3e:	6863      	ldr	r3, [r4, #4]
  405d40:	f043 0301 	orr.w	r3, r3, #1
  405d44:	3108      	adds	r1, #8
  405d46:	6063      	str	r3, [r4, #4]
  405d48:	4640      	mov	r0, r8
  405d4a:	f7ff f8c3 	bl	404ed4 <_free_r>
  405d4e:	e7d6      	b.n	405cfe <_realloc_r+0xde>
  405d50:	4611      	mov	r1, r2
  405d52:	f7ff bbdd 	b.w	405510 <_malloc_r>
  405d56:	f01e 0f01 	tst.w	lr, #1
  405d5a:	d18e      	bne.n	405c7a <_realloc_r+0x5a>
  405d5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405d60:	eba9 0a01 	sub.w	sl, r9, r1
  405d64:	f8da 1004 	ldr.w	r1, [sl, #4]
  405d68:	f021 0103 	bic.w	r1, r1, #3
  405d6c:	440b      	add	r3, r1
  405d6e:	4423      	add	r3, r4
  405d70:	4293      	cmp	r3, r2
  405d72:	db25      	blt.n	405dc0 <_realloc_r+0x1a0>
  405d74:	68c2      	ldr	r2, [r0, #12]
  405d76:	6881      	ldr	r1, [r0, #8]
  405d78:	4656      	mov	r6, sl
  405d7a:	60ca      	str	r2, [r1, #12]
  405d7c:	6091      	str	r1, [r2, #8]
  405d7e:	f8da 100c 	ldr.w	r1, [sl, #12]
  405d82:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405d86:	1f22      	subs	r2, r4, #4
  405d88:	2a24      	cmp	r2, #36	; 0x24
  405d8a:	60c1      	str	r1, [r0, #12]
  405d8c:	6088      	str	r0, [r1, #8]
  405d8e:	f200 8094 	bhi.w	405eba <_realloc_r+0x29a>
  405d92:	2a13      	cmp	r2, #19
  405d94:	d96f      	bls.n	405e76 <_realloc_r+0x256>
  405d96:	6829      	ldr	r1, [r5, #0]
  405d98:	f8ca 1008 	str.w	r1, [sl, #8]
  405d9c:	6869      	ldr	r1, [r5, #4]
  405d9e:	f8ca 100c 	str.w	r1, [sl, #12]
  405da2:	2a1b      	cmp	r2, #27
  405da4:	f200 80a2 	bhi.w	405eec <_realloc_r+0x2cc>
  405da8:	3508      	adds	r5, #8
  405daa:	f10a 0210 	add.w	r2, sl, #16
  405dae:	e063      	b.n	405e78 <_realloc_r+0x258>
  405db0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405db4:	eba9 0a03 	sub.w	sl, r9, r3
  405db8:	f8da 1004 	ldr.w	r1, [sl, #4]
  405dbc:	f021 0103 	bic.w	r1, r1, #3
  405dc0:	1863      	adds	r3, r4, r1
  405dc2:	4293      	cmp	r3, r2
  405dc4:	f6ff af59 	blt.w	405c7a <_realloc_r+0x5a>
  405dc8:	4656      	mov	r6, sl
  405dca:	e7d8      	b.n	405d7e <_realloc_r+0x15e>
  405dcc:	6841      	ldr	r1, [r0, #4]
  405dce:	f021 0b03 	bic.w	fp, r1, #3
  405dd2:	44a3      	add	fp, r4
  405dd4:	f107 0010 	add.w	r0, r7, #16
  405dd8:	4583      	cmp	fp, r0
  405dda:	da56      	bge.n	405e8a <_realloc_r+0x26a>
  405ddc:	f01e 0f01 	tst.w	lr, #1
  405de0:	f47f af4b 	bne.w	405c7a <_realloc_r+0x5a>
  405de4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405de8:	eba9 0a01 	sub.w	sl, r9, r1
  405dec:	f8da 1004 	ldr.w	r1, [sl, #4]
  405df0:	f021 0103 	bic.w	r1, r1, #3
  405df4:	448b      	add	fp, r1
  405df6:	4558      	cmp	r0, fp
  405df8:	dce2      	bgt.n	405dc0 <_realloc_r+0x1a0>
  405dfa:	4656      	mov	r6, sl
  405dfc:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e00:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e04:	1f22      	subs	r2, r4, #4
  405e06:	2a24      	cmp	r2, #36	; 0x24
  405e08:	60c1      	str	r1, [r0, #12]
  405e0a:	6088      	str	r0, [r1, #8]
  405e0c:	f200 808f 	bhi.w	405f2e <_realloc_r+0x30e>
  405e10:	2a13      	cmp	r2, #19
  405e12:	f240 808a 	bls.w	405f2a <_realloc_r+0x30a>
  405e16:	6829      	ldr	r1, [r5, #0]
  405e18:	f8ca 1008 	str.w	r1, [sl, #8]
  405e1c:	6869      	ldr	r1, [r5, #4]
  405e1e:	f8ca 100c 	str.w	r1, [sl, #12]
  405e22:	2a1b      	cmp	r2, #27
  405e24:	f200 808a 	bhi.w	405f3c <_realloc_r+0x31c>
  405e28:	3508      	adds	r5, #8
  405e2a:	f10a 0210 	add.w	r2, sl, #16
  405e2e:	6829      	ldr	r1, [r5, #0]
  405e30:	6011      	str	r1, [r2, #0]
  405e32:	6869      	ldr	r1, [r5, #4]
  405e34:	6051      	str	r1, [r2, #4]
  405e36:	68a9      	ldr	r1, [r5, #8]
  405e38:	6091      	str	r1, [r2, #8]
  405e3a:	eb0a 0107 	add.w	r1, sl, r7
  405e3e:	ebab 0207 	sub.w	r2, fp, r7
  405e42:	f042 0201 	orr.w	r2, r2, #1
  405e46:	6099      	str	r1, [r3, #8]
  405e48:	604a      	str	r2, [r1, #4]
  405e4a:	f8da 3004 	ldr.w	r3, [sl, #4]
  405e4e:	f003 0301 	and.w	r3, r3, #1
  405e52:	431f      	orrs	r7, r3
  405e54:	4640      	mov	r0, r8
  405e56:	f8ca 7004 	str.w	r7, [sl, #4]
  405e5a:	f7ff fedb 	bl	405c14 <__malloc_unlock>
  405e5e:	e751      	b.n	405d04 <_realloc_r+0xe4>
  405e60:	682b      	ldr	r3, [r5, #0]
  405e62:	6003      	str	r3, [r0, #0]
  405e64:	686b      	ldr	r3, [r5, #4]
  405e66:	6043      	str	r3, [r0, #4]
  405e68:	2a1b      	cmp	r2, #27
  405e6a:	d82d      	bhi.n	405ec8 <_realloc_r+0x2a8>
  405e6c:	f100 0308 	add.w	r3, r0, #8
  405e70:	f105 0208 	add.w	r2, r5, #8
  405e74:	e71b      	b.n	405cae <_realloc_r+0x8e>
  405e76:	4632      	mov	r2, r6
  405e78:	6829      	ldr	r1, [r5, #0]
  405e7a:	6011      	str	r1, [r2, #0]
  405e7c:	6869      	ldr	r1, [r5, #4]
  405e7e:	6051      	str	r1, [r2, #4]
  405e80:	68a9      	ldr	r1, [r5, #8]
  405e82:	6091      	str	r1, [r2, #8]
  405e84:	461c      	mov	r4, r3
  405e86:	46d1      	mov	r9, sl
  405e88:	e72a      	b.n	405ce0 <_realloc_r+0xc0>
  405e8a:	eb09 0107 	add.w	r1, r9, r7
  405e8e:	ebab 0b07 	sub.w	fp, fp, r7
  405e92:	f04b 0201 	orr.w	r2, fp, #1
  405e96:	6099      	str	r1, [r3, #8]
  405e98:	604a      	str	r2, [r1, #4]
  405e9a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405e9e:	f003 0301 	and.w	r3, r3, #1
  405ea2:	431f      	orrs	r7, r3
  405ea4:	4640      	mov	r0, r8
  405ea6:	f845 7c04 	str.w	r7, [r5, #-4]
  405eaa:	f7ff feb3 	bl	405c14 <__malloc_unlock>
  405eae:	462e      	mov	r6, r5
  405eb0:	e728      	b.n	405d04 <_realloc_r+0xe4>
  405eb2:	4629      	mov	r1, r5
  405eb4:	f7ff fe44 	bl	405b40 <memmove>
  405eb8:	e6ff      	b.n	405cba <_realloc_r+0x9a>
  405eba:	4629      	mov	r1, r5
  405ebc:	4630      	mov	r0, r6
  405ebe:	461c      	mov	r4, r3
  405ec0:	46d1      	mov	r9, sl
  405ec2:	f7ff fe3d 	bl	405b40 <memmove>
  405ec6:	e70b      	b.n	405ce0 <_realloc_r+0xc0>
  405ec8:	68ab      	ldr	r3, [r5, #8]
  405eca:	6083      	str	r3, [r0, #8]
  405ecc:	68eb      	ldr	r3, [r5, #12]
  405ece:	60c3      	str	r3, [r0, #12]
  405ed0:	2a24      	cmp	r2, #36	; 0x24
  405ed2:	d017      	beq.n	405f04 <_realloc_r+0x2e4>
  405ed4:	f100 0310 	add.w	r3, r0, #16
  405ed8:	f105 0210 	add.w	r2, r5, #16
  405edc:	e6e7      	b.n	405cae <_realloc_r+0x8e>
  405ede:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405ee2:	f023 0303 	bic.w	r3, r3, #3
  405ee6:	441c      	add	r4, r3
  405ee8:	462e      	mov	r6, r5
  405eea:	e6f9      	b.n	405ce0 <_realloc_r+0xc0>
  405eec:	68a9      	ldr	r1, [r5, #8]
  405eee:	f8ca 1010 	str.w	r1, [sl, #16]
  405ef2:	68e9      	ldr	r1, [r5, #12]
  405ef4:	f8ca 1014 	str.w	r1, [sl, #20]
  405ef8:	2a24      	cmp	r2, #36	; 0x24
  405efa:	d00c      	beq.n	405f16 <_realloc_r+0x2f6>
  405efc:	3510      	adds	r5, #16
  405efe:	f10a 0218 	add.w	r2, sl, #24
  405f02:	e7b9      	b.n	405e78 <_realloc_r+0x258>
  405f04:	692b      	ldr	r3, [r5, #16]
  405f06:	6103      	str	r3, [r0, #16]
  405f08:	696b      	ldr	r3, [r5, #20]
  405f0a:	6143      	str	r3, [r0, #20]
  405f0c:	f105 0218 	add.w	r2, r5, #24
  405f10:	f100 0318 	add.w	r3, r0, #24
  405f14:	e6cb      	b.n	405cae <_realloc_r+0x8e>
  405f16:	692a      	ldr	r2, [r5, #16]
  405f18:	f8ca 2018 	str.w	r2, [sl, #24]
  405f1c:	696a      	ldr	r2, [r5, #20]
  405f1e:	f8ca 201c 	str.w	r2, [sl, #28]
  405f22:	3518      	adds	r5, #24
  405f24:	f10a 0220 	add.w	r2, sl, #32
  405f28:	e7a6      	b.n	405e78 <_realloc_r+0x258>
  405f2a:	4632      	mov	r2, r6
  405f2c:	e77f      	b.n	405e2e <_realloc_r+0x20e>
  405f2e:	4629      	mov	r1, r5
  405f30:	4630      	mov	r0, r6
  405f32:	9301      	str	r3, [sp, #4]
  405f34:	f7ff fe04 	bl	405b40 <memmove>
  405f38:	9b01      	ldr	r3, [sp, #4]
  405f3a:	e77e      	b.n	405e3a <_realloc_r+0x21a>
  405f3c:	68a9      	ldr	r1, [r5, #8]
  405f3e:	f8ca 1010 	str.w	r1, [sl, #16]
  405f42:	68e9      	ldr	r1, [r5, #12]
  405f44:	f8ca 1014 	str.w	r1, [sl, #20]
  405f48:	2a24      	cmp	r2, #36	; 0x24
  405f4a:	d003      	beq.n	405f54 <_realloc_r+0x334>
  405f4c:	3510      	adds	r5, #16
  405f4e:	f10a 0218 	add.w	r2, sl, #24
  405f52:	e76c      	b.n	405e2e <_realloc_r+0x20e>
  405f54:	692a      	ldr	r2, [r5, #16]
  405f56:	f8ca 2018 	str.w	r2, [sl, #24]
  405f5a:	696a      	ldr	r2, [r5, #20]
  405f5c:	f8ca 201c 	str.w	r2, [sl, #28]
  405f60:	3518      	adds	r5, #24
  405f62:	f10a 0220 	add.w	r2, sl, #32
  405f66:	e762      	b.n	405e2e <_realloc_r+0x20e>
  405f68:	204005c0 	.word	0x204005c0

00405f6c <_sbrk_r>:
  405f6c:	b538      	push	{r3, r4, r5, lr}
  405f6e:	4c07      	ldr	r4, [pc, #28]	; (405f8c <_sbrk_r+0x20>)
  405f70:	2300      	movs	r3, #0
  405f72:	4605      	mov	r5, r0
  405f74:	4608      	mov	r0, r1
  405f76:	6023      	str	r3, [r4, #0]
  405f78:	f7fc fecc 	bl	402d14 <_sbrk>
  405f7c:	1c43      	adds	r3, r0, #1
  405f7e:	d000      	beq.n	405f82 <_sbrk_r+0x16>
  405f80:	bd38      	pop	{r3, r4, r5, pc}
  405f82:	6823      	ldr	r3, [r4, #0]
  405f84:	2b00      	cmp	r3, #0
  405f86:	d0fb      	beq.n	405f80 <_sbrk_r+0x14>
  405f88:	602b      	str	r3, [r5, #0]
  405f8a:	bd38      	pop	{r3, r4, r5, pc}
  405f8c:	2040c65c 	.word	0x2040c65c

00405f90 <__sread>:
  405f90:	b510      	push	{r4, lr}
  405f92:	460c      	mov	r4, r1
  405f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405f98:	f000 f9f6 	bl	406388 <_read_r>
  405f9c:	2800      	cmp	r0, #0
  405f9e:	db03      	blt.n	405fa8 <__sread+0x18>
  405fa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405fa2:	4403      	add	r3, r0
  405fa4:	6523      	str	r3, [r4, #80]	; 0x50
  405fa6:	bd10      	pop	{r4, pc}
  405fa8:	89a3      	ldrh	r3, [r4, #12]
  405faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405fae:	81a3      	strh	r3, [r4, #12]
  405fb0:	bd10      	pop	{r4, pc}
  405fb2:	bf00      	nop

00405fb4 <__swrite>:
  405fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405fb8:	4616      	mov	r6, r2
  405fba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405fbe:	461f      	mov	r7, r3
  405fc0:	05d3      	lsls	r3, r2, #23
  405fc2:	460c      	mov	r4, r1
  405fc4:	4605      	mov	r5, r0
  405fc6:	d507      	bpl.n	405fd8 <__swrite+0x24>
  405fc8:	2200      	movs	r2, #0
  405fca:	2302      	movs	r3, #2
  405fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fd0:	f000 f9c4 	bl	40635c <_lseek_r>
  405fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405fdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405fe0:	81a2      	strh	r2, [r4, #12]
  405fe2:	463b      	mov	r3, r7
  405fe4:	4632      	mov	r2, r6
  405fe6:	4628      	mov	r0, r5
  405fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405fec:	f000 b8a4 	b.w	406138 <_write_r>

00405ff0 <__sseek>:
  405ff0:	b510      	push	{r4, lr}
  405ff2:	460c      	mov	r4, r1
  405ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ff8:	f000 f9b0 	bl	40635c <_lseek_r>
  405ffc:	89a3      	ldrh	r3, [r4, #12]
  405ffe:	1c42      	adds	r2, r0, #1
  406000:	bf0e      	itee	eq
  406002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40600a:	6520      	strne	r0, [r4, #80]	; 0x50
  40600c:	81a3      	strh	r3, [r4, #12]
  40600e:	bd10      	pop	{r4, pc}

00406010 <__sclose>:
  406010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406014:	f000 b908 	b.w	406228 <_close_r>

00406018 <__swbuf_r>:
  406018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40601a:	460d      	mov	r5, r1
  40601c:	4614      	mov	r4, r2
  40601e:	4606      	mov	r6, r0
  406020:	b110      	cbz	r0, 406028 <__swbuf_r+0x10>
  406022:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406024:	2b00      	cmp	r3, #0
  406026:	d04b      	beq.n	4060c0 <__swbuf_r+0xa8>
  406028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40602c:	69a3      	ldr	r3, [r4, #24]
  40602e:	60a3      	str	r3, [r4, #8]
  406030:	b291      	uxth	r1, r2
  406032:	0708      	lsls	r0, r1, #28
  406034:	d539      	bpl.n	4060aa <__swbuf_r+0x92>
  406036:	6923      	ldr	r3, [r4, #16]
  406038:	2b00      	cmp	r3, #0
  40603a:	d036      	beq.n	4060aa <__swbuf_r+0x92>
  40603c:	b2ed      	uxtb	r5, r5
  40603e:	0489      	lsls	r1, r1, #18
  406040:	462f      	mov	r7, r5
  406042:	d515      	bpl.n	406070 <__swbuf_r+0x58>
  406044:	6822      	ldr	r2, [r4, #0]
  406046:	6961      	ldr	r1, [r4, #20]
  406048:	1ad3      	subs	r3, r2, r3
  40604a:	428b      	cmp	r3, r1
  40604c:	da1c      	bge.n	406088 <__swbuf_r+0x70>
  40604e:	3301      	adds	r3, #1
  406050:	68a1      	ldr	r1, [r4, #8]
  406052:	1c50      	adds	r0, r2, #1
  406054:	3901      	subs	r1, #1
  406056:	60a1      	str	r1, [r4, #8]
  406058:	6020      	str	r0, [r4, #0]
  40605a:	7015      	strb	r5, [r2, #0]
  40605c:	6962      	ldr	r2, [r4, #20]
  40605e:	429a      	cmp	r2, r3
  406060:	d01a      	beq.n	406098 <__swbuf_r+0x80>
  406062:	89a3      	ldrh	r3, [r4, #12]
  406064:	07db      	lsls	r3, r3, #31
  406066:	d501      	bpl.n	40606c <__swbuf_r+0x54>
  406068:	2d0a      	cmp	r5, #10
  40606a:	d015      	beq.n	406098 <__swbuf_r+0x80>
  40606c:	4638      	mov	r0, r7
  40606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406070:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406076:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40607a:	81a2      	strh	r2, [r4, #12]
  40607c:	6822      	ldr	r2, [r4, #0]
  40607e:	6661      	str	r1, [r4, #100]	; 0x64
  406080:	6961      	ldr	r1, [r4, #20]
  406082:	1ad3      	subs	r3, r2, r3
  406084:	428b      	cmp	r3, r1
  406086:	dbe2      	blt.n	40604e <__swbuf_r+0x36>
  406088:	4621      	mov	r1, r4
  40608a:	4630      	mov	r0, r6
  40608c:	f7fe fda4 	bl	404bd8 <_fflush_r>
  406090:	b940      	cbnz	r0, 4060a4 <__swbuf_r+0x8c>
  406092:	6822      	ldr	r2, [r4, #0]
  406094:	2301      	movs	r3, #1
  406096:	e7db      	b.n	406050 <__swbuf_r+0x38>
  406098:	4621      	mov	r1, r4
  40609a:	4630      	mov	r0, r6
  40609c:	f7fe fd9c 	bl	404bd8 <_fflush_r>
  4060a0:	2800      	cmp	r0, #0
  4060a2:	d0e3      	beq.n	40606c <__swbuf_r+0x54>
  4060a4:	f04f 37ff 	mov.w	r7, #4294967295
  4060a8:	e7e0      	b.n	40606c <__swbuf_r+0x54>
  4060aa:	4621      	mov	r1, r4
  4060ac:	4630      	mov	r0, r6
  4060ae:	f7fe fc7f 	bl	4049b0 <__swsetup_r>
  4060b2:	2800      	cmp	r0, #0
  4060b4:	d1f6      	bne.n	4060a4 <__swbuf_r+0x8c>
  4060b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4060ba:	6923      	ldr	r3, [r4, #16]
  4060bc:	b291      	uxth	r1, r2
  4060be:	e7bd      	b.n	40603c <__swbuf_r+0x24>
  4060c0:	f7fe fde2 	bl	404c88 <__sinit>
  4060c4:	e7b0      	b.n	406028 <__swbuf_r+0x10>
  4060c6:	bf00      	nop

004060c8 <_wcrtomb_r>:
  4060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060ca:	4606      	mov	r6, r0
  4060cc:	b085      	sub	sp, #20
  4060ce:	461f      	mov	r7, r3
  4060d0:	b189      	cbz	r1, 4060f6 <_wcrtomb_r+0x2e>
  4060d2:	4c10      	ldr	r4, [pc, #64]	; (406114 <_wcrtomb_r+0x4c>)
  4060d4:	4d10      	ldr	r5, [pc, #64]	; (406118 <_wcrtomb_r+0x50>)
  4060d6:	6824      	ldr	r4, [r4, #0]
  4060d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4060da:	2c00      	cmp	r4, #0
  4060dc:	bf08      	it	eq
  4060de:	462c      	moveq	r4, r5
  4060e0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4060e4:	47a0      	blx	r4
  4060e6:	1c43      	adds	r3, r0, #1
  4060e8:	d103      	bne.n	4060f2 <_wcrtomb_r+0x2a>
  4060ea:	2200      	movs	r2, #0
  4060ec:	238a      	movs	r3, #138	; 0x8a
  4060ee:	603a      	str	r2, [r7, #0]
  4060f0:	6033      	str	r3, [r6, #0]
  4060f2:	b005      	add	sp, #20
  4060f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060f6:	460c      	mov	r4, r1
  4060f8:	4906      	ldr	r1, [pc, #24]	; (406114 <_wcrtomb_r+0x4c>)
  4060fa:	4a07      	ldr	r2, [pc, #28]	; (406118 <_wcrtomb_r+0x50>)
  4060fc:	6809      	ldr	r1, [r1, #0]
  4060fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406100:	2900      	cmp	r1, #0
  406102:	bf08      	it	eq
  406104:	4611      	moveq	r1, r2
  406106:	4622      	mov	r2, r4
  406108:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40610c:	a901      	add	r1, sp, #4
  40610e:	47a0      	blx	r4
  406110:	e7e9      	b.n	4060e6 <_wcrtomb_r+0x1e>
  406112:	bf00      	nop
  406114:	20400024 	.word	0x20400024
  406118:	20400454 	.word	0x20400454

0040611c <__ascii_wctomb>:
  40611c:	b121      	cbz	r1, 406128 <__ascii_wctomb+0xc>
  40611e:	2aff      	cmp	r2, #255	; 0xff
  406120:	d804      	bhi.n	40612c <__ascii_wctomb+0x10>
  406122:	700a      	strb	r2, [r1, #0]
  406124:	2001      	movs	r0, #1
  406126:	4770      	bx	lr
  406128:	4608      	mov	r0, r1
  40612a:	4770      	bx	lr
  40612c:	238a      	movs	r3, #138	; 0x8a
  40612e:	6003      	str	r3, [r0, #0]
  406130:	f04f 30ff 	mov.w	r0, #4294967295
  406134:	4770      	bx	lr
  406136:	bf00      	nop

00406138 <_write_r>:
  406138:	b570      	push	{r4, r5, r6, lr}
  40613a:	460d      	mov	r5, r1
  40613c:	4c08      	ldr	r4, [pc, #32]	; (406160 <_write_r+0x28>)
  40613e:	4611      	mov	r1, r2
  406140:	4606      	mov	r6, r0
  406142:	461a      	mov	r2, r3
  406144:	4628      	mov	r0, r5
  406146:	2300      	movs	r3, #0
  406148:	6023      	str	r3, [r4, #0]
  40614a:	f7fb ff3b 	bl	401fc4 <_write>
  40614e:	1c43      	adds	r3, r0, #1
  406150:	d000      	beq.n	406154 <_write_r+0x1c>
  406152:	bd70      	pop	{r4, r5, r6, pc}
  406154:	6823      	ldr	r3, [r4, #0]
  406156:	2b00      	cmp	r3, #0
  406158:	d0fb      	beq.n	406152 <_write_r+0x1a>
  40615a:	6033      	str	r3, [r6, #0]
  40615c:	bd70      	pop	{r4, r5, r6, pc}
  40615e:	bf00      	nop
  406160:	2040c65c 	.word	0x2040c65c

00406164 <__register_exitproc>:
  406164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406168:	4d2c      	ldr	r5, [pc, #176]	; (40621c <__register_exitproc+0xb8>)
  40616a:	4606      	mov	r6, r0
  40616c:	6828      	ldr	r0, [r5, #0]
  40616e:	4698      	mov	r8, r3
  406170:	460f      	mov	r7, r1
  406172:	4691      	mov	r9, r2
  406174:	f7ff f948 	bl	405408 <__retarget_lock_acquire_recursive>
  406178:	4b29      	ldr	r3, [pc, #164]	; (406220 <__register_exitproc+0xbc>)
  40617a:	681c      	ldr	r4, [r3, #0]
  40617c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406180:	2b00      	cmp	r3, #0
  406182:	d03e      	beq.n	406202 <__register_exitproc+0x9e>
  406184:	685a      	ldr	r2, [r3, #4]
  406186:	2a1f      	cmp	r2, #31
  406188:	dc1c      	bgt.n	4061c4 <__register_exitproc+0x60>
  40618a:	f102 0e01 	add.w	lr, r2, #1
  40618e:	b176      	cbz	r6, 4061ae <__register_exitproc+0x4a>
  406190:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406194:	2401      	movs	r4, #1
  406196:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40619a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40619e:	4094      	lsls	r4, r2
  4061a0:	4320      	orrs	r0, r4
  4061a2:	2e02      	cmp	r6, #2
  4061a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4061a8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4061ac:	d023      	beq.n	4061f6 <__register_exitproc+0x92>
  4061ae:	3202      	adds	r2, #2
  4061b0:	f8c3 e004 	str.w	lr, [r3, #4]
  4061b4:	6828      	ldr	r0, [r5, #0]
  4061b6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4061ba:	f7ff f927 	bl	40540c <__retarget_lock_release_recursive>
  4061be:	2000      	movs	r0, #0
  4061c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4061c4:	4b17      	ldr	r3, [pc, #92]	; (406224 <__register_exitproc+0xc0>)
  4061c6:	b30b      	cbz	r3, 40620c <__register_exitproc+0xa8>
  4061c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4061cc:	f7ff f998 	bl	405500 <malloc>
  4061d0:	4603      	mov	r3, r0
  4061d2:	b1d8      	cbz	r0, 40620c <__register_exitproc+0xa8>
  4061d4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4061d8:	6002      	str	r2, [r0, #0]
  4061da:	2100      	movs	r1, #0
  4061dc:	6041      	str	r1, [r0, #4]
  4061de:	460a      	mov	r2, r1
  4061e0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4061e4:	f04f 0e01 	mov.w	lr, #1
  4061e8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4061ec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4061f0:	2e00      	cmp	r6, #0
  4061f2:	d0dc      	beq.n	4061ae <__register_exitproc+0x4a>
  4061f4:	e7cc      	b.n	406190 <__register_exitproc+0x2c>
  4061f6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4061fa:	430c      	orrs	r4, r1
  4061fc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406200:	e7d5      	b.n	4061ae <__register_exitproc+0x4a>
  406202:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406206:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40620a:	e7bb      	b.n	406184 <__register_exitproc+0x20>
  40620c:	6828      	ldr	r0, [r5, #0]
  40620e:	f7ff f8fd 	bl	40540c <__retarget_lock_release_recursive>
  406212:	f04f 30ff 	mov.w	r0, #4294967295
  406216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40621a:	bf00      	nop
  40621c:	20400450 	.word	0x20400450
  406220:	004071e0 	.word	0x004071e0
  406224:	00405501 	.word	0x00405501

00406228 <_close_r>:
  406228:	b538      	push	{r3, r4, r5, lr}
  40622a:	4c07      	ldr	r4, [pc, #28]	; (406248 <_close_r+0x20>)
  40622c:	2300      	movs	r3, #0
  40622e:	4605      	mov	r5, r0
  406230:	4608      	mov	r0, r1
  406232:	6023      	str	r3, [r4, #0]
  406234:	f7fc fd8a 	bl	402d4c <_close>
  406238:	1c43      	adds	r3, r0, #1
  40623a:	d000      	beq.n	40623e <_close_r+0x16>
  40623c:	bd38      	pop	{r3, r4, r5, pc}
  40623e:	6823      	ldr	r3, [r4, #0]
  406240:	2b00      	cmp	r3, #0
  406242:	d0fb      	beq.n	40623c <_close_r+0x14>
  406244:	602b      	str	r3, [r5, #0]
  406246:	bd38      	pop	{r3, r4, r5, pc}
  406248:	2040c65c 	.word	0x2040c65c

0040624c <_fclose_r>:
  40624c:	b570      	push	{r4, r5, r6, lr}
  40624e:	b159      	cbz	r1, 406268 <_fclose_r+0x1c>
  406250:	4605      	mov	r5, r0
  406252:	460c      	mov	r4, r1
  406254:	b110      	cbz	r0, 40625c <_fclose_r+0x10>
  406256:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406258:	2b00      	cmp	r3, #0
  40625a:	d03c      	beq.n	4062d6 <_fclose_r+0x8a>
  40625c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40625e:	07d8      	lsls	r0, r3, #31
  406260:	d505      	bpl.n	40626e <_fclose_r+0x22>
  406262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406266:	b92b      	cbnz	r3, 406274 <_fclose_r+0x28>
  406268:	2600      	movs	r6, #0
  40626a:	4630      	mov	r0, r6
  40626c:	bd70      	pop	{r4, r5, r6, pc}
  40626e:	89a3      	ldrh	r3, [r4, #12]
  406270:	0599      	lsls	r1, r3, #22
  406272:	d53c      	bpl.n	4062ee <_fclose_r+0xa2>
  406274:	4621      	mov	r1, r4
  406276:	4628      	mov	r0, r5
  406278:	f7fe fc0e 	bl	404a98 <__sflush_r>
  40627c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40627e:	4606      	mov	r6, r0
  406280:	b133      	cbz	r3, 406290 <_fclose_r+0x44>
  406282:	69e1      	ldr	r1, [r4, #28]
  406284:	4628      	mov	r0, r5
  406286:	4798      	blx	r3
  406288:	2800      	cmp	r0, #0
  40628a:	bfb8      	it	lt
  40628c:	f04f 36ff 	movlt.w	r6, #4294967295
  406290:	89a3      	ldrh	r3, [r4, #12]
  406292:	061a      	lsls	r2, r3, #24
  406294:	d422      	bmi.n	4062dc <_fclose_r+0x90>
  406296:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406298:	b141      	cbz	r1, 4062ac <_fclose_r+0x60>
  40629a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40629e:	4299      	cmp	r1, r3
  4062a0:	d002      	beq.n	4062a8 <_fclose_r+0x5c>
  4062a2:	4628      	mov	r0, r5
  4062a4:	f7fe fe16 	bl	404ed4 <_free_r>
  4062a8:	2300      	movs	r3, #0
  4062aa:	6323      	str	r3, [r4, #48]	; 0x30
  4062ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4062ae:	b121      	cbz	r1, 4062ba <_fclose_r+0x6e>
  4062b0:	4628      	mov	r0, r5
  4062b2:	f7fe fe0f 	bl	404ed4 <_free_r>
  4062b6:	2300      	movs	r3, #0
  4062b8:	6463      	str	r3, [r4, #68]	; 0x44
  4062ba:	f7fe fd11 	bl	404ce0 <__sfp_lock_acquire>
  4062be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062c0:	2200      	movs	r2, #0
  4062c2:	07db      	lsls	r3, r3, #31
  4062c4:	81a2      	strh	r2, [r4, #12]
  4062c6:	d50e      	bpl.n	4062e6 <_fclose_r+0x9a>
  4062c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062ca:	f7ff f89b 	bl	405404 <__retarget_lock_close_recursive>
  4062ce:	f7fe fd0d 	bl	404cec <__sfp_lock_release>
  4062d2:	4630      	mov	r0, r6
  4062d4:	bd70      	pop	{r4, r5, r6, pc}
  4062d6:	f7fe fcd7 	bl	404c88 <__sinit>
  4062da:	e7bf      	b.n	40625c <_fclose_r+0x10>
  4062dc:	6921      	ldr	r1, [r4, #16]
  4062de:	4628      	mov	r0, r5
  4062e0:	f7fe fdf8 	bl	404ed4 <_free_r>
  4062e4:	e7d7      	b.n	406296 <_fclose_r+0x4a>
  4062e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062e8:	f7ff f890 	bl	40540c <__retarget_lock_release_recursive>
  4062ec:	e7ec      	b.n	4062c8 <_fclose_r+0x7c>
  4062ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062f0:	f7ff f88a 	bl	405408 <__retarget_lock_acquire_recursive>
  4062f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062f8:	2b00      	cmp	r3, #0
  4062fa:	d1bb      	bne.n	406274 <_fclose_r+0x28>
  4062fc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4062fe:	f016 0601 	ands.w	r6, r6, #1
  406302:	d1b1      	bne.n	406268 <_fclose_r+0x1c>
  406304:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406306:	f7ff f881 	bl	40540c <__retarget_lock_release_recursive>
  40630a:	4630      	mov	r0, r6
  40630c:	bd70      	pop	{r4, r5, r6, pc}
  40630e:	bf00      	nop

00406310 <_fstat_r>:
  406310:	b538      	push	{r3, r4, r5, lr}
  406312:	460b      	mov	r3, r1
  406314:	4c07      	ldr	r4, [pc, #28]	; (406334 <_fstat_r+0x24>)
  406316:	4605      	mov	r5, r0
  406318:	4611      	mov	r1, r2
  40631a:	4618      	mov	r0, r3
  40631c:	2300      	movs	r3, #0
  40631e:	6023      	str	r3, [r4, #0]
  406320:	f7fc fd17 	bl	402d52 <_fstat>
  406324:	1c43      	adds	r3, r0, #1
  406326:	d000      	beq.n	40632a <_fstat_r+0x1a>
  406328:	bd38      	pop	{r3, r4, r5, pc}
  40632a:	6823      	ldr	r3, [r4, #0]
  40632c:	2b00      	cmp	r3, #0
  40632e:	d0fb      	beq.n	406328 <_fstat_r+0x18>
  406330:	602b      	str	r3, [r5, #0]
  406332:	bd38      	pop	{r3, r4, r5, pc}
  406334:	2040c65c 	.word	0x2040c65c

00406338 <_isatty_r>:
  406338:	b538      	push	{r3, r4, r5, lr}
  40633a:	4c07      	ldr	r4, [pc, #28]	; (406358 <_isatty_r+0x20>)
  40633c:	2300      	movs	r3, #0
  40633e:	4605      	mov	r5, r0
  406340:	4608      	mov	r0, r1
  406342:	6023      	str	r3, [r4, #0]
  406344:	f7fc fd0a 	bl	402d5c <_isatty>
  406348:	1c43      	adds	r3, r0, #1
  40634a:	d000      	beq.n	40634e <_isatty_r+0x16>
  40634c:	bd38      	pop	{r3, r4, r5, pc}
  40634e:	6823      	ldr	r3, [r4, #0]
  406350:	2b00      	cmp	r3, #0
  406352:	d0fb      	beq.n	40634c <_isatty_r+0x14>
  406354:	602b      	str	r3, [r5, #0]
  406356:	bd38      	pop	{r3, r4, r5, pc}
  406358:	2040c65c 	.word	0x2040c65c

0040635c <_lseek_r>:
  40635c:	b570      	push	{r4, r5, r6, lr}
  40635e:	460d      	mov	r5, r1
  406360:	4c08      	ldr	r4, [pc, #32]	; (406384 <_lseek_r+0x28>)
  406362:	4611      	mov	r1, r2
  406364:	4606      	mov	r6, r0
  406366:	461a      	mov	r2, r3
  406368:	4628      	mov	r0, r5
  40636a:	2300      	movs	r3, #0
  40636c:	6023      	str	r3, [r4, #0]
  40636e:	f7fc fcf7 	bl	402d60 <_lseek>
  406372:	1c43      	adds	r3, r0, #1
  406374:	d000      	beq.n	406378 <_lseek_r+0x1c>
  406376:	bd70      	pop	{r4, r5, r6, pc}
  406378:	6823      	ldr	r3, [r4, #0]
  40637a:	2b00      	cmp	r3, #0
  40637c:	d0fb      	beq.n	406376 <_lseek_r+0x1a>
  40637e:	6033      	str	r3, [r6, #0]
  406380:	bd70      	pop	{r4, r5, r6, pc}
  406382:	bf00      	nop
  406384:	2040c65c 	.word	0x2040c65c

00406388 <_read_r>:
  406388:	b570      	push	{r4, r5, r6, lr}
  40638a:	460d      	mov	r5, r1
  40638c:	4c08      	ldr	r4, [pc, #32]	; (4063b0 <_read_r+0x28>)
  40638e:	4611      	mov	r1, r2
  406390:	4606      	mov	r6, r0
  406392:	461a      	mov	r2, r3
  406394:	4628      	mov	r0, r5
  406396:	2300      	movs	r3, #0
  406398:	6023      	str	r3, [r4, #0]
  40639a:	f7fb fdf5 	bl	401f88 <_read>
  40639e:	1c43      	adds	r3, r0, #1
  4063a0:	d000      	beq.n	4063a4 <_read_r+0x1c>
  4063a2:	bd70      	pop	{r4, r5, r6, pc}
  4063a4:	6823      	ldr	r3, [r4, #0]
  4063a6:	2b00      	cmp	r3, #0
  4063a8:	d0fb      	beq.n	4063a2 <_read_r+0x1a>
  4063aa:	6033      	str	r3, [r6, #0]
  4063ac:	bd70      	pop	{r4, r5, r6, pc}
  4063ae:	bf00      	nop
  4063b0:	2040c65c 	.word	0x2040c65c

004063b4 <__aeabi_uldivmod>:
  4063b4:	b953      	cbnz	r3, 4063cc <__aeabi_uldivmod+0x18>
  4063b6:	b94a      	cbnz	r2, 4063cc <__aeabi_uldivmod+0x18>
  4063b8:	2900      	cmp	r1, #0
  4063ba:	bf08      	it	eq
  4063bc:	2800      	cmpeq	r0, #0
  4063be:	bf1c      	itt	ne
  4063c0:	f04f 31ff 	movne.w	r1, #4294967295
  4063c4:	f04f 30ff 	movne.w	r0, #4294967295
  4063c8:	f000 b97a 	b.w	4066c0 <__aeabi_idiv0>
  4063cc:	f1ad 0c08 	sub.w	ip, sp, #8
  4063d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4063d4:	f000 f806 	bl	4063e4 <__udivmoddi4>
  4063d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4063dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4063e0:	b004      	add	sp, #16
  4063e2:	4770      	bx	lr

004063e4 <__udivmoddi4>:
  4063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063e8:	468c      	mov	ip, r1
  4063ea:	460d      	mov	r5, r1
  4063ec:	4604      	mov	r4, r0
  4063ee:	9e08      	ldr	r6, [sp, #32]
  4063f0:	2b00      	cmp	r3, #0
  4063f2:	d151      	bne.n	406498 <__udivmoddi4+0xb4>
  4063f4:	428a      	cmp	r2, r1
  4063f6:	4617      	mov	r7, r2
  4063f8:	d96d      	bls.n	4064d6 <__udivmoddi4+0xf2>
  4063fa:	fab2 fe82 	clz	lr, r2
  4063fe:	f1be 0f00 	cmp.w	lr, #0
  406402:	d00b      	beq.n	40641c <__udivmoddi4+0x38>
  406404:	f1ce 0c20 	rsb	ip, lr, #32
  406408:	fa01 f50e 	lsl.w	r5, r1, lr
  40640c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406410:	fa02 f70e 	lsl.w	r7, r2, lr
  406414:	ea4c 0c05 	orr.w	ip, ip, r5
  406418:	fa00 f40e 	lsl.w	r4, r0, lr
  40641c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406420:	0c25      	lsrs	r5, r4, #16
  406422:	fbbc f8fa 	udiv	r8, ip, sl
  406426:	fa1f f987 	uxth.w	r9, r7
  40642a:	fb0a cc18 	mls	ip, sl, r8, ip
  40642e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406432:	fb08 f309 	mul.w	r3, r8, r9
  406436:	42ab      	cmp	r3, r5
  406438:	d90a      	bls.n	406450 <__udivmoddi4+0x6c>
  40643a:	19ed      	adds	r5, r5, r7
  40643c:	f108 32ff 	add.w	r2, r8, #4294967295
  406440:	f080 8123 	bcs.w	40668a <__udivmoddi4+0x2a6>
  406444:	42ab      	cmp	r3, r5
  406446:	f240 8120 	bls.w	40668a <__udivmoddi4+0x2a6>
  40644a:	f1a8 0802 	sub.w	r8, r8, #2
  40644e:	443d      	add	r5, r7
  406450:	1aed      	subs	r5, r5, r3
  406452:	b2a4      	uxth	r4, r4
  406454:	fbb5 f0fa 	udiv	r0, r5, sl
  406458:	fb0a 5510 	mls	r5, sl, r0, r5
  40645c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406460:	fb00 f909 	mul.w	r9, r0, r9
  406464:	45a1      	cmp	r9, r4
  406466:	d909      	bls.n	40647c <__udivmoddi4+0x98>
  406468:	19e4      	adds	r4, r4, r7
  40646a:	f100 33ff 	add.w	r3, r0, #4294967295
  40646e:	f080 810a 	bcs.w	406686 <__udivmoddi4+0x2a2>
  406472:	45a1      	cmp	r9, r4
  406474:	f240 8107 	bls.w	406686 <__udivmoddi4+0x2a2>
  406478:	3802      	subs	r0, #2
  40647a:	443c      	add	r4, r7
  40647c:	eba4 0409 	sub.w	r4, r4, r9
  406480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406484:	2100      	movs	r1, #0
  406486:	2e00      	cmp	r6, #0
  406488:	d061      	beq.n	40654e <__udivmoddi4+0x16a>
  40648a:	fa24 f40e 	lsr.w	r4, r4, lr
  40648e:	2300      	movs	r3, #0
  406490:	6034      	str	r4, [r6, #0]
  406492:	6073      	str	r3, [r6, #4]
  406494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406498:	428b      	cmp	r3, r1
  40649a:	d907      	bls.n	4064ac <__udivmoddi4+0xc8>
  40649c:	2e00      	cmp	r6, #0
  40649e:	d054      	beq.n	40654a <__udivmoddi4+0x166>
  4064a0:	2100      	movs	r1, #0
  4064a2:	e886 0021 	stmia.w	r6, {r0, r5}
  4064a6:	4608      	mov	r0, r1
  4064a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064ac:	fab3 f183 	clz	r1, r3
  4064b0:	2900      	cmp	r1, #0
  4064b2:	f040 808e 	bne.w	4065d2 <__udivmoddi4+0x1ee>
  4064b6:	42ab      	cmp	r3, r5
  4064b8:	d302      	bcc.n	4064c0 <__udivmoddi4+0xdc>
  4064ba:	4282      	cmp	r2, r0
  4064bc:	f200 80fa 	bhi.w	4066b4 <__udivmoddi4+0x2d0>
  4064c0:	1a84      	subs	r4, r0, r2
  4064c2:	eb65 0503 	sbc.w	r5, r5, r3
  4064c6:	2001      	movs	r0, #1
  4064c8:	46ac      	mov	ip, r5
  4064ca:	2e00      	cmp	r6, #0
  4064cc:	d03f      	beq.n	40654e <__udivmoddi4+0x16a>
  4064ce:	e886 1010 	stmia.w	r6, {r4, ip}
  4064d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064d6:	b912      	cbnz	r2, 4064de <__udivmoddi4+0xfa>
  4064d8:	2701      	movs	r7, #1
  4064da:	fbb7 f7f2 	udiv	r7, r7, r2
  4064de:	fab7 fe87 	clz	lr, r7
  4064e2:	f1be 0f00 	cmp.w	lr, #0
  4064e6:	d134      	bne.n	406552 <__udivmoddi4+0x16e>
  4064e8:	1beb      	subs	r3, r5, r7
  4064ea:	0c3a      	lsrs	r2, r7, #16
  4064ec:	fa1f fc87 	uxth.w	ip, r7
  4064f0:	2101      	movs	r1, #1
  4064f2:	fbb3 f8f2 	udiv	r8, r3, r2
  4064f6:	0c25      	lsrs	r5, r4, #16
  4064f8:	fb02 3318 	mls	r3, r2, r8, r3
  4064fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406500:	fb0c f308 	mul.w	r3, ip, r8
  406504:	42ab      	cmp	r3, r5
  406506:	d907      	bls.n	406518 <__udivmoddi4+0x134>
  406508:	19ed      	adds	r5, r5, r7
  40650a:	f108 30ff 	add.w	r0, r8, #4294967295
  40650e:	d202      	bcs.n	406516 <__udivmoddi4+0x132>
  406510:	42ab      	cmp	r3, r5
  406512:	f200 80d1 	bhi.w	4066b8 <__udivmoddi4+0x2d4>
  406516:	4680      	mov	r8, r0
  406518:	1aed      	subs	r5, r5, r3
  40651a:	b2a3      	uxth	r3, r4
  40651c:	fbb5 f0f2 	udiv	r0, r5, r2
  406520:	fb02 5510 	mls	r5, r2, r0, r5
  406524:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406528:	fb0c fc00 	mul.w	ip, ip, r0
  40652c:	45a4      	cmp	ip, r4
  40652e:	d907      	bls.n	406540 <__udivmoddi4+0x15c>
  406530:	19e4      	adds	r4, r4, r7
  406532:	f100 33ff 	add.w	r3, r0, #4294967295
  406536:	d202      	bcs.n	40653e <__udivmoddi4+0x15a>
  406538:	45a4      	cmp	ip, r4
  40653a:	f200 80b8 	bhi.w	4066ae <__udivmoddi4+0x2ca>
  40653e:	4618      	mov	r0, r3
  406540:	eba4 040c 	sub.w	r4, r4, ip
  406544:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406548:	e79d      	b.n	406486 <__udivmoddi4+0xa2>
  40654a:	4631      	mov	r1, r6
  40654c:	4630      	mov	r0, r6
  40654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406552:	f1ce 0420 	rsb	r4, lr, #32
  406556:	fa05 f30e 	lsl.w	r3, r5, lr
  40655a:	fa07 f70e 	lsl.w	r7, r7, lr
  40655e:	fa20 f804 	lsr.w	r8, r0, r4
  406562:	0c3a      	lsrs	r2, r7, #16
  406564:	fa25 f404 	lsr.w	r4, r5, r4
  406568:	ea48 0803 	orr.w	r8, r8, r3
  40656c:	fbb4 f1f2 	udiv	r1, r4, r2
  406570:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406574:	fb02 4411 	mls	r4, r2, r1, r4
  406578:	fa1f fc87 	uxth.w	ip, r7
  40657c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406580:	fb01 f30c 	mul.w	r3, r1, ip
  406584:	42ab      	cmp	r3, r5
  406586:	fa00 f40e 	lsl.w	r4, r0, lr
  40658a:	d909      	bls.n	4065a0 <__udivmoddi4+0x1bc>
  40658c:	19ed      	adds	r5, r5, r7
  40658e:	f101 30ff 	add.w	r0, r1, #4294967295
  406592:	f080 808a 	bcs.w	4066aa <__udivmoddi4+0x2c6>
  406596:	42ab      	cmp	r3, r5
  406598:	f240 8087 	bls.w	4066aa <__udivmoddi4+0x2c6>
  40659c:	3902      	subs	r1, #2
  40659e:	443d      	add	r5, r7
  4065a0:	1aeb      	subs	r3, r5, r3
  4065a2:	fa1f f588 	uxth.w	r5, r8
  4065a6:	fbb3 f0f2 	udiv	r0, r3, r2
  4065aa:	fb02 3310 	mls	r3, r2, r0, r3
  4065ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4065b2:	fb00 f30c 	mul.w	r3, r0, ip
  4065b6:	42ab      	cmp	r3, r5
  4065b8:	d907      	bls.n	4065ca <__udivmoddi4+0x1e6>
  4065ba:	19ed      	adds	r5, r5, r7
  4065bc:	f100 38ff 	add.w	r8, r0, #4294967295
  4065c0:	d26f      	bcs.n	4066a2 <__udivmoddi4+0x2be>
  4065c2:	42ab      	cmp	r3, r5
  4065c4:	d96d      	bls.n	4066a2 <__udivmoddi4+0x2be>
  4065c6:	3802      	subs	r0, #2
  4065c8:	443d      	add	r5, r7
  4065ca:	1aeb      	subs	r3, r5, r3
  4065cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4065d0:	e78f      	b.n	4064f2 <__udivmoddi4+0x10e>
  4065d2:	f1c1 0720 	rsb	r7, r1, #32
  4065d6:	fa22 f807 	lsr.w	r8, r2, r7
  4065da:	408b      	lsls	r3, r1
  4065dc:	fa05 f401 	lsl.w	r4, r5, r1
  4065e0:	ea48 0303 	orr.w	r3, r8, r3
  4065e4:	fa20 fe07 	lsr.w	lr, r0, r7
  4065e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4065ec:	40fd      	lsrs	r5, r7
  4065ee:	ea4e 0e04 	orr.w	lr, lr, r4
  4065f2:	fbb5 f9fc 	udiv	r9, r5, ip
  4065f6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4065fa:	fb0c 5519 	mls	r5, ip, r9, r5
  4065fe:	fa1f f883 	uxth.w	r8, r3
  406602:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406606:	fb09 f408 	mul.w	r4, r9, r8
  40660a:	42ac      	cmp	r4, r5
  40660c:	fa02 f201 	lsl.w	r2, r2, r1
  406610:	fa00 fa01 	lsl.w	sl, r0, r1
  406614:	d908      	bls.n	406628 <__udivmoddi4+0x244>
  406616:	18ed      	adds	r5, r5, r3
  406618:	f109 30ff 	add.w	r0, r9, #4294967295
  40661c:	d243      	bcs.n	4066a6 <__udivmoddi4+0x2c2>
  40661e:	42ac      	cmp	r4, r5
  406620:	d941      	bls.n	4066a6 <__udivmoddi4+0x2c2>
  406622:	f1a9 0902 	sub.w	r9, r9, #2
  406626:	441d      	add	r5, r3
  406628:	1b2d      	subs	r5, r5, r4
  40662a:	fa1f fe8e 	uxth.w	lr, lr
  40662e:	fbb5 f0fc 	udiv	r0, r5, ip
  406632:	fb0c 5510 	mls	r5, ip, r0, r5
  406636:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40663a:	fb00 f808 	mul.w	r8, r0, r8
  40663e:	45a0      	cmp	r8, r4
  406640:	d907      	bls.n	406652 <__udivmoddi4+0x26e>
  406642:	18e4      	adds	r4, r4, r3
  406644:	f100 35ff 	add.w	r5, r0, #4294967295
  406648:	d229      	bcs.n	40669e <__udivmoddi4+0x2ba>
  40664a:	45a0      	cmp	r8, r4
  40664c:	d927      	bls.n	40669e <__udivmoddi4+0x2ba>
  40664e:	3802      	subs	r0, #2
  406650:	441c      	add	r4, r3
  406652:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406656:	eba4 0408 	sub.w	r4, r4, r8
  40665a:	fba0 8902 	umull	r8, r9, r0, r2
  40665e:	454c      	cmp	r4, r9
  406660:	46c6      	mov	lr, r8
  406662:	464d      	mov	r5, r9
  406664:	d315      	bcc.n	406692 <__udivmoddi4+0x2ae>
  406666:	d012      	beq.n	40668e <__udivmoddi4+0x2aa>
  406668:	b156      	cbz	r6, 406680 <__udivmoddi4+0x29c>
  40666a:	ebba 030e 	subs.w	r3, sl, lr
  40666e:	eb64 0405 	sbc.w	r4, r4, r5
  406672:	fa04 f707 	lsl.w	r7, r4, r7
  406676:	40cb      	lsrs	r3, r1
  406678:	431f      	orrs	r7, r3
  40667a:	40cc      	lsrs	r4, r1
  40667c:	6037      	str	r7, [r6, #0]
  40667e:	6074      	str	r4, [r6, #4]
  406680:	2100      	movs	r1, #0
  406682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406686:	4618      	mov	r0, r3
  406688:	e6f8      	b.n	40647c <__udivmoddi4+0x98>
  40668a:	4690      	mov	r8, r2
  40668c:	e6e0      	b.n	406450 <__udivmoddi4+0x6c>
  40668e:	45c2      	cmp	sl, r8
  406690:	d2ea      	bcs.n	406668 <__udivmoddi4+0x284>
  406692:	ebb8 0e02 	subs.w	lr, r8, r2
  406696:	eb69 0503 	sbc.w	r5, r9, r3
  40669a:	3801      	subs	r0, #1
  40669c:	e7e4      	b.n	406668 <__udivmoddi4+0x284>
  40669e:	4628      	mov	r0, r5
  4066a0:	e7d7      	b.n	406652 <__udivmoddi4+0x26e>
  4066a2:	4640      	mov	r0, r8
  4066a4:	e791      	b.n	4065ca <__udivmoddi4+0x1e6>
  4066a6:	4681      	mov	r9, r0
  4066a8:	e7be      	b.n	406628 <__udivmoddi4+0x244>
  4066aa:	4601      	mov	r1, r0
  4066ac:	e778      	b.n	4065a0 <__udivmoddi4+0x1bc>
  4066ae:	3802      	subs	r0, #2
  4066b0:	443c      	add	r4, r7
  4066b2:	e745      	b.n	406540 <__udivmoddi4+0x15c>
  4066b4:	4608      	mov	r0, r1
  4066b6:	e708      	b.n	4064ca <__udivmoddi4+0xe6>
  4066b8:	f1a8 0802 	sub.w	r8, r8, #2
  4066bc:	443d      	add	r5, r7
  4066be:	e72b      	b.n	406518 <__udivmoddi4+0x134>

004066c0 <__aeabi_idiv0>:
  4066c0:	4770      	bx	lr
  4066c2:	bf00      	nop

004066c4 <sysfont_glyphs>:
	...
  4066e4:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  4066f4:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406704:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  40671c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  40672c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  40673c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406754:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406764:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406774:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  40678c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  4067a8:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  4067b8:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  4067c8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  4067d8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406800:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406828:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406838:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  40685c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  40686c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  40687c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  40688c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  4068a4:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  4068b4:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  4068c4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  4068dc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  4068ec:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  4068fc:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406914:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406924:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406934:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  40694c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  40695c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  40696c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406984:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406994:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  4069a4:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  4069c0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  4069d0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  4069e0:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  4069fc:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406a14:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406a2c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406a3c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406a4c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406a64:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406a74:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406a84:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406a9c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406aac:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406abc:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406ad4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406ae4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406af4:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406b0c:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406b1c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406b2c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406b44:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406b54:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406b64:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406b7c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406b8c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406b9c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406bb4:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406bc4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406bd4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406bec:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406bfc:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406c0c:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406c24:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406c34:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406c44:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406c5c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406c6c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406c7c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406c94:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406ca4:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406cb4:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406ccc:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406cdc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406cec:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406d04:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406d14:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406d24:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406d3c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406d4c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406d5c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406d74:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406d84:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406d94:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406dbc:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406dcc:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406de8:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  406e00:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  406e10:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406e20:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  406e38:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  406e48:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  406e58:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  406e70:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  406e80:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  406e90:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  406ea0:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  406eb0:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  406ec0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  406ed0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  406ee0:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  406ef0:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  406f00:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  406f18:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  406f28:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406f38:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  406f54:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  406f70:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  406f8c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  406f9c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  406fac:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  406fc4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  406fe0:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  406ffc:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407018:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407034:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407050:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40706c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407088:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407098:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4070a8:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4070b8:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4070c8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4070d8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4070e8:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4070f8:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  407108:	0000 0000 4449 454c 0000 0000 6d54 5172     ....IDLE....TmrQ
  407118:	0000 0000 6d54 2072 7653 0063 6f69 0000     ....Tmr Svc.io..
  407128:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  407138:	6920 206f 6174 6b73 0a0d 0000 7473 6972      io task....stri
  407148:	676e 0000 6146 6c69 6465 7420 206f 7263     ng..Failed to cr
  407158:	6165 6574 7320 7274 6e69 2067 6174 6b73     eate string task
  407168:	0a0d 0000 6c6f 6465 0000 0000 6146 6c69     ....oled....Fail
  407178:	6465 7420 206f 7263 6165 6574 6f20 656c     ed to create ole
  407188:	2064 6174 6b73 0a0d 0000 0000 454c 5344     d task......LEDS
  407198:	0000 0000 6166 686c 2061 6d65 6320 6972     ....falha em cri
  4071a8:	7261 6f20 7320 6d65 6661 726f 206f 000a     ar o semaforo ..
  4071b8:	6572 6563 6962 6f64 203a 7325 000a 0000     recebido: %s....
  4071c8:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  4071d8:	2078 7325 0a0d 0000                         x %s....

004071e0 <_global_impure_ptr>:
  4071e0:	0028 2040 3130 3332 3534 3736 3938 4241     (.@ 0123456789AB
  4071f0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407200:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407210:	296c 0000                                   l)..

00407214 <blanks.7217>:
  407214:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407224 <zeroes.7218>:
  407224:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407234:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00407244 <_ctype_>:
  407244:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  407254:	2020 2020 2020 2020 2020 2020 2020 2020                     
  407264:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  407274:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407284:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407294:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4072a4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4072b4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4072c4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407348 <_init>:
  407348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40734a:	bf00      	nop
  40734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40734e:	bc08      	pop	{r3}
  407350:	469e      	mov	lr, r3
  407352:	4770      	bx	lr

00407354 <__init_array_start>:
  407354:	00404a79 	.word	0x00404a79

00407358 <__frame_dummy_init_array_entry>:
  407358:	00400165                                e.@.

0040735c <_fini>:
  40735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40735e:	bf00      	nop
  407360:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407362:	bc08      	pop	{r3}
  407364:	469e      	mov	lr, r3
  407366:	4770      	bx	lr

00407368 <__fini_array_start>:
  407368:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 66c4 0040 0e0a 7d20               .....f@... }

20400018 <uxCriticalNesting>:
20400018:	aaaa aaaa                                   ....

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	c638 2040                                   8.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	611d 0040 5a71 0040 0000 0000 7244 0040     .a@.qZ@.....Dr@.
20400544:	7240 0040 7190 0040 7190 0040 7190 0040     @r@..q@..q@..q@.
20400554:	7190 0040 7190 0040 7190 0040 7190 0040     .q@..q@..q@..q@.
20400564:	7190 0040 7190 0040 ffff ffff ffff ffff     .q@..q@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
